/*!
 * downstream-electron,0.6.0,2023-10-06 15:00:27.169,castlabs GmbH
 * 
 * Copyright (C) 2017 Castlabs GmbH.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
!function(Q,F){if("object"==typeof exports&&"object"==typeof module)module.exports=F(require("electron"),require("underscore"),require("xmldom"),require("mkdirp"),require("base64-js"),require("jsonfile"),require("flake-idgen"),require("biguint-format"),require("moment/moment"),require("url-parse"),require("get-folder-size"));else if("function"==typeof define&&define.amd)define(["electron","underscore","xmldom","mkdirp","base64-js","jsonfile","flake-idgen","biguint-format","moment/moment","url-parse","get-folder-size"],F);else{var B="object"==typeof exports?F(require("electron"),require("underscore"),require("xmldom"),require("mkdirp"),require("base64-js"),require("jsonfile"),require("flake-idgen"),require("biguint-format"),require("moment/moment"),require("url-parse"),require("get-folder-size")):F(Q.electron,Q.underscore,Q.xmldom,Q.mkdirp,Q["base64-js"],Q.jsonfile,Q["flake-idgen"],Q["biguint-format"],Q["moment/moment"],Q["url-parse"],Q["get-folder-size"]);for(var U in B)("object"==typeof exports?exports:Q)[U]=B[U]}}(global,(function(__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__10__,__WEBPACK_EXTERNAL_MODULE__13__,__WEBPACK_EXTERNAL_MODULE__16__,__WEBPACK_EXTERNAL_MODULE__31__,__WEBPACK_EXTERNAL_MODULE__42__,__WEBPACK_EXTERNAL_MODULE__43__,__WEBPACK_EXTERNAL_MODULE__52__,__WEBPACK_EXTERNAL_MODULE__59__,__WEBPACK_EXTERNAL_MODULE__100__){return function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}return B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=40)}([function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar errors = __webpack_require__(18);\n\nvar translations = __webpack_require__(19);\n\nvar CODES = __webpack_require__(6);\n\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\n\nvar translation = {};\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\n\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n\n  return code;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\n\n\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n\n  return keyValues;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\n\n\nfunction _getTranslation(key, values) {\n  var translation = key;\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n\n  return translation;\n}\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\n\n\nfunction _getValues(args) {\n  var values = [];\n\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n\n  return values;\n}\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\n\n\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n\n  return uniqueNames;\n}\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\n\n\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n\n  return translation;\n}\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\n\n\nfunction getError(key) {\n  var values = _getValues(arguments);\n\n  var keyValues = _getKeyValues(key, values);\n\n  var msg = _getTranslation(key, values);\n\n  var code = _getCode(key);\n\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\n\n\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n\n  return _getTranslation(key, values);\n}\n\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @typedef Configuration\n * @property {string=} appDir main directory path, can be any valid path, default is electronApp.getPath(\'userData\')\n * @property {string=} settingsName - name of the folder in main directory path where to store settings\n * @property {string=} publicName - name of the folder in main directory path which will be served over http\n * @property {string=} downloadsName - name of the folder in main directory path and publicName where to store assets\n * @property {string=} offlineDomain - on which domain the content should be served, default is 127.0.0.1\n * @property {number=} offlineContentPortStart - on which port offline content should be served, default is 3010\n * @property {number=} maxOfflineContentPortRange - max range for offline port to on which content can be served\n *   It will try from {offlineContentPortStart} and if taken it will try next until it finds a free one\n * @property {number=} numberOfManifestsInParallel - max number of manifest that can be downloaded at the same time,\n *   the rest will go into queue.\n *   Be reasonable here, as it might slow down your computer, default value is 2. With 10 and very larges manifests\n *   it might go to hundreds of chunks (50 files can be downloaded at the same time per manifest). Also the highger number\n *   doesn\'t mean it will downloads all movies faster. You should find here some balance.\n *   Seems like 2-3 manifests gives the best results, 1 manifest limitation might work better for slower computers.\n * @property {regex | string=} customManifestIdFolderRegex - regex to use to validate custom manifest id - bear in mind that this\n * need to be also a valid folder name.<br>\n * By default it matches any letter or number or unicode characters (regional characters) or "-" or "_" as a first character<br>\n * Then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters:\n * ,.;\'[]{}!@#$%&*()-_=+\n *\n * @property {string=} openingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the opening tag to be added before invalid character\n *\n * @property {string=} closingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the closing tag to be added after invalid character\n *\n * @namespace DownstreamElectronBE.configuration\n * @description\n * During initialization you can configure your app\n * @example\n * //somewhere in the main process\n * const downstreamElectron = require(\'downstream-electron\');\n * const userSettings = {\n *   appDir: "/Users/admin/myApp",\n *   settingsName: "settings",\n *   publicName: "public",\n *   downloadsName: "movies"\n *   numberOfManifestsInParallel: 3\n * };\n * function createWindow() {\n *   downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n * app.on(\'ready\', createWindow);\n */\n\nvar electronApp = __webpack_require__(3).app;\n\nvar path = __webpack_require__(4);\n\nvar settings = {\n  downloadingThreadsRules: {\n    items: [{\n      max: 10,\n      files: 5\n    }, {\n      max: 100,\n      files: 10\n    }, {\n      max: 1000,\n      files: 30\n    }, {\n      max: 100000,\n      files: 50\n    }],\n    threads: [{\n      size: 10,\n      number: 1\n    }, {\n      size: 100,\n      number: 3\n    }, {\n      size: 1000,\n      number: 4\n    }, {\n      size: 100000,\n      number: 5\n    }]\n  },\n  MAX_ERRORS_DOWNLOAD_RETRY: 5,\n  MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY: 100,\n  MAX_ERRORS_DOWNLOAD_CHUNK_RETRY: 5,\n  offlineDomain: "http://127.0.0.1",\n  offlineContentPortStart: 3010,\n  maxOfflineContentPortRange: 3030,\n  numberOfManifestsInParallel: 2,\n  stopOnError: false,\n  stores: {\n    DOWNLOADS: {\n      "LEFT": "left",\n      "DOWNLOADING": "downloading",\n      "DOWNLOADED": "downloaded",\n      "ERRORS": "errors"\n    },\n    STATUS: "status",\n    PARAMS: "params",\n    MANIFEST: "manifest",\n    PERSISTENT: "persistent",\n    DATA: "data"\n  },\n  saveToDisk: true,\n  times: {\n    DOWNLOAD_TIMEOUT: 5000,\n    RETRY_TIMEOUT: 5000\n  },\n  useChunkedEncoding: false,\n  useHeadRequests: true,\n  noCache: false,\n  defaultManifestRequestOptions: {\n    headers: {\n      "Accept": "*/*",\n      // \'Accept-Encoding\': \'gzip, deflate, br\', // gzip doesn\'t work\n      // \'Accept-Language\': \'en-US,en;q=0.8,pl;q=0.6\',\n      // \'Cache-Control\': \'no-cache\',\n      // \'Connection\': \'keep-alive\', // @TODO investigate it\n      // \'Pragma\': \'no-cache\',\n      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Electron/1.8.6 Safari/537.36"\n    },\n    timeout: 5000\n  },\n  // matches any letter or number or unicode characters (regional characters) or "-" or "_" as a start\n  // then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters\n  // ,.;\'[]{}!@#$%&*()-_=+\n  // and is all case insensitive\n  customManifestIdFolderRegex: /^([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\-|\\_){1,1}([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\ |\\,|\\.|\\;|\\\'|\\[|\\]|\\{|\\}|\\!|\\@|\\#|\\$|\\%|\\&|\\*|\\(|\\)|\\-|\\_|\\=|\\+?){0,49}$/i,\n  openingTagForInvalidCustomManifestIdCharacter: \'<span style=\\\'background-color:blue;\\\'>\',\n  closingTagForInvalidCustomManifestIdCharacter: \'</span>\'\n};\n\nfunction loadUserSettings(jsonSettings) {\n  var appDir = electronApp.getPath("userData");\n  var settingsName = "settings";\n  var publicName = "public";\n  var downloadsName = "movies";\n\n  if (jsonSettings) {\n    if (jsonSettings.appDir) {\n      appDir = jsonSettings.appDir;\n    }\n\n    if (jsonSettings.settingsName) {\n      settingsName = jsonSettings.settingsName;\n    }\n\n    if (jsonSettings.publicName) {\n      publicName = jsonSettings.publicName;\n    }\n\n    if (jsonSettings.downloadsName) {\n      downloadsName = jsonSettings.downloadsName;\n    }\n\n    if (jsonSettings.offlineDomain) {\n      settings.offlineDomain = jsonSettings.offlineDomain;\n    }\n\n    if (jsonSettings.offlineContentPortStart) {\n      settings.offlineContentPortStart = jsonSettings.offlineContentPortStart;\n    }\n\n    if (jsonSettings.maxOfflineContentPortRange) {\n      settings.maxOfflineContentPortRange = jsonSettings.maxOfflineContentPortRange;\n    }\n\n    if (jsonSettings.numberOfManifestsInParallel) {\n      settings.numberOfManifestsInParallel = jsonSettings.numberOfManifestsInParallel;\n    }\n\n    if (jsonSettings.stopOnError !== undefined) {\n      settings.stopOnError = jsonSettings.stopOnError;\n    }\n\n    if (jsonSettings.customManifestIdFolderRegex) {\n      settings.customManifestIdFolderRegex = jsonSettings.customManifestIdFolderRegex;\n    }\n\n    if (jsonSettings.openingTagForInvalidCustomManifestIdCharacter) {\n      settings.openingTagForInvalidCustomManifestIdCharacter = jsonSettings.openingTagForInvalidCustomManifestIdCharacter;\n    }\n\n    if (jsonSettings.closingTagForInvalidCustomManifestIdCharacter) {\n      settings.closingTagForInvalidCustomManifestIdCharacter = jsonSettings.closingTagForInvalidCustomManifestIdCharacter;\n    }\n\n    if (jsonSettings.useHeadRequests !== undefined) {\n      settings.useHeadRequests = jsonSettings.useHeadRequests;\n    }\n\n    if (jsonSettings.times && jsonSettings.times.RETRY_TIMEOUT) {\n      settings.times.RETRY_TIMEOUT = jsonSettings.times.RETRY_TIMEOUT;\n    }\n\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY;\n    }\n\n    if (jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n\n    if (jsonSettings.noCache) {\n      settings.noCache = jsonSettings.noCache;\n    }\n  }\n\n  appDir = path.join(path.resolve(appDir), "/");\n  var settingsFolder = path.join(path.resolve(appDir + settingsName) + "/", "/");\n  var publicFolderPath = path.join(path.resolve(appDir + publicName) + "/", "/");\n  var downloadsFolderPath = path.join(path.resolve(publicFolderPath + downloadsName) + "/", "/");\n  settings.appDir = appDir;\n  settings.downloadsFolderPath = downloadsFolderPath;\n  settings.downloadsName = downloadsName;\n  settings.publicFolderPath = publicFolderPath;\n  settings.settingsFolder = settingsFolder; // console.log(\'appDir:\', appDir);\n}\n\nfunction getSettings() {\n  return settings;\n}\n\nexports.load = loadUserSettings;\nexports.getSettings = getSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports){eval('module.exports = require("fs");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiP2E0MGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJlbGVjdHJvblwiPzA0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fM19fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval('module.exports = require("path");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCI/NzRiYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1bmRlcnNjb3JlXCI/NmFlNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL2NvZGVzLmpzPzhlYzAiXSwibmFtZXMiOlsiY29kZXMiLCJHRU5FUkFMIiwiRVJST1JTIiwiSU5URVJOQUxfRVJST1IiLCJCUk9LRU4iLCJGSU5JU0hFRCIsIlVORklOSVNIRUQiLCJTVE9QUEVEIiwiQ1JFQVRFRCIsIk1JU1NJTkciLCJSRVNVTUVEIiwiU1RBUlRFRCIsIkxPQURJTkciLCJSRU1PVkVEIiwiSU5GTyIsIkVYSVNUUyIsIk5PVF9GT1VORCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLEtBQUssR0FBRztBQUNaQyxTQUFPLEVBQUUsQ0FBQyxDQURFO0FBRVpDLFFBQU0sRUFBRTtBQUNOQyxrQkFBYyxFQUFFLENBRFY7QUFFTkMsVUFBTSxFQUFFLEVBRkY7QUFHTkMsWUFBUSxFQUFFLEVBSEo7QUFJTkMsY0FBVSxFQUFFLEVBSk47QUFLTkMsV0FBTyxFQUFFLEVBTEg7QUFNTkMsV0FBTyxFQUFFLEVBTkg7QUFPTkMsV0FBTyxFQUFFLEVBUEg7QUFRTkMsV0FBTyxFQUFFLEVBUkg7QUFTTkMsV0FBTyxFQUFFLEVBVEg7QUFVTkMsV0FBTyxFQUFFLEVBVkg7QUFXTkMsV0FBTyxFQUFFLEVBWEg7QUFZTkMsUUFBSSxFQUFFLEVBWkE7QUFhTkMsVUFBTSxFQUFFLEVBYkY7QUFjTkMsYUFBUyxFQUFFO0FBZEw7QUFGSSxDQUFkO0FBbUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixLQUFqQiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb2RlcyA9IHtcbiAgR0VORVJBTDogLTEsXG4gIEVSUk9SUzoge1xuICAgIElOVEVSTkFMX0VSUk9SOiAxLFxuICAgIEJST0tFTjogMTEsXG4gICAgRklOSVNIRUQ6IDEyLFxuICAgIFVORklOSVNIRUQ6IDEzLFxuICAgIFNUT1BQRUQ6IDE0LFxuICAgIENSRUFURUQ6IDE1LFxuICAgIE1JU1NJTkc6IDE2LFxuICAgIFJFU1VNRUQ6IDE3LFxuICAgIFNUQVJURUQ6IDE4LFxuICAgIExPQURJTkc6IDE5LFxuICAgIFJFTU9WRUQ6IDIwLFxuICAgIElORk86IDIxLFxuICAgIEVYSVNUUzogMjIsXG4gICAgTk9UX0ZPVU5EOiAxMDAsXG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvZGVzO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval('var fs = __webpack_require__(2);\n\nvar appSettings = __webpack_require__(1);\n/**\n *\n * @type {{start: number, end: null}}\n */\n\n\nvar defaultOptions = Object.assign({\n  start: 0,\n  end: null\n}, appSettings.getSettings().defaultManifestRequestOptions);\n/**\n *\n * @type {{CHUNK_ERROR: string, CHUNK_SIZE_ERROR: string, FILE_CREATING_ERROR: string, FILE_WRITING_ERROR: string,\n *     ABORTED: string}}\n */\n\nvar errors = {\n  ABORTED: "ABORTED",\n  CHUNK_ERROR: "CHUNK_ERROR",\n  CHUNK_SIZE_ERROR: "CHUNK_SIZE_ERROR",\n  FILE_CREATING_ERROR: "FILE_CREATING_ERROR",\n  FILE_WRITING_ERROR: "FILE_WRITING_ERROR",\n  NO_SPACE_LEFT_ERROR: "NO_SPACE_LEFT_ERROR",\n  INTERNET: "INTERNET",\n  TIMEOUT: "TIMEOUT"\n};\n/**\n * @param {string} fileUrl - file url\n * @param {function} callback - callback to be invoked when check for file has been done\n * @returns {void}\n */\n\nfunction checkForLocalFile(fileUrl, callback) {\n  fs.stat(fileUrl, function (error, stat) {\n    if (error) {\n      callback(false);\n    } else {\n      callback(true, stat.size);\n    }\n  });\n}\n\nmodule.exports = {\n  checkForLocalFile: checkForLocalFile,\n  defaultOptions: defaultOptions,\n  errors: errors\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL2Rvd25sb2FkLWZpbGUtdXRpbC5qcz8xYjhlIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsImFwcFNldHRpbmdzIiwiZGVmYXVsdE9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJzdGFydCIsImVuZCIsImdldFNldHRpbmdzIiwiZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnMiLCJlcnJvcnMiLCJBQk9SVEVEIiwiQ0hVTktfRVJST1IiLCJDSFVOS19TSVpFX0VSUk9SIiwiRklMRV9DUkVBVElOR19FUlJPUiIsIkZJTEVfV1JJVElOR19FUlJPUiIsIk5PX1NQQUNFX0xFRlRfRVJST1IiLCJJTlRFUk5FVCIsIlRJTUVPVVQiLCJjaGVja0ZvckxvY2FsRmlsZSIsImZpbGVVcmwiLCJjYWxsYmFjayIsInN0YXQiLCJlcnJvciIsInNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUFsQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUEzQjtBQUVBOzs7Ozs7QUFJQSxJQUFNRSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUNyQjtBQUNFQyxPQUFLLEVBQUUsQ0FEVDtBQUVFQyxLQUFHLEVBQUU7QUFGUCxDQURxQixFQUtyQkwsV0FBVyxDQUFDTSxXQUFaLEdBQTBCQyw2QkFMTCxDQUF2QjtBQVFBOzs7Ozs7QUFLQSxJQUFNQyxNQUFNLEdBQUc7QUFDYkMsU0FBTyxFQUFFLFNBREk7QUFFYkMsYUFBVyxFQUFFLGFBRkE7QUFHYkMsa0JBQWdCLEVBQUUsa0JBSEw7QUFJYkMscUJBQW1CLEVBQUUscUJBSlI7QUFLYkMsb0JBQWtCLEVBQUUsb0JBTFA7QUFNYkMscUJBQW1CLEVBQUUscUJBTlI7QUFPYkMsVUFBUSxFQUFFLFVBUEc7QUFRYkMsU0FBTyxFQUFFO0FBUkksQ0FBZjtBQVdBOzs7Ozs7QUFLQSxTQUFTQyxpQkFBVCxDQUE0QkMsT0FBNUIsRUFBcUNDLFFBQXJDLEVBQStDO0FBQzdDckIsSUFBRSxDQUFDc0IsSUFBSCxDQUFRRixPQUFSLEVBQWlCLFVBQVVHLEtBQVYsRUFBaUJELElBQWpCLEVBQXVCO0FBQ3RDLFFBQUlDLEtBQUosRUFBVztBQUNURixjQUFRLENBQUMsS0FBRCxDQUFSO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLGNBQVEsQ0FBQyxJQUFELEVBQU9DLElBQUksQ0FBQ0UsSUFBWixDQUFSO0FBQ0Q7QUFDRixHQU5EO0FBT0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmUCxtQkFBaUIsRUFBRUEsaUJBREo7QUFFZmhCLGdCQUFjLEVBQUVBLGNBRkQ7QUFHZk8sUUFBTSxFQUFFQTtBQUhPLENBQWpCIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vYXBwLXNldHRpbmdzJyk7XG5cbi8qKlxuICpcbiAqIEB0eXBlIHt7c3RhcnQ6IG51bWJlciwgZW5kOiBudWxsfX1cbiAqL1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiBudWxsXG4gIH0sXG4gIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnNcbik7XG5cbi8qKlxuICpcbiAqIEB0eXBlIHt7Q0hVTktfRVJST1I6IHN0cmluZywgQ0hVTktfU0laRV9FUlJPUjogc3RyaW5nLCBGSUxFX0NSRUFUSU5HX0VSUk9SOiBzdHJpbmcsIEZJTEVfV1JJVElOR19FUlJPUjogc3RyaW5nLFxuICogICAgIEFCT1JURUQ6IHN0cmluZ319XG4gKi9cbmNvbnN0IGVycm9ycyA9IHtcbiAgQUJPUlRFRDogXCJBQk9SVEVEXCIsXG4gIENIVU5LX0VSUk9SOiBcIkNIVU5LX0VSUk9SXCIsXG4gIENIVU5LX1NJWkVfRVJST1I6IFwiQ0hVTktfU0laRV9FUlJPUlwiLFxuICBGSUxFX0NSRUFUSU5HX0VSUk9SOiBcIkZJTEVfQ1JFQVRJTkdfRVJST1JcIixcbiAgRklMRV9XUklUSU5HX0VSUk9SOiBcIkZJTEVfV1JJVElOR19FUlJPUlwiLFxuICBOT19TUEFDRV9MRUZUX0VSUk9SOiBcIk5PX1NQQUNFX0xFRlRfRVJST1JcIixcbiAgSU5URVJORVQ6IFwiSU5URVJORVRcIixcbiAgVElNRU9VVDogXCJUSU1FT1VUXCIsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlVXJsIC0gZmlsZSB1cmxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGNoZWNrIGZvciBmaWxlIGhhcyBiZWVuIGRvbmVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjaGVja0ZvckxvY2FsRmlsZSAoZmlsZVVybCwgY2FsbGJhY2spIHtcbiAgZnMuc3RhdChmaWxlVXJsLCBmdW5jdGlvbiAoZXJyb3IsIHN0YXQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlLCBzdGF0LnNpemUpO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja0ZvckxvY2FsRmlsZTogY2hlY2tGb3JMb2NhbEZpbGUsXG4gIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9ucyxcbiAgZXJyb3JzOiBlcnJvcnNcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar STATUSES = {\n  "CREATED": "CREATED",\n  "STARTED": "STARTED",\n  "ERROR": "ERROR",\n  "STOPPED": "STOPPED",\n  "FINISHED": "FINISHED",\n  "BROKEN": "BROKEN",\n  "QUEUED": "QUEUED"\n};\nmodule.exports = STATUSES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL3N0YXR1c2VzLmpzPzljNTMiXSwibmFtZXMiOlsiU1RBVFVTRVMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUc7QUFDZixhQUFXLFNBREk7QUFFZixhQUFXLFNBRkk7QUFHZixXQUFTLE9BSE07QUFJZixhQUFXLFNBSkk7QUFLZixjQUFZLFVBTEc7QUFNZixZQUFVLFFBTks7QUFPZixZQUFVO0FBUEssQ0FBakI7QUFVQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixRQUFqQiIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTVEFUVVNFUyA9IHtcbiAgXCJDUkVBVEVEXCI6IFwiQ1JFQVRFRFwiLFxuICBcIlNUQVJURURcIjogXCJTVEFSVEVEXCIsXG4gIFwiRVJST1JcIjogXCJFUlJPUlwiLFxuICBcIlNUT1BQRURcIjogXCJTVE9QUEVEXCIsXG4gIFwiRklOSVNIRURcIjogXCJGSU5JU0hFRFwiLFxuICBcIkJST0tFTlwiOiBcIkJST0tFTlwiLFxuICBcIlFVRVVFRFwiOiBcIlFVRVVFRFwiXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNUQVRVU0VTOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar FlakeIdGen = __webpack_require__(42);\n\nvar intFormat = __webpack_require__(43);\n\nvar generator = new FlakeIdGen();\n\nvar SnowflakeId = function () {\n  function SnowflakeId() {}\n\n  SnowflakeId.getUUID = function () {\n    var id1 = generator.next();\n    var id3 = intFormat(id1, 'dec');\n    return id3;\n  };\n\n  return SnowflakeId;\n}();\n\nexports.SnowflakeId = SnowflakeId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9zbm93Zmxha2UtaWQuanM/YjYzNSJdLCJuYW1lcyI6WyJGbGFrZUlkR2VuIiwicmVxdWlyZSIsImludEZvcm1hdCIsImdlbmVyYXRvciIsIlNub3dmbGFrZUlkIiwiZ2V0VVVJRCIsImlkMSIsIm5leHQiLCJpZDMiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUExQjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsRUFBRCxDQUF6Qjs7QUFDQSxJQUFNRSxTQUFTLEdBQUcsSUFBSUgsVUFBSixFQUFsQjs7QUFDQSxJQUFNSSxXQUFXLEdBQUksWUFBWTtBQUMvQixXQUFTQSxXQUFULEdBQXdCLENBQ3ZCOztBQUVEQSxhQUFXLENBQUNDLE9BQVosR0FBc0IsWUFBWTtBQUNoQyxRQUFNQyxHQUFHLEdBQUdILFNBQVMsQ0FBQ0ksSUFBVixFQUFaO0FBQ0EsUUFBTUMsR0FBRyxHQUFHTixTQUFTLENBQUNJLEdBQUQsRUFBTSxLQUFOLENBQXJCO0FBQ0EsV0FBT0UsR0FBUDtBQUNELEdBSkQ7O0FBS0EsU0FBT0osV0FBUDtBQUNELENBVm9CLEVBQXJCOztBQVdBSyxPQUFPLENBQUNMLFdBQVIsR0FBc0JBLFdBQXRCIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEZsYWtlSWRHZW4gPSByZXF1aXJlKCdmbGFrZS1pZGdlbicpO1xuY29uc3QgaW50Rm9ybWF0ID0gcmVxdWlyZSgnYmlndWludC1mb3JtYXQnKTtcbmNvbnN0IGdlbmVyYXRvciA9IG5ldyBGbGFrZUlkR2VuO1xuY29uc3QgU25vd2ZsYWtlSWQgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTbm93Zmxha2VJZCAoKSB7XG4gIH1cblxuICBTbm93Zmxha2VJZC5nZXRVVUlEID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGlkMSA9IGdlbmVyYXRvci5uZXh0KCk7XG4gICAgY29uc3QgaWQzID0gaW50Rm9ybWF0KGlkMSwgJ2RlYycpO1xuICAgIHJldHVybiBpZDM7XG4gIH07XG4gIHJldHVybiBTbm93Zmxha2VJZDtcbn0oKSk7XG5leHBvcnRzLlNub3dmbGFrZUlkID0gU25vd2ZsYWtlSWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__10__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ4bWxkb21cIj9kMmRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xMF9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nmodule.exports = function fieldsPicker(obj, fields, attr) {\n  if (typeof attr === "undefined") {\n    return;\n  }\n\n  for (var i = 0, j = fields.length; i < j; i++) {\n    var field = fields[i];\n    var defaultValue = field.defaultValue;\n    var name = field.name || field;\n    obj[name] = typeof attr[name] !== "undefined" ? attr[name] : defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9maWVsZHMtcGlja2VyLmpzPzA2M2UiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZpZWxkc1BpY2tlciIsIm9iaiIsImZpZWxkcyIsImF0dHIiLCJpIiwiaiIsImxlbmd0aCIsImZpZWxkIiwiZGVmYXVsdFZhbHVlIiwibmFtZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxZQUFULENBQXVCQyxHQUF2QixFQUE0QkMsTUFBNUIsRUFBb0NDLElBQXBDLEVBQTBDO0FBQ3pELE1BQUksT0FBT0EsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUMvQjtBQUNEOztBQUNELE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSCxNQUFNLENBQUNJLE1BQTNCLEVBQW1DRixDQUFDLEdBQUdDLENBQXZDLEVBQTBDRCxDQUFDLEVBQTNDLEVBQStDO0FBQzdDLFFBQU1HLEtBQUssR0FBR0wsTUFBTSxDQUFDRSxDQUFELENBQXBCO0FBQ0EsUUFBTUksWUFBWSxHQUFHRCxLQUFLLENBQUNDLFlBQTNCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHRixLQUFLLENBQUNFLElBQU4sSUFBY0YsS0FBM0I7QUFDQU4sT0FBRyxDQUFDUSxJQUFELENBQUgsR0FBWSxPQUFPTixJQUFJLENBQUNNLElBQUQsQ0FBWCxLQUFzQixXQUF0QixHQUFvQ04sSUFBSSxDQUFDTSxJQUFELENBQXhDLEdBQWlERCxZQUE3RDtBQUNEO0FBQ0YsQ0FWRCIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpZWxkc1BpY2tlciAob2JqLCBmaWVsZHMsIGF0dHIpIHtcbiAgaWYgKHR5cGVvZiBhdHRyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBqID0gZmllbGRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ldO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICBjb25zdCBuYW1lID0gZmllbGQubmFtZSB8fCBmaWVsZDtcbiAgICBvYmpbbmFtZV0gPSB0eXBlb2YgYXR0cltuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIiA/IGF0dHJbbmFtZV0gOiBkZWZhdWx0VmFsdWU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(13),\n    mkdirp = _require.mkdirp;\n\nvar appSettings = __webpack_require__(1);\n\nvar jsonfile = __webpack_require__(31);\n\nvar LinkSave = __webpack_require__(74);\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @constructor\n */\n\n\nfunction FlushItem(manifestId, storageKey, items) {\n  this.manifestId = manifestId;\n  this.storageKey = storageKey;\n  this.items = items;\n}\n/**\n *\n * @param {function} resolve - callback to be invoked when save was successful\n * @param {function} reject - callback to be invoked when save failed\n * @private\n * @returns {void}\n */\n\n\nFlushItem.prototype._saveToDisk = function (resolve, reject) {\n  var self = this;\n  var path = appSettings.getSettings().settingsFolder + this.manifestId + "/";\n  var file = "" + this.storageKey + ".json";\n  var fileUrl = path + file;\n  mkdirp(path).then(function () {\n    var data = convertStorage(self.storageKey, self.items);\n    jsonfile.writeFile(fileUrl, data, function (err) {\n      if (!err) {\n        resolve();\n      } else {\n        reject(err);\n      }\n    });\n  }, function (error) {\n    reject(error);\n  });\n};\n/**\n *\n * @returns {Promise} promise\n */\n\n\nFlushItem.prototype.save = function () {\n  return new Promise(this._saveToDisk.bind(this));\n};\n\nmodule.exports = FlushItem;\n/**\n * Helper function\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @returns {*} data to be stored\n */\n\nvar convertStorage = function convertStorage(storageKey, items) {\n  var itemsA = [];\n  var data; //only for downloading we want to have an array\n\n  if (storageKey === "downloading") {\n    itemsA = [];\n\n    for (var key in items) {\n      itemsA.push(items[key]);\n    }\n\n    items = itemsA;\n  }\n\n  if (items instanceof Array) {\n    data = [];\n\n    for (var i = 0, j = items.length; i < j; i++) {\n      data.push(new LinkSave(items[i]));\n    }\n  } else {\n    data = items;\n  }\n\n  return data;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL2ZsdXNoLWl0ZW0uanM/NzE0YSJdLCJuYW1lcyI6WyJyZXF1aXJlIiwibWtkaXJwIiwiYXBwU2V0dGluZ3MiLCJqc29uZmlsZSIsIkxpbmtTYXZlIiwiRmx1c2hJdGVtIiwibWFuaWZlc3RJZCIsInN0b3JhZ2VLZXkiLCJpdGVtcyIsInByb3RvdHlwZSIsIl9zYXZlVG9EaXNrIiwicmVzb2x2ZSIsInJlamVjdCIsInNlbGYiLCJwYXRoIiwiZ2V0U2V0dGluZ3MiLCJzZXR0aW5nc0ZvbGRlciIsImZpbGUiLCJmaWxlVXJsIiwidGhlbiIsImRhdGEiLCJjb252ZXJ0U3RvcmFnZSIsIndyaXRlRmlsZSIsImVyciIsImVycm9yIiwic2F2ZSIsIlByb21pc2UiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyIsIml0ZW1zQSIsImtleSIsInB1c2giLCJBcnJheSIsImkiLCJqIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBYTs7ZUFDSUEsbUJBQU8sQ0FBQyxFQUFELEM7SUFBakJDLE0sWUFBQUEsTTs7QUFFUCxJQUFNQyxXQUFXLEdBQUdGLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNRyxRQUFRLEdBQUdILG1CQUFPLENBQUMsRUFBRCxDQUF4Qjs7QUFDQSxJQUFNSSxRQUFRLEdBQUdKLG1CQUFPLENBQUMsRUFBRCxDQUF4QjtBQUVBOzs7Ozs7Ozs7QUFPQSxTQUFTSyxTQUFULENBQW9CQyxVQUFwQixFQUFnQ0MsVUFBaEMsRUFBNENDLEtBQTVDLEVBQW1EO0FBQ2pELE9BQUtGLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsT0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxPQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFPQUgsU0FBUyxDQUFDSSxTQUFWLENBQW9CQyxXQUFwQixHQUFrQyxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUMzRCxNQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLE1BQU1DLElBQUksR0FBR1osV0FBVyxDQUFDYSxXQUFaLEdBQTBCQyxjQUExQixHQUEyQyxLQUFLVixVQUFoRCxHQUE2RCxHQUExRTtBQUNBLE1BQU1XLElBQUksR0FBRyxLQUFLLEtBQUtWLFVBQVYsR0FBdUIsT0FBcEM7QUFDQSxNQUFNVyxPQUFPLEdBQUdKLElBQUksR0FBR0csSUFBdkI7QUFDQWhCLFFBQU0sQ0FBQ2EsSUFBRCxDQUFOLENBQWFLLElBQWIsQ0FBa0IsWUFBWTtBQUM1QixRQUFJQyxJQUFJLEdBQUdDLGNBQWMsQ0FBQ1IsSUFBSSxDQUFDTixVQUFOLEVBQWtCTSxJQUFJLENBQUNMLEtBQXZCLENBQXpCO0FBQ0FMLFlBQVEsQ0FBQ21CLFNBQVQsQ0FBbUJKLE9BQW5CLEVBQTRCRSxJQUE1QixFQUFrQyxVQUFVRyxHQUFWLEVBQWU7QUFDL0MsVUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDUlosZUFBTztBQUNSLE9BRkQsTUFFTztBQUNMQyxjQUFNLENBQUNXLEdBQUQsQ0FBTjtBQUNEO0FBQ0YsS0FORDtBQU9ELEdBVEQsRUFTRyxVQUFVQyxLQUFWLEVBQWlCO0FBQ2xCWixVQUFNLENBQUNZLEtBQUQsQ0FBTjtBQUNELEdBWEQ7QUFZRCxDQWpCRDtBQW1CQTs7Ozs7O0FBSUFuQixTQUFTLENBQUNJLFNBQVYsQ0FBb0JnQixJQUFwQixHQUEyQixZQUFZO0FBQ3JDLFNBQU8sSUFBSUMsT0FBSixDQUFZLEtBQUtoQixXQUFMLENBQWlCaUIsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBWixDQUFQO0FBQ0QsQ0FGRDs7QUFJQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsU0FBakI7QUFFQTs7Ozs7OztBQU1BLElBQU1nQixjQUFjLEdBQUcsU0FBU0EsY0FBVCxDQUF5QmQsVUFBekIsRUFBcUNDLEtBQXJDLEVBQTRDO0FBQ2pFLE1BQUlzQixNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlWLElBQUosQ0FGaUUsQ0FHakU7O0FBQ0EsTUFBSWIsVUFBVSxLQUFLLGFBQW5CLEVBQWtDO0FBQ2hDdUIsVUFBTSxHQUFHLEVBQVQ7O0FBQ0EsU0FBSyxJQUFJQyxHQUFULElBQWdCdkIsS0FBaEIsRUFBdUI7QUFDckJzQixZQUFNLENBQUNFLElBQVAsQ0FBWXhCLEtBQUssQ0FBQ3VCLEdBQUQsQ0FBakI7QUFDRDs7QUFDRHZCLFNBQUssR0FBR3NCLE1BQVI7QUFDRDs7QUFDRCxNQUFJdEIsS0FBSyxZQUFZeUIsS0FBckIsRUFBNEI7QUFDMUJiLFFBQUksR0FBRyxFQUFQOztBQUNBLFNBQUssSUFBSWMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHM0IsS0FBSyxDQUFDNEIsTUFBMUIsRUFBa0NGLENBQUMsR0FBR0MsQ0FBdEMsRUFBeUNELENBQUMsRUFBMUMsRUFBOEM7QUFDNUNkLFVBQUksQ0FBQ1ksSUFBTCxDQUFVLElBQUk1QixRQUFKLENBQWFJLEtBQUssQ0FBQzBCLENBQUQsQ0FBbEIsQ0FBVjtBQUNEO0FBQ0YsR0FMRCxNQUtPO0FBQ0xkLFFBQUksR0FBR1osS0FBUDtBQUNEOztBQUNELFNBQU9ZLElBQVA7QUFDRCxDQXBCRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3Qge21rZGlycH0gPSByZXF1aXJlKCdta2RpcnAnKTtcblxuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9hcHAtc2V0dGluZ3MnKTtcbmNvbnN0IGpzb25maWxlID0gcmVxdWlyZSgnanNvbmZpbGUnKTtcbmNvbnN0IExpbmtTYXZlID0gcmVxdWlyZSgnLi4vbWFuaWZlc3QvanNvbi9saW5rLXNhdmUnKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleSAtIHN0b3JhZ2Uga2V5XG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBzdG9yYWdlIGl0ZW1zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRmx1c2hJdGVtIChtYW5pZmVzdElkLCBzdG9yYWdlS2V5LCBpdGVtcykge1xuICB0aGlzLm1hbmlmZXN0SWQgPSBtYW5pZmVzdElkO1xuICB0aGlzLnN0b3JhZ2VLZXkgPSBzdG9yYWdlS2V5O1xuICB0aGlzLml0ZW1zID0gaXRlbXM7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmUgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gc2F2ZSB3YXMgc3VjY2Vzc2Z1bFxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVqZWN0IC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHNhdmUgZmFpbGVkXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkZsdXNoSXRlbS5wcm90b3R5cGUuX3NhdmVUb0Rpc2sgPSBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBjb25zdCBwYXRoID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIHRoaXMubWFuaWZlc3RJZCArIFwiL1wiO1xuICBjb25zdCBmaWxlID0gXCJcIiArIHRoaXMuc3RvcmFnZUtleSArIFwiLmpzb25cIjtcbiAgY29uc3QgZmlsZVVybCA9IHBhdGggKyBmaWxlO1xuICBta2RpcnAocGF0aCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRhdGEgPSBjb252ZXJ0U3RvcmFnZShzZWxmLnN0b3JhZ2VLZXksIHNlbGYuaXRlbXMpO1xuICAgIGpzb25maWxlLndyaXRlRmlsZShmaWxlVXJsLCBkYXRhLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZVxuICovXG5GbHVzaEl0ZW0ucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSh0aGlzLl9zYXZlVG9EaXNrLmJpbmQodGhpcykpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGbHVzaEl0ZW07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleSAtIHN0b3JhZ2Uga2V5XG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBzdG9yYWdlIGl0ZW1zXG4gKiBAcmV0dXJucyB7Kn0gZGF0YSB0byBiZSBzdG9yZWRcbiAqL1xuY29uc3QgY29udmVydFN0b3JhZ2UgPSBmdW5jdGlvbiBjb252ZXJ0U3RvcmFnZSAoc3RvcmFnZUtleSwgaXRlbXMpIHtcbiAgbGV0IGl0ZW1zQSA9IFtdO1xuICBsZXQgZGF0YTtcbiAgLy9vbmx5IGZvciBkb3dubG9hZGluZyB3ZSB3YW50IHRvIGhhdmUgYW4gYXJyYXlcbiAgaWYgKHN0b3JhZ2VLZXkgPT09IFwiZG93bmxvYWRpbmdcIikge1xuICAgIGl0ZW1zQSA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiBpdGVtcykge1xuICAgICAgaXRlbXNBLnB1c2goaXRlbXNba2V5XSk7XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXNBO1xuICB9XG4gIGlmIChpdGVtcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgZGF0YSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gaXRlbXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBkYXRhLnB1c2gobmV3IExpbmtTYXZlKGl0ZW1zW2ldKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRhdGEgPSBpdGVtcztcbiAgfVxuICByZXR1cm4gZGF0YTtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__13__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJta2RpcnBcIj82YTBkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xM19fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n")},function(module,exports){eval('module.exports = require("events");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJldmVudHNcIj83YTdlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXZlbnRzXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar ManifestLoader = __webpack_require__(46);\n\nvar ManifestLocalLoader = __webpack_require__(47); // const ManifestXML_1 = require(\"./../parser/manifest-xml\");\n\n\nvar ManifestXML_1 = __webpack_require__(48);\n\nvar AllAdaptationSets_1 = __webpack_require__(56);\n\nvar SnowflakeId_1 = __webpack_require__(9);\n\nvar jsonRepresentation = __webpack_require__(57);\n\nvar jsonRepresentationWithProtection = __webpack_require__(58);\n\nvar manifestLoader = new ManifestLoader.ManifestLoader();\n\nvar urlParse = __webpack_require__(59);\n\nvar encoding = __webpack_require__(60);\n\nvar Manifest = function () {\n  function Manifest(id) {\n    if (!id) {\n      this.id = String(SnowflakeId_1.SnowflakeId.getUUID());\n    } else {\n      this.id = id;\n    }\n  }\n\n  Manifest.prototype._setUpUrl = function (url) {\n    var pathName = urlParse(url).pathname;\n    this.url = url;\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = pathName.substring(pathName.lastIndexOf('/') + 1, pathName.length);\n  };\n\n  Manifest.prototype.load = function (url) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n\n      var p = manifestLoader.load(url);\n      p.then(function (v) {\n        var isEncodingUTF16 = encoding.isUTF16(v.response);\n        v.response = v.response.toString(isEncodingUTF16 ? 'utf16le' : 'utf-8');\n        var xml = v.response;\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n        _this.manifestXML.parse(xml, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n          throw new Error(\"Manifest parsing error\");\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  Manifest.prototype.loadWithManifest = function (url, manifest) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n\n      _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n      _this.manifestXML.parse(manifest, function () {\n        resolve();\n      }, function (e) {\n        reject(e);\n        throw new Error(\"Manifest parsing error\");\n      });\n    });\n  };\n\n  Manifest.prototype.loadFromLocal = function (localPath, url) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (!url || !localPath) {\n        reject('wrong parameter');\n        return;\n      }\n\n      ManifestLocalLoader(localPath).then(function (str) {\n        _this._setUpUrl(url);\n\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n        _this.manifestXML.parse(str, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  Manifest.prototype.loadFromStr = function (str, url) {\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = url.substring(url.lastIndexOf('/') + 1, url.length);\n    this.manifestXML = new ManifestXML_1.ManifestXML();\n    this.manifestXML.parse(str);\n  };\n\n  Manifest.prototype.getAdaptationSets = function () {\n    var vid = this.manifestXML.getVideoAdaptation();\n    var audio = this.manifestXML.getAudioAdaptation();\n    var text = this.manifestXML.getTextAdaptation();\n    var all = new AllAdaptationSets_1.AllAdaptationSets(vid, audio, text);\n    return all;\n  };\n\n  Manifest.prototype.getVideoRepresentations = function () {\n    return this.manifestXML.getVideoAdaptation();\n  };\n\n  Manifest.prototype.getAudioRepresentations = function () {\n    return this.manifestXML.getAudioAdaptation();\n  };\n\n  Manifest.prototype.getTextRepresentations = function () {\n    return this.manifestXML.getTextAdaptation();\n  };\n\n  Manifest.prototype.getProtections = function () {\n    var protections = {};\n    protections.video = jsonRepresentationWithProtection(this.getVideoRepresentations());\n    protections.audio = jsonRepresentationWithProtection(this.getAudioRepresentations());\n    protections.text = jsonRepresentationWithProtection(this.getTextRepresentations());\n    return protections;\n  };\n\n  Manifest.prototype.getRemoteDomain = function () {\n    return this.url_domain;\n  };\n\n  Manifest.prototype.getManifestName = function () {\n    return this.manifest_name;\n  };\n\n  Manifest.prototype.getManifestUrl = function () {\n    return this.url;\n  };\n\n  Manifest.prototype.getManifestXML = function () {\n    return this.manifestXML.getManifestXML();\n  };\n\n  Manifest.prototype.removeNode = function () {\n    this.manifestXML.removeNode();\n  };\n\n  Manifest.prototype.getJsonInfo = function () {\n    var json = {};\n    json.id = this.id;\n    json.audio = jsonRepresentation(this.getAudioRepresentations());\n    json.video = jsonRepresentation(this.getVideoRepresentations());\n    json.text = jsonRepresentation(this.getTextRepresentations());\n    json.protections = this.getProtections();\n    return json;\n  };\n\n  return Manifest;\n}();\n\nexports.Manifest = Manifest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__16__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJiYXNlNjQtanNcIj84MTgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNl9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar SnowflakeId_1 = __webpack_require__(9);\n\nvar ManifestNode = function () {\n  function ManifestNode(node, xml) {\n    this.childCollection = [];\n    this.attributeList = {};\n    this.setCurrentNode(node);\n    this.setChildCollection(node.childNodes);\n    this.buildAttributeList(node, this.attributeList);\n    this.setParentNode(node.parentNode);\n    this.xml = xml;\n    this.id = SnowflakeId_1.SnowflakeId.getUUID();\n  }\n\n  ManifestNode.prototype.setParentNode = function (node) {\n    this.parentNode = node;\n  };\n\n  ManifestNode.prototype.setChildCollection = function (coll) {\n    this.childCollection = coll;\n  };\n\n  ManifestNode.prototype.setCurrentNode = function (node) {\n    this.currentNode = node;\n  };\n\n  ManifestNode.prototype.buildAttributeList = function (node, list) {\n    this.writeAttributesToList(node, list);\n  };\n\n  ManifestNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    }\n  };\n\n  ManifestNode.prototype.getCurrentNode = function () {\n    return this.currentNode;\n  };\n\n  ManifestNode.prototype.markNodeForDownload = function (value) {\n    var newAtt = this.xml.createAttribute('markForDownload');\n\n    if (!value) {\n      this.currentNode.removeAttribute('markForDownload');\n    } else {\n      newAtt.value = value.toString();\n      this.currentNode.setAttributeNode(newAtt);\n    }\n  };\n\n  ManifestNode.prototype.getAttributeList = function () {\n    return this.attributeList;\n  };\n\n  return ManifestNode;\n}();\n\nexports.ManifestNode = ManifestNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21hbmlmZXN0LW5vZGUuanM/MzFiNCJdLCJuYW1lcyI6WyJTbm93Zmxha2VJZF8xIiwicmVxdWlyZSIsIk1hbmlmZXN0Tm9kZSIsIm5vZGUiLCJ4bWwiLCJjaGlsZENvbGxlY3Rpb24iLCJhdHRyaWJ1dGVMaXN0Iiwic2V0Q3VycmVudE5vZGUiLCJzZXRDaGlsZENvbGxlY3Rpb24iLCJjaGlsZE5vZGVzIiwiYnVpbGRBdHRyaWJ1dGVMaXN0Iiwic2V0UGFyZW50Tm9kZSIsInBhcmVudE5vZGUiLCJpZCIsIlNub3dmbGFrZUlkIiwiZ2V0VVVJRCIsInByb3RvdHlwZSIsImNvbGwiLCJjdXJyZW50Tm9kZSIsImxpc3QiLCJ3cml0ZUF0dHJpYnV0ZXNUb0xpc3QiLCJhdHRyTGlzdCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJnZXRDdXJyZW50Tm9kZSIsIm1hcmtOb2RlRm9yRG93bmxvYWQiLCJ2YWx1ZSIsIm5ld0F0dCIsImNyZWF0ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInRvU3RyaW5nIiwic2V0QXR0cmlidXRlTm9kZSIsImdldEF0dHJpYnV0ZUxpc3QiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUE3Qjs7QUFDQSxJQUFNQyxZQUFZLEdBQUksWUFBWTtBQUNoQyxXQUFTQSxZQUFULENBQXVCQyxJQUF2QixFQUE2QkMsR0FBN0IsRUFBa0M7QUFDaEMsU0FBS0MsZUFBTCxHQUF1QixFQUF2QjtBQUNBLFNBQUtDLGFBQUwsR0FBcUIsRUFBckI7QUFDQSxTQUFLQyxjQUFMLENBQW9CSixJQUFwQjtBQUNBLFNBQUtLLGtCQUFMLENBQXdCTCxJQUFJLENBQUNNLFVBQTdCO0FBQ0EsU0FBS0Msa0JBQUwsQ0FBd0JQLElBQXhCLEVBQThCLEtBQUtHLGFBQW5DO0FBQ0EsU0FBS0ssYUFBTCxDQUFtQlIsSUFBSSxDQUFDUyxVQUF4QjtBQUNBLFNBQUtSLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtTLEVBQUwsR0FBVWIsYUFBYSxDQUFDYyxXQUFkLENBQTBCQyxPQUExQixFQUFWO0FBQ0Q7O0FBRURiLGNBQVksQ0FBQ2MsU0FBYixDQUF1QkwsYUFBdkIsR0FBdUMsVUFBVVIsSUFBVixFQUFnQjtBQUNyRCxTQUFLUyxVQUFMLEdBQWtCVCxJQUFsQjtBQUNELEdBRkQ7O0FBR0FELGNBQVksQ0FBQ2MsU0FBYixDQUF1QlIsa0JBQXZCLEdBQTRDLFVBQVVTLElBQVYsRUFBZ0I7QUFDMUQsU0FBS1osZUFBTCxHQUF1QlksSUFBdkI7QUFDRCxHQUZEOztBQUdBZixjQUFZLENBQUNjLFNBQWIsQ0FBdUJULGNBQXZCLEdBQXdDLFVBQVVKLElBQVYsRUFBZ0I7QUFDdEQsU0FBS2UsV0FBTCxHQUFtQmYsSUFBbkI7QUFDRCxHQUZEOztBQUdBRCxjQUFZLENBQUNjLFNBQWIsQ0FBdUJOLGtCQUF2QixHQUE0QyxVQUFVUCxJQUFWLEVBQWdCZ0IsSUFBaEIsRUFBc0I7QUFDaEUsU0FBS0MscUJBQUwsQ0FBMkJqQixJQUEzQixFQUFpQ2dCLElBQWpDO0FBQ0QsR0FGRDs7QUFHQWpCLGNBQVksQ0FBQ2MsU0FBYixDQUF1QkkscUJBQXZCLEdBQStDLFVBQVVqQixJQUFWLEVBQWdCZ0IsSUFBaEIsRUFBc0I7QUFDbkUsUUFBTUUsUUFBUSxHQUFHbEIsSUFBSSxDQUFDbUIsVUFBdEI7O0FBQ0EsU0FBSyxJQUFJQyxJQUFULElBQWlCRixRQUFqQixFQUEyQjtBQUN6QixVQUFJLENBQUNGLElBQUksQ0FBQ0UsUUFBUSxDQUFDRSxJQUFELENBQVIsQ0FBZUMsUUFBaEIsQ0FBVCxFQUFvQztBQUNsQ0wsWUFBSSxDQUFDRSxRQUFRLENBQUNFLElBQUQsQ0FBUixDQUFlQyxRQUFoQixDQUFKLEdBQWdDSCxRQUFRLENBQUNFLElBQUQsQ0FBUixDQUFlRSxTQUEvQztBQUNEO0FBQ0Y7O0FBQ0QsUUFBSXRCLElBQUksQ0FBQ1MsVUFBTCxLQUFvQixJQUF4QixFQUE4QjtBQUM1QixXQUFLRixrQkFBTCxDQUF3QlAsSUFBSSxDQUFDUyxVQUE3QixFQUF5Q08sSUFBekM7QUFDRDtBQUNGLEdBVkQ7O0FBV0FqQixjQUFZLENBQUNjLFNBQWIsQ0FBdUJVLGNBQXZCLEdBQXdDLFlBQVk7QUFDbEQsV0FBTyxLQUFLUixXQUFaO0FBQ0QsR0FGRDs7QUFHQWhCLGNBQVksQ0FBQ2MsU0FBYixDQUF1QlcsbUJBQXZCLEdBQTZDLFVBQVVDLEtBQVYsRUFBaUI7QUFDNUQsUUFBTUMsTUFBTSxHQUFHLEtBQUt6QixHQUFMLENBQVMwQixlQUFULENBQXlCLGlCQUF6QixDQUFmOztBQUNBLFFBQUksQ0FBQ0YsS0FBTCxFQUFZO0FBQ1YsV0FBS1YsV0FBTCxDQUFpQmEsZUFBakIsQ0FBaUMsaUJBQWpDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xGLFlBQU0sQ0FBQ0QsS0FBUCxHQUFlQSxLQUFLLENBQUNJLFFBQU4sRUFBZjtBQUNBLFdBQUtkLFdBQUwsQ0FBaUJlLGdCQUFqQixDQUFrQ0osTUFBbEM7QUFDRDtBQUNGLEdBUkQ7O0FBU0EzQixjQUFZLENBQUNjLFNBQWIsQ0FBdUJrQixnQkFBdkIsR0FBMEMsWUFBWTtBQUNwRCxXQUFPLEtBQUs1QixhQUFaO0FBQ0QsR0FGRDs7QUFHQSxTQUFPSixZQUFQO0FBQ0QsQ0FuRHFCLEVBQXRCOztBQW9EQWlDLE9BQU8sQ0FBQ2pDLFlBQVIsR0FBdUJBLFlBQXZCIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTbm93Zmxha2VJZF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvc25vd2ZsYWtlLWlkXCIpO1xuY29uc3QgTWFuaWZlc3ROb2RlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWFuaWZlc3ROb2RlIChub2RlLCB4bWwpIHtcbiAgICB0aGlzLmNoaWxkQ29sbGVjdGlvbiA9IFtdO1xuICAgIHRoaXMuYXR0cmlidXRlTGlzdCA9IHt9O1xuICAgIHRoaXMuc2V0Q3VycmVudE5vZGUobm9kZSk7XG4gICAgdGhpcy5zZXRDaGlsZENvbGxlY3Rpb24obm9kZS5jaGlsZE5vZGVzKTtcbiAgICB0aGlzLmJ1aWxkQXR0cmlidXRlTGlzdChub2RlLCB0aGlzLmF0dHJpYnV0ZUxpc3QpO1xuICAgIHRoaXMuc2V0UGFyZW50Tm9kZShub2RlLnBhcmVudE5vZGUpO1xuICAgIHRoaXMueG1sID0geG1sO1xuICAgIHRoaXMuaWQgPSBTbm93Zmxha2VJZF8xLlNub3dmbGFrZUlkLmdldFVVSUQoKTtcbiAgfVxuXG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuc2V0UGFyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdGhpcy5wYXJlbnROb2RlID0gbm9kZTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5zZXRDaGlsZENvbGxlY3Rpb24gPSBmdW5jdGlvbiAoY29sbCkge1xuICAgIHRoaXMuY2hpbGRDb2xsZWN0aW9uID0gY29sbDtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5zZXRDdXJyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuYnVpbGRBdHRyaWJ1dGVMaXN0ID0gZnVuY3Rpb24gKG5vZGUsIGxpc3QpIHtcbiAgICB0aGlzLndyaXRlQXR0cmlidXRlc1RvTGlzdChub2RlLCBsaXN0KTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS53cml0ZUF0dHJpYnV0ZXNUb0xpc3QgPSBmdW5jdGlvbiAobm9kZSwgbGlzdCkge1xuICAgIGNvbnN0IGF0dHJMaXN0ID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgIGZvciAobGV0IGF0dHIgaW4gYXR0ckxpc3QpIHtcbiAgICAgIGlmICghbGlzdFthdHRyTGlzdFthdHRyXS5ub2RlTmFtZV0pIHtcbiAgICAgICAgbGlzdFthdHRyTGlzdFthdHRyXS5ub2RlTmFtZV0gPSBhdHRyTGlzdFthdHRyXS5ub2RlVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVMaXN0KG5vZGUucGFyZW50Tm9kZSwgbGlzdCk7XG4gICAgfVxuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLmdldEN1cnJlbnROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnROb2RlO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLm1hcmtOb2RlRm9yRG93bmxvYWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBjb25zdCBuZXdBdHQgPSB0aGlzLnhtbC5jcmVhdGVBdHRyaWJ1dGUoJ21hcmtGb3JEb3dubG9hZCcpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUucmVtb3ZlQXR0cmlidXRlKCdtYXJrRm9yRG93bmxvYWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3QXR0LnZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUuc2V0QXR0cmlidXRlTm9kZShuZXdBdHQpO1xuICAgIH1cbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZUxpc3Q7XG4gIH07XG4gIHJldHVybiBNYW5pZmVzdE5vZGU7XG59KCkpO1xuZXhwb3J0cy5NYW5pZmVzdE5vZGUgPSBNYW5pZmVzdE5vZGU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar CODES = __webpack_require__(6);\n\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLE1BQUksRUFBRTtBQURTLENBQWpCIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXN0OiBcIkhlbGxvIHdvcmxkXCJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = {\n  regexpProtocolRemove: /^https{0,1}\\:\\/\\//i\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvY29uc3RhbnRzLmpzP2Q5OWEiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlZ2V4cFByb3RvY29sUmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLHNCQUFvQixFQUFFO0FBRFAsQ0FBakIiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlZ2V4cFByb3RvY29sUmVtb3ZlOiAvXmh0dHBzezAsMX1cXDpcXC9cXC8vaVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(16);\n\nvar pssh = __webpack_require__(22);\n\nvar MPEG_DASH_PROTECTION_SCHEME_ID_URI = 'urn:mpeg:dash:mp4protection:2011';\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(17);\n\nvar RepresentationNode_1 = __webpack_require__(50);\n\nvar AdaptationSetNode = function (_super) {\n  __extends(AdaptationSetNode, _super);\n\n  function AdaptationSetNode(node, xml) {\n    _super.call(this, node, xml);\n\n    this.representationColl = [];\n    this.contentProtections = [];\n    this.parse();\n  }\n\n  AdaptationSetNode.prototype.parse = function () {\n    var rep = this.currentNode.getElementsByTagName('Representation');\n\n    for (var i = 0; i < rep.length; i++) {\n      var repNode = new RepresentationNode_1.RepresentationNode(rep[i], this.xml);\n      this.representationColl[i] = repNode;\n\n      if (this.representationColl[0].hasMimeType()) {\n        {\n          this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n        }\n      }\n    }\n\n    var contentProtections = this.currentNode.getElementsByTagName('ContentProtection');\n    var KID; // find CENC KEY ID if there is some\n\n    for (var _i = 0; _i < contentProtections.length; _i++) {\n      var attrs = contentProtections[_i].attributes;\n      var schemeIdUri = attrs.getNamedItem(\"schemeIdUri\");\n\n      if (schemeIdUri && schemeIdUri.value.toLowerCase() === MPEG_DASH_PROTECTION_SCHEME_ID_URI) {\n        if (attrs.getNamedItem(\"cenc:default_KID\")) {\n          KID = attrs.getNamedItem(\"cenc:default_KID\").value; // Get KID (base64 decoded) as byte array\n\n          KID = BASE64.toByteArray(KID);\n          break;\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < contentProtections.length; _i2++) {\n      var _attrs = contentProtections[_i2].attributes;\n\n      if (_attrs.getNamedItem(\"schemeIdUri\")) {\n        var scheme = _attrs.getNamedItem(\"schemeIdUri\").value.toLowerCase();\n\n        var cenc = contentProtections[_i2].getElementsByTagName(\"cenc:pssh\");\n\n        if (cenc.length) {\n          var contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: cenc[0].childNodes[0].data\n          };\n          this.contentProtections.push(contentProtection);\n        } else if (KID && scheme === WIDEVINE_SCHEME_ID_URI) {\n          var psshWV = pssh.createWidevinePssh(KID);\n          var _contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: psshWV\n          };\n          this.contentProtections.push(_contentProtection);\n        }\n      }\n    }\n  };\n\n  AdaptationSetNode.prototype.getContentProtections = function () {\n    return this.contentProtections;\n  };\n\n  AdaptationSetNode.prototype.getWidevineProtection = function () {\n    return this.contentProtections.filter(function (item) {\n      return item.schemeIdUri && item.schemeIdUri.toLowerCase() === WIDEVINE_SCHEME_ID_URI;\n    });\n  };\n\n  AdaptationSetNode.prototype.isMimeType = function (str) {\n    return this.attributeList['mimeType'].indexOf(str) != -1 ? true : false;\n  };\n\n  AdaptationSetNode.prototype.isContentType = function (str) {\n    return this.attributeList['contentType'] && this.attributeList['contentType'].indexOf(str) != -1 ? true : false;\n  };\n\n  return AdaptationSetNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.AdaptationSetNode = AdaptationSetNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(16);\n\nfunction createWidevinePssh(KID) {\n  // Create Widevine CENC header (Protocol Buffer) with KID value\n  var wvCencHeader = new Uint8Array(2 + KID.length);\n  wvCencHeader[0] = 0x12;\n  wvCencHeader[1] = 0x10;\n  wvCencHeader.set(KID, 2); // Create a pssh box\n\n  var length = 12\n  /* box length, type, version and flags */\n  + 16\n  /* SystemID */\n  + 4\n  /* data length */\n  + wvCencHeader.length,\n      pssh = new Uint8Array(length),\n      i = 0; // Set box length value (4 bytes)\n\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = length; // Set type ('pssh'), version (0) and flags (0)\n\n  pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n  i += 8; // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n\n  pssh.set([0xed, 0xef, 0x8b, 0xa9, 0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n  i += 16; // Set data length value\n\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = wvCencHeader.length; // Copy Widevine CENC header\n\n  pssh.set(wvCencHeader, i); // Convert to BASE64 string\n\n  pssh = BASE64.fromByteArray(pssh);\n  return pssh;\n}\n\nmodule.exports = {\n  createWidevinePssh: createWidevinePssh\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL3Bzc2guanM/ZTQ2ZCJdLCJuYW1lcyI6WyJCQVNFNjQiLCJyZXF1aXJlIiwiY3JlYXRlV2lkZXZpbmVQc3NoIiwiS0lEIiwid3ZDZW5jSGVhZGVyIiwiVWludDhBcnJheSIsImxlbmd0aCIsInNldCIsInBzc2giLCJpIiwiZnJvbUJ5dGVBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQXRCOztBQUVBLFNBQVNDLGtCQUFULENBQTZCQyxHQUE3QixFQUFrQztBQUNoQztBQUNBLE1BQUlDLFlBQVksR0FBRyxJQUFJQyxVQUFKLENBQWUsSUFBSUYsR0FBRyxDQUFDRyxNQUF2QixDQUFuQjtBQUNBRixjQUFZLENBQUMsQ0FBRCxDQUFaLEdBQWtCLElBQWxCO0FBQ0FBLGNBQVksQ0FBQyxDQUFELENBQVosR0FBa0IsSUFBbEI7QUFDQUEsY0FBWSxDQUFDRyxHQUFiLENBQWlCSixHQUFqQixFQUFzQixDQUF0QixFQUxnQyxDQU9oQzs7QUFDQSxNQUFJRyxNQUFNLEdBQUc7QUFBRztBQUFILElBQStDO0FBQUc7QUFBbEQsSUFBbUU7QUFBRTtBQUFyRSxJQUF5RkYsWUFBWSxDQUFDRSxNQUFuSDtBQUFBLE1BQ0lFLElBQUksR0FBRyxJQUFJSCxVQUFKLENBQWVDLE1BQWYsQ0FEWDtBQUFBLE1BRUlHLENBQUMsR0FBRyxDQUZSLENBUmdDLENBWWhDOztBQUNBRCxNQUFJLENBQUNDLENBQUMsRUFBRixDQUFKLEdBQVksQ0FBWjtBQUNBRCxNQUFJLENBQUNDLENBQUMsRUFBRixDQUFKLEdBQVksQ0FBWjtBQUNBRCxNQUFJLENBQUNDLENBQUMsRUFBRixDQUFKLEdBQVksQ0FBWjtBQUNBRCxNQUFJLENBQUNDLENBQUMsRUFBRixDQUFKLEdBQVlILE1BQVosQ0FoQmdDLENBa0JoQzs7QUFDQUUsTUFBSSxDQUFDRCxHQUFMLENBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUMsSUFBckMsRUFBMkMsSUFBM0MsQ0FBVCxFQUEyREUsQ0FBM0Q7QUFDQUEsR0FBQyxJQUFJLENBQUwsQ0FwQmdDLENBc0JoQzs7QUFDQUQsTUFBSSxDQUFDRCxHQUFMLENBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBMEIsSUFBMUIsRUFBZ0MsSUFBaEMsRUFBc0MsSUFBdEMsRUFBNEMsSUFBNUMsRUFBa0QsSUFBbEQsRUFBd0QsSUFBeEQsRUFBOEQsSUFBOUQsRUFBb0UsSUFBcEUsRUFBMEUsSUFBMUUsRUFBZ0YsSUFBaEYsRUFBc0YsSUFBdEYsRUFBNEYsSUFBNUYsQ0FBVCxFQUE0R0UsQ0FBNUc7QUFDQUEsR0FBQyxJQUFJLEVBQUwsQ0F4QmdDLENBMEJoQzs7QUFDQUQsTUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7QUFDQUQsTUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7QUFDQUQsTUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7QUFDQUQsTUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZTCxZQUFZLENBQUNFLE1BQXpCLENBOUJnQyxDQWdDaEM7O0FBQ0FFLE1BQUksQ0FBQ0QsR0FBTCxDQUFTSCxZQUFULEVBQXVCSyxDQUF2QixFQWpDZ0MsQ0FtQ2hDOztBQUNBRCxNQUFJLEdBQUdSLE1BQU0sQ0FBQ1UsYUFBUCxDQUFxQkYsSUFBckIsQ0FBUDtBQUNBLFNBQU9BLElBQVA7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZWLG9CQUFrQixFQUFFQTtBQURMLENBQWpCIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBCQVNFNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKTtcblxuZnVuY3Rpb24gY3JlYXRlV2lkZXZpbmVQc3NoIChLSUQpIHtcbiAgLy8gQ3JlYXRlIFdpZGV2aW5lIENFTkMgaGVhZGVyIChQcm90b2NvbCBCdWZmZXIpIHdpdGggS0lEIHZhbHVlXG4gIHZhciB3dkNlbmNIZWFkZXIgPSBuZXcgVWludDhBcnJheSgyICsgS0lELmxlbmd0aCk7XG4gIHd2Q2VuY0hlYWRlclswXSA9IDB4MTI7XG4gIHd2Q2VuY0hlYWRlclsxXSA9IDB4MTA7XG4gIHd2Q2VuY0hlYWRlci5zZXQoS0lELCAyKTtcblxuICAvLyBDcmVhdGUgYSBwc3NoIGJveFxuICB2YXIgbGVuZ3RoID0gMTIgLyogYm94IGxlbmd0aCwgdHlwZSwgdmVyc2lvbiBhbmQgZmxhZ3MgKi8gKyAxNiAvKiBTeXN0ZW1JRCAqLyArIDQgLyogZGF0YSBsZW5ndGggKi8gKyB3dkNlbmNIZWFkZXIubGVuZ3RoLFxuICAgICAgcHNzaCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCksXG4gICAgICBpID0gMDtcblxuICAvLyBTZXQgYm94IGxlbmd0aCB2YWx1ZSAoNCBieXRlcylcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gbGVuZ3RoO1xuXG4gIC8vIFNldCB0eXBlICgncHNzaCcpLCB2ZXJzaW9uICgwKSBhbmQgZmxhZ3MgKDApXG4gIHBzc2guc2V0KFsweDcwLCAweDczLCAweDczLCAweDY4LCAweDAwLCAweDAwLCAweDAwLCAweDAwXSwgaSk7XG4gIGkgKz0gODtcblxuICAvLyBTZXQgU3lzdGVtSUQgKCdlZGVmOGJhOS03OWQ2LTRhY2UtYTNjOC0yN2RjZDUxZDIxZWQnKVxuICBwc3NoLnNldChbMHhlZCwgMHhlZiwgMHg4YiwgMHhhOSwgIDB4NzksIDB4ZDYsIDB4NGEsIDB4Y2UsIDB4YTMsIDB4YzgsIDB4MjcsIDB4ZGMsIDB4ZDUsIDB4MWQsIDB4MjEsIDB4ZWRdLCBpKTtcbiAgaSArPSAxNjtcblxuICAvLyBTZXQgZGF0YSBsZW5ndGggdmFsdWVcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gMDtcbiAgcHNzaFtpKytdID0gd3ZDZW5jSGVhZGVyLmxlbmd0aDtcblxuICAvLyBDb3B5IFdpZGV2aW5lIENFTkMgaGVhZGVyXG4gIHBzc2guc2V0KHd2Q2VuY0hlYWRlciwgaSk7XG5cbiAgLy8gQ29udmVydCB0byBCQVNFNjQgc3RyaW5nXG4gIHBzc2ggPSBCQVNFNjQuZnJvbUJ5dGVBcnJheShwc3NoKTtcbiAgcmV0dXJuIHBzc2g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVXaWRldmluZVBzc2g6IGNyZWF0ZVdpZGV2aW5lUHNzaFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar ZeroPadding_1 = __webpack_require__(51);\n\nvar MediaUrl_1 = __webpack_require__(24);\n\nvar CREATE_URL;\n\n(function (CREATE_URL) {\n  CREATE_URL[CREATE_URL["FROM_TEMPLATE"] = 0] = "FROM_TEMPLATE";\n  CREATE_URL[CREATE_URL["FROM_TIMELINE"] = 1] = "FROM_TIMELINE";\n  CREATE_URL[CREATE_URL["FROM_SEGMENTLIST"] = 2] = "FROM_SEGMENTLIST";\n  CREATE_URL[CREATE_URL["FROM_SEGMENT_BASE"] = 3] = "FROM_SEGMENT_BASE";\n})(CREATE_URL || (CREATE_URL = {}));\n\nvar SegmentInformation = function () {\n  function SegmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentBase, segmentTemplate, segmentTimeline, timelineItemList, segmentList, segmentUrlList) {\n    this.hasSegmentBase = false;\n    this.baseUrl = \'\';\n    this.presentationDuration = 0;\n    this.bandwidth = 0;\n    this.startNumber = 0;\n    this.mediaUrls = [];\n    this.whichUseCase = -1;\n    this.mimeType = \'\';\n    SegmentInformation.count += 1;\n    this.presentationDuration = presentationDuration;\n    this.mimeType = mimeType;\n\n    if (baseUrl) {\n      this.baseUrl = baseUrl;\n    }\n\n    if (bandwidth) {\n      this.bandwidth = bandwidth;\n    }\n\n    if (representationID) {\n      this.representationID = representationID;\n    }\n\n    if (segmentBase) {\n      this.segmentBase = segmentBase;\n      this.hasSegmentBase = true;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENT_BASE;\n    }\n\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      this.mediaTemplate = this.replace$RepresentationID$(this.mediaTemplate, this.representationID);\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n      this.startNumber = this.segmentTemplate.attributes.getNamedItem("startNumber") ? parseInt(this.segmentTemplate.attributes.getNamedItem("startNumber").nodeValue) : 0;\n      this.whichUseCase = CREATE_URL.FROM_TEMPLATE;\n    }\n\n    if (segmentTimeline) {\n      this.segmentTimeline = segmentTimeline;\n    }\n\n    if (timelineItemList) {\n      this.timelineItemList = timelineItemList;\n      this.whichUseCase = CREATE_URL.FROM_TIMELINE;\n    }\n\n    if (segmentList) {\n      this.segmentList = segmentList;\n    }\n\n    if (segmentUrlList) {\n      this.segmentUrlList = segmentUrlList;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENTLIST;\n    }\n\n    var hasFileExtension = false;\n    var initSegment = \'\';\n\n    switch (this.whichUseCase) {\n      case CREATE_URL.FROM_SEGMENTLIST:\n        this.createFragmentFromUrlList(this.segmentUrlList);\n        initSegment = this.createInitSegment(this.segmentList.getElementsByTagName(\'Initialization\')[0].attributes.getNamedItem("sourceURL").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n\n        if (SegmentInformation.count == 0) {// console.log(\'CREATE_URL.FROM_SEGMENTLIST\', this.mediaUrls, this);\n        }\n\n        break;\n\n      case CREATE_URL.FROM_TIMELINE:\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        this.createFragmentUrlsFromTimeline(this.timelineItemList);\n        break;\n\n      case CREATE_URL.FROM_SEGMENT_BASE:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, this.baseUrl, this.mimeType));\n        }\n\n        if (SegmentInformation.count == 0) {// console.log(\'CREATE_URL.FROM_SEGMENT_BASE\', this.mediaUrls, this);\n        }\n\n        break;\n\n      case CREATE_URL.FROM_TEMPLATE:\n        this.createFragmentsFromTemplate();\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        break;\n\n      default:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl("", this.baseUrl, this.mimeType));\n        }\n\n    }\n  }\n\n  SegmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    var currentTime = this.segmentTemplate.attributes.getNamedItem("presentationTimeOffset");\n\n    if (currentTime) {\n      currentTime = parseInt(currentTime.nodeValue, 10);\n    } else {\n      currentTime = 0;\n    }\n\n    var hasCurrentTime = false;\n    var time = 0;\n\n    for (var i = 0; i < segmentNodes.length; i++) {\n      if (i > 0 && segmentNodes[i].attributes.getNamedItem("t") && segmentNodes[i].attributes.getNamedItem("t").nodeValue !== undefined) {\n        hasCurrentTime = true;\n        time = parseInt(segmentNodes[i].attributes.getNamedItem("t").nodeValue);\n      } else {\n        hasCurrentTime = false;\n      }\n\n      var duration = segmentNodes[i].attributes.getNamedItem("d") && segmentNodes[i].attributes.getNamedItem("d").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("d").nodeValue) : 0;\n      var repeat = segmentNodes[i].attributes.getNamedItem("r") && segmentNodes[i].attributes.getNamedItem("r").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("r").nodeValue) : 0;\n\n      for (var k = 1; k <= repeat; k++) {\n        var fragment_1 = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n        fragment_1 = this.replace$RepresentationID$(fragment_1, this.representationID);\n        fragment_1 = this.replace$Time$(fragment_1, currentTime);\n        fragment_1 = this.replace$Bandwidth$(fragment_1, this.bandwidth);\n        this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment_1, this.mimeType));\n\n        if (!hasCurrentTime) {\n          currentTime += duration;\n        } else {\n          currentTime = time;\n        }\n      }\n\n      var fragment = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      fragment = this.replace$RepresentationID$(fragment, this.representationID);\n      fragment = this.replace$Time$(fragment, currentTime);\n      fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n\n      if (!hasCurrentTime) {\n        currentTime += duration;\n      } else {\n        currentTime = time;\n      }\n    }\n  };\n\n  SegmentInformation.prototype.createFragmentFromUrlList = function (urlListNodes) {\n    for (var i = 0; i < urlListNodes.length; i++) {\n      var fragment = urlListNodes[i].attributes.getNamedItem("media").nodeValue;\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  SegmentInformation.prototype.createFragmentsFromTemplate = function () {\n    var segmentDuration = parseInt(this.segmentTemplate.attributes.getNamedItem("duration").nodeValue);\n    var segmentTimescale = this.segmentTemplate.attributes.getNamedItem("timescale") ? parseInt(this.segmentTemplate.attributes.getNamedItem("timescale").nodeValue) : 1;\n    var numSegments = Math.ceil(this.presentationDuration / (segmentDuration / segmentTimescale) / 1000);\n    var mediaTemplateStringSegment = this.mediaTemplate.split(\'$\');\n    var templateReplaceableIndex;\n    var startNumber = this.startNumber || 0;\n\n    for (var k = 0; k < mediaTemplateStringSegment.length; k++) {\n      if (mediaTemplateStringSegment[k].indexOf(\'Number\') != -1) {\n        templateReplaceableIndex = \'$\' + mediaTemplateStringSegment[k] + \'$\';\n      }\n    }\n\n    var paddingAmount = ZeroPadding_1.ZeroPadding.getPaddingAmount(templateReplaceableIndex);\n\n    for (var i = startNumber; i < numSegments + startNumber; i++) {\n      var segmentIndex = ZeroPadding_1.ZeroPadding.addPadding(i, paddingAmount);\n      var fragment = void 0;\n\n      if (paddingAmount === 0) {\n        fragment = this.replace$Number$(this.mediaTemplate, i);\n      } else {\n        fragment = this.mediaTemplate.replace(templateReplaceableIndex, segmentIndex);\n      }\n\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  SegmentInformation.prototype.replace$RepresentationID$ = function (fragment, id) {\n    return fragment.replace(new RegExp(\'\\\\$RepresentationID\\\\$\', \'g\'), id);\n  };\n\n  SegmentInformation.prototype.replace$Number$ = function (fragment, num) {\n    return fragment.replace(new RegExp(\'\\\\$Number\\\\$\', \'g\'), num.toString());\n  };\n\n  SegmentInformation.prototype.replace$Bandwidth$ = function (fragment, bandwidth) {\n    return fragment.replace(new RegExp(\'\\\\$Bandwidth\\\\$\', \'g\'), bandwidth.toString());\n  };\n\n  SegmentInformation.prototype.replace$Time$ = function (fragment, currentIndex) {\n    return fragment.replace(new RegExp(\'\\\\$Time\\\\$\', \'g\'), currentIndex.toString());\n  };\n\n  SegmentInformation.prototype.createInitSegment = function (fragment) {\n    fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n    fragment = this.replace$RepresentationID$(fragment, this.representationID);\n    return fragment;\n  };\n\n  SegmentInformation.prototype.getMediaUrlList = function () {\n    return this.mediaUrls;\n  };\n\n  SegmentInformation.count = -1;\n  return SegmentInformation;\n}();\n\nexports.SegmentInformation = SegmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar MediaUrl = function () {\n  function MediaUrl(baseURL, mediaFile, mimeType, url_domain) {\n    if (url_domain === void 0) {\n      url_domain = '';\n    }\n\n    this.baseURL = '';\n\n    if (baseURL.startsWith('http') === false) {\n      this.baseURL = baseURL;\n    }\n\n    this.mediaFile = mediaFile.indexOf('/') !== -1 ? this.truncateMediaFilePath(mediaFile) : mediaFile;\n    this.url_domain = url_domain;\n    this.mimeType = mimeType;\n  }\n\n  MediaUrl.prototype.truncateMediaFilePath = function (mediaFile) {\n    var startIndex = mediaFile.lastIndexOf('/');\n    var front = mediaFile.substring(0, startIndex);\n    var end = mediaFile.substring(startIndex + 1, mediaFile.length);\n    this.baseURL += front;\n    return end;\n  };\n\n  MediaUrl.prototype.getFileAddress = function () {\n    return this.baseURL + this.mediaFile;\n  };\n\n  return MediaUrl;\n}();\n\nexports.MediaUrl = MediaUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21lZGlhLXVybC5qcz8xMTdjIl0sIm5hbWVzIjpbIk1lZGlhVXJsIiwiYmFzZVVSTCIsIm1lZGlhRmlsZSIsIm1pbWVUeXBlIiwidXJsX2RvbWFpbiIsInN0YXJ0c1dpdGgiLCJpbmRleE9mIiwidHJ1bmNhdGVNZWRpYUZpbGVQYXRoIiwicHJvdG90eXBlIiwic3RhcnRJbmRleCIsImxhc3RJbmRleE9mIiwiZnJvbnQiLCJzdWJzdHJpbmciLCJlbmQiLCJsZW5ndGgiLCJnZXRGaWxlQWRkcmVzcyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLFFBQVEsR0FBSSxZQUFZO0FBQzVCLFdBQVNBLFFBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCQyxTQUE1QixFQUF1Q0MsUUFBdkMsRUFBaURDLFVBQWpELEVBQTZEO0FBQzNELFFBQUlBLFVBQVUsS0FBSyxLQUFLLENBQXhCLEVBQTJCO0FBQ3pCQSxnQkFBVSxHQUFHLEVBQWI7QUFDRDs7QUFDRCxTQUFLSCxPQUFMLEdBQWUsRUFBZjs7QUFDQSxRQUFJQSxPQUFPLENBQUNJLFVBQVIsQ0FBbUIsTUFBbkIsTUFBK0IsS0FBbkMsRUFBMEM7QUFDeEMsV0FBS0osT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7O0FBQ0QsU0FBS0MsU0FBTCxHQUFrQkEsU0FBUyxDQUFDSSxPQUFWLENBQWtCLEdBQWxCLE1BQTJCLENBQUMsQ0FBN0IsR0FBa0MsS0FBS0MscUJBQUwsQ0FBMkJMLFNBQTNCLENBQWxDLEdBQTBFQSxTQUEzRjtBQUNBLFNBQUtFLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0QsUUFBTCxHQUFnQkEsUUFBaEI7QUFDRDs7QUFFREgsVUFBUSxDQUFDUSxTQUFULENBQW1CRCxxQkFBbkIsR0FBMkMsVUFBVUwsU0FBVixFQUFxQjtBQUM5RCxRQUFNTyxVQUFVLEdBQUdQLFNBQVMsQ0FBQ1EsV0FBVixDQUFzQixHQUF0QixDQUFuQjtBQUNBLFFBQU1DLEtBQUssR0FBR1QsU0FBUyxDQUFDVSxTQUFWLENBQW9CLENBQXBCLEVBQXVCSCxVQUF2QixDQUFkO0FBQ0EsUUFBTUksR0FBRyxHQUFHWCxTQUFTLENBQUNVLFNBQVYsQ0FBb0JILFVBQVUsR0FBRyxDQUFqQyxFQUFvQ1AsU0FBUyxDQUFDWSxNQUE5QyxDQUFaO0FBQ0EsU0FBS2IsT0FBTCxJQUFnQlUsS0FBaEI7QUFDQSxXQUFPRSxHQUFQO0FBQ0QsR0FORDs7QUFPQWIsVUFBUSxDQUFDUSxTQUFULENBQW1CTyxjQUFuQixHQUFvQyxZQUFZO0FBQzlDLFdBQU8sS0FBS2QsT0FBTCxHQUFlLEtBQUtDLFNBQTNCO0FBQ0QsR0FGRDs7QUFHQSxTQUFPRixRQUFQO0FBQ0QsQ0F6QmlCLEVBQWxCOztBQTBCQWdCLE9BQU8sQ0FBQ2hCLFFBQVIsR0FBbUJBLFFBQW5CIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBNZWRpYVVybCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1lZGlhVXJsIChiYXNlVVJMLCBtZWRpYUZpbGUsIG1pbWVUeXBlLCB1cmxfZG9tYWluKSB7XG4gICAgaWYgKHVybF9kb21haW4gPT09IHZvaWQgMCkge1xuICAgICAgdXJsX2RvbWFpbiA9ICcnO1xuICAgIH1cbiAgICB0aGlzLmJhc2VVUkwgPSAnJztcbiAgICBpZiAoYmFzZVVSTC5zdGFydHNXaXRoKCdodHRwJykgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMO1xuICAgIH1cbiAgICB0aGlzLm1lZGlhRmlsZSA9IChtZWRpYUZpbGUuaW5kZXhPZignLycpICE9PSAtMSkgPyB0aGlzLnRydW5jYXRlTWVkaWFGaWxlUGF0aChtZWRpYUZpbGUpIDogbWVkaWFGaWxlO1xuICAgIHRoaXMudXJsX2RvbWFpbiA9IHVybF9kb21haW47XG4gICAgdGhpcy5taW1lVHlwZSA9IG1pbWVUeXBlO1xuICB9XG5cbiAgTWVkaWFVcmwucHJvdG90eXBlLnRydW5jYXRlTWVkaWFGaWxlUGF0aCA9IGZ1bmN0aW9uIChtZWRpYUZpbGUpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gbWVkaWFGaWxlLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgY29uc3QgZnJvbnQgPSBtZWRpYUZpbGUuc3Vic3RyaW5nKDAsIHN0YXJ0SW5kZXgpO1xuICAgIGNvbnN0IGVuZCA9IG1lZGlhRmlsZS5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIG1lZGlhRmlsZS5sZW5ndGgpO1xuICAgIHRoaXMuYmFzZVVSTCArPSBmcm9udDtcbiAgICByZXR1cm4gZW5kO1xuICB9O1xuICBNZWRpYVVybC5wcm90b3R5cGUuZ2V0RmlsZUFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmFzZVVSTCArIHRoaXMubWVkaWFGaWxlO1xuICB9O1xuICByZXR1cm4gTWVkaWFVcmw7XG59KCkpO1xuZXhwb3J0cy5NZWRpYVVybCA9IE1lZGlhVXJsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar moment = __webpack_require__(52);\n\nvar IsoDurationParser = function () {\n  function IsoDurationParser() {}\n\n  IsoDurationParser.getDuration = function (val) {\n    var dur = moment.duration(val);\n    return dur.asMilliseconds();\n  };\n\n  IsoDurationParser.getDurationAsS = function (val) {\n    var dur = moment.duration(val);\n    return dur.asSeconds();\n  };\n\n  IsoDurationParser.getMoment = function () {\n    return moment;\n  };\n\n  return IsoDurationParser;\n}();\n\nexports.IsoDurationParser = IsoDurationParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9Jc28tZHVyYXRpb24tcGFyc2VyLmpzP2NjODAiXSwibmFtZXMiOlsibW9tZW50IiwicmVxdWlyZSIsIklzb0R1cmF0aW9uUGFyc2VyIiwiZ2V0RHVyYXRpb24iLCJ2YWwiLCJkdXIiLCJkdXJhdGlvbiIsImFzTWlsbGlzZWNvbmRzIiwiZ2V0RHVyYXRpb25Bc1MiLCJhc1NlY29uZHMiLCJnZXRNb21lbnQiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxpQkFBaUIsR0FBSSxZQUFZO0FBQ3JDLFdBQVNBLGlCQUFULEdBQThCLENBQzdCOztBQUVEQSxtQkFBaUIsQ0FBQ0MsV0FBbEIsR0FBZ0MsVUFBVUMsR0FBVixFQUFlO0FBQzdDLFFBQU1DLEdBQUcsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCRixHQUFoQixDQUFaO0FBQ0EsV0FBT0MsR0FBRyxDQUFDRSxjQUFKLEVBQVA7QUFDRCxHQUhEOztBQUlBTCxtQkFBaUIsQ0FBQ00sY0FBbEIsR0FBbUMsVUFBVUosR0FBVixFQUFlO0FBQ2hELFFBQU1DLEdBQUcsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCRixHQUFoQixDQUFaO0FBQ0EsV0FBT0MsR0FBRyxDQUFDSSxTQUFKLEVBQVA7QUFDRCxHQUhEOztBQUlBUCxtQkFBaUIsQ0FBQ1EsU0FBbEIsR0FBOEIsWUFBWTtBQUN4QyxXQUFPVixNQUFQO0FBQ0QsR0FGRDs7QUFHQSxTQUFPRSxpQkFBUDtBQUNELENBaEIwQixFQUEzQjs7QUFpQkFTLE9BQU8sQ0FBQ1QsaUJBQVIsR0FBNEJBLGlCQUE1QiIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZShcIm1vbWVudC9tb21lbnRcIik7XG5jb25zdCBJc29EdXJhdGlvblBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIElzb0R1cmF0aW9uUGFyc2VyICgpIHtcbiAgfVxuXG4gIElzb0R1cmF0aW9uUGFyc2VyLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGNvbnN0IGR1ciA9IG1vbWVudC5kdXJhdGlvbih2YWwpO1xuICAgIHJldHVybiBkdXIuYXNNaWxsaXNlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0RHVyYXRpb25Bc1MgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgY29uc3QgZHVyID0gbW9tZW50LmR1cmF0aW9uKHZhbCk7XG4gICAgcmV0dXJuIGR1ci5hc1NlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0TW9tZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnQ7XG4gIH07XG4gIHJldHVybiBJc29EdXJhdGlvblBhcnNlcjtcbn0oKSk7XG5leHBvcnRzLklzb0R1cmF0aW9uUGFyc2VyID0gSXNvRHVyYXRpb25QYXJzZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(11);\n\nmodule.exports = function AudioRepresentation(attr) {\n  fieldsPicker(this, ["audioSamplingRate", "bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvanNvbi9hdWRpby1yZXByZXNlbnRhdGlvbi5qcz9lMzM0Il0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQXVkaW9SZXByZXNlbnRhdGlvbiIsImF0dHIiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQTVCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsbUJBQVQsQ0FBOEJDLElBQTlCLEVBQW9DO0FBQ25ETCxjQUFZLENBQUMsSUFBRCxFQUFPLENBQ2pCLG1CQURpQixFQUVqQixXQUZpQixFQUdqQixJQUhpQixFQUlqQixNQUppQixFQUtqQixhQUxpQixDQUFQLEVBTVRLLElBTlMsQ0FBWjtBQU9ELENBUkQiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXVkaW9SZXByZXNlbnRhdGlvbiAoYXR0cikge1xuICBmaWVsZHNQaWNrZXIodGhpcywgW1xuICAgIFwiYXVkaW9TYW1wbGluZ1JhdGVcIixcbiAgICBcImJhbmR3aWR0aFwiLFxuICAgIFwiaWRcIixcbiAgICBcImxhbmdcIixcbiAgICBcImR1cmF0aW9uSW5TXCJcbiAgXSwgYXR0cik7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(11);\n\nmodule.exports = function VideoRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "height", "lang", "width", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvanNvbi92aWRlby1yZXByZXNlbnRhdGlvbi5qcz81MWE4Il0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiVmlkZW9SZXByZXNlbnRhdGlvbiIsImF0dHIiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQTVCOztBQUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsbUJBQVQsQ0FBOEJDLElBQTlCLEVBQW9DO0FBQ25ETCxjQUFZLENBQUMsSUFBRCxFQUFPLENBQ2pCLFdBRGlCLEVBRWpCLElBRmlCLEVBR2pCLFFBSGlCLEVBSWpCLE1BSmlCLEVBS2pCLE9BTGlCLEVBTWpCLGFBTmlCLENBQVAsRUFPVEssSUFQUyxDQUFaO0FBUUQsQ0FURCIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZmllbGRzUGlja2VyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZmllbGRzLXBpY2tlclwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVmlkZW9SZXByZXNlbnRhdGlvbiAoYXR0cikge1xuICBmaWVsZHNQaWNrZXIodGhpcywgW1xuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJpZFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiZHVyYXRpb25JblNcIlxuICBdLCBhdHRyKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(11);\n\nmodule.exports = function TextRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvanNvbi90ZXh0LXJlcHJlc2VudGF0aW9uLmpzP2UwMGIiXSwibmFtZXMiOlsiZmllbGRzUGlja2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJUZXh0UmVwcmVzZW50YXRpb24iLCJhdHRyIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUE1Qjs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTZCQyxJQUE3QixFQUFtQztBQUNsREwsY0FBWSxDQUFDLElBQUQsRUFBTyxDQUNqQixXQURpQixFQUVqQixJQUZpQixFQUdqQixNQUhpQixFQUlqQixhQUppQixDQUFQLEVBS1RLLElBTFMsQ0FBWjtBQU1ELENBUEQiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRleHRSZXByZXNlbnRhdGlvbiAoYXR0cikge1xuICBmaWVsZHNQaWNrZXIodGhpcywgW1xuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJpZFwiLFxuICAgIFwibGFuZ1wiLFxuICAgIFwiZHVyYXRpb25JblNcIlxuICBdLCBhdHRyKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fs = __webpack_require__(2);\n\nvar path = __webpack_require__(4);\n\nvar appSettings = __webpack_require__(1);\n/**\n *\n * @param {string} manifestId - manifest Id\n * @param {string} downloadFolder - donwload folder\n * @returns {Promise} promise\n */\n\n\nmodule.exports = function (manifestId, downloadFolder) {\n  var settingsPath = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/");\n  var moviePath = path.resolve(appSettings.getSettings().downloadsFolderPath + "/" + manifestId + "/");\n\n  if (downloadFolder) {\n    moviePath = path.resolve(downloadFolder + "/" + manifestId + "/");\n  }\n\n  function dirNotExists(dirToCheck) {\n    return new Promise(function (resolve\n    /* , reject */\n    ) {\n      fs.stat(dirToCheck, function (er, stat) {\n        if (er) {\n          resolve();\n        } else {\n          if (stat.isDirectory()) {\n            resolve(\'Folder already exists\');\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    Promise.all([dirNotExists(settingsPath), dirNotExists(moviePath)]).then(function (results) {\n      results = results || [];\n      var errors = results.filter(function (result) {\n        return typeof result !== \'undefined\';\n      });\n\n      if (errors.length) {\n        reject(results);\n      } else {\n        resolve();\n      }\n    }, reject);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9jYW4tY3JlYXRlLW1hbmlmZXN0LmpzP2I3NmUiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImFwcFNldHRpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZEZvbGRlciIsInNldHRpbmdzUGF0aCIsInJlc29sdmUiLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzRm9sZGVyIiwibW92aWVQYXRoIiwiZG93bmxvYWRzRm9sZGVyUGF0aCIsImRpck5vdEV4aXN0cyIsImRpclRvQ2hlY2siLCJQcm9taXNlIiwic3RhdCIsImVyIiwiaXNEaXJlY3RvcnkiLCJyZWplY3QiLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImVycm9ycyIsImZpbHRlciIsInJlc3VsdCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsRUFBRSxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBbEI7O0FBQ0EsSUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLENBQUQsQ0FBcEI7O0FBQ0EsSUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLENBQUQsQ0FBM0I7QUFFQTs7Ozs7Ozs7QUFNQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLFVBQVYsRUFBc0JDLGNBQXRCLEVBQXNDO0FBQ3JELE1BQU1DLFlBQVksR0FBR04sSUFBSSxDQUFDTyxPQUFMLENBQWFOLFdBQVcsQ0FBQ08sV0FBWixHQUEwQkMsY0FBMUIsR0FBMkMsR0FBM0MsR0FBaURMLFVBQWpELEdBQThELEdBQTNFLENBQXJCO0FBRUEsTUFBSU0sU0FBUyxHQUFHVixJQUFJLENBQUNPLE9BQUwsQ0FBYU4sV0FBVyxDQUFDTyxXQUFaLEdBQTBCRyxtQkFBMUIsR0FBZ0QsR0FBaEQsR0FBc0RQLFVBQXRELEdBQW1FLEdBQWhGLENBQWhCOztBQUNBLE1BQUlDLGNBQUosRUFBb0I7QUFDbEJLLGFBQVMsR0FBR1YsSUFBSSxDQUFDTyxPQUFMLENBQWFGLGNBQWMsR0FBRyxHQUFqQixHQUF1QkQsVUFBdkIsR0FBb0MsR0FBakQsQ0FBWjtBQUNEOztBQUVELFdBQVNRLFlBQVQsQ0FBdUJDLFVBQXZCLEVBQW1DO0FBQ2pDLFdBQU8sSUFBSUMsT0FBSixDQUFZLFVBQVVQO0FBQVE7QUFBbEIsTUFBa0M7QUFDbkRULFFBQUUsQ0FBQ2lCLElBQUgsQ0FBUUYsVUFBUixFQUFvQixVQUFVRyxFQUFWLEVBQWNELElBQWQsRUFBb0I7QUFDdEMsWUFBSUMsRUFBSixFQUFRO0FBQ05ULGlCQUFPO0FBQ1IsU0FGRCxNQUVPO0FBQ0wsY0FBSVEsSUFBSSxDQUFDRSxXQUFMLEVBQUosRUFBd0I7QUFDdEJWLG1CQUFPLENBQUMsdUJBQUQsQ0FBUDtBQUNELFdBRkQsTUFFTztBQUNMQSxtQkFBTztBQUNSO0FBQ0Y7QUFDRixPQVZEO0FBV0QsS0FaTSxDQUFQO0FBYUQ7O0FBRUQsU0FBTyxJQUFJTyxPQUFKLENBQVksVUFBVVAsT0FBVixFQUFtQlcsTUFBbkIsRUFBMkI7QUFDNUNKLFdBQU8sQ0FBQ0ssR0FBUixDQUFZLENBQ1ZQLFlBQVksQ0FBQ04sWUFBRCxDQURGLEVBRVZNLFlBQVksQ0FBQ0YsU0FBRCxDQUZGLENBQVosRUFHR1UsSUFISCxDQUdRLFVBQVVDLE9BQVYsRUFBbUI7QUFDekJBLGFBQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCO0FBQ0EsVUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUNFLE1BQVIsQ0FBZSxVQUFVQyxNQUFWLEVBQWtCO0FBQzlDLGVBQU8sT0FBT0EsTUFBUCxLQUFrQixXQUF6QjtBQUNELE9BRmMsQ0FBZjs7QUFHQSxVQUFJRixNQUFNLENBQUNHLE1BQVgsRUFBbUI7QUFDakJQLGNBQU0sQ0FBQ0csT0FBRCxDQUFOO0FBQ0QsT0FGRCxNQUVPO0FBQ0xkLGVBQU87QUFDUjtBQUNGLEtBYkQsRUFhR1csTUFiSDtBQWNELEdBZk0sQ0FBUDtBQWdCRCxDQXhDRCIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi9hcHAtc2V0dGluZ3NcIik7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgSWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3dubG9hZEZvbGRlciAtIGRvbndsb2FkIGZvbGRlclxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpIHtcbiAgY29uc3Qgc2V0dGluZ3NQYXRoID0gcGF0aC5yZXNvbHZlKGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc2V0dGluZ3NGb2xkZXIgKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG5cbiAgbGV0IG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRvd25sb2Fkc0ZvbGRlclBhdGggKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG4gIGlmIChkb3dubG9hZEZvbGRlcikge1xuICAgIG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShkb3dubG9hZEZvbGRlciArIFwiL1wiICsgbWFuaWZlc3RJZCArIFwiL1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpck5vdEV4aXN0cyAoZGlyVG9DaGVjaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSAvKiAsIHJlamVjdCAqLykge1xuICAgICAgZnMuc3RhdChkaXJUb0NoZWNrLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIHJlc29sdmUoJ0ZvbGRlciBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgZGlyTm90RXhpc3RzKHNldHRpbmdzUGF0aCksXG4gICAgICBkaXJOb3RFeGlzdHMobW92aWVQYXRoKVxuICAgIF0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuICAgICAgY29uc3QgZXJyb3JzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICB9KTtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlamVjdChyZXN1bHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9LCByZWplY3QpO1xuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n')},function(module,exports,__webpack_require__){"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar fs = __webpack_require__(2);\n\nvar path = __webpack_require__(4);\n\nvar downloadFileUtil = __webpack_require__(7);\n\nfunction removeDir(dir, cb, ENOTEMPTY_attempts) {\n  ENOTEMPTY_attempts = ENOTEMPTY_attempts || 0;\n  var ENOTEMPTY_maxAttempts = 10;\n  var ENOTEMPTY_TIMEOUT = 500;\n\n  if (typeof dir !== \'string\') {\n    throw new Error(\'directory path required\');\n  }\n\n  if (cb !== undefined && typeof cb !== \'function\') {\n    throw new Error(\'callback must be function\');\n  }\n\n  var self = this;\n  var called, results;\n  downloadFileUtil.checkForLocalFile(dir, function existsCallback(exists) {\n    if (!exists) {\n      return removeDirCallback(null);\n    }\n\n    fs.stat(dir, function statCallback(err, stat) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n\n      if (!stat.isDirectory()) {\n        return fs.unlink(dir, removeDirCallback);\n      }\n\n      fs.readdir(dir, readdirCallback);\n    });\n\n    function readdirCallback(err, files) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n\n      var n = files.length;\n\n      if (n === 0) {\n        return fs.rmdir(dir, removeDirCallback);\n      }\n\n      files.forEach(function (name) {\n        removeDir(path.resolve(dir, name), function (err) {\n          if (err) {\n            return removeDirCallback(err);\n          }\n\n          if (--n === 0) {\n            return fs.rmdir(dir, removeDirCallback);\n          }\n        });\n      });\n    }\n  });\n\n  function removeDirCallback(err) {\n    if (err && err.code === "ENOTEMPTY") {\n      if (ENOTEMPTY_attempts < ENOTEMPTY_maxAttempts) {\n        ENOTEMPTY_attempts++;\n        console.error("ERROR ENOTEMPTY", dir, ENOTEMPTY_attempts);\n        setTimeout(function () {\n          removeDir(dir, cb, ENOTEMPTY_attempts);\n        }, ENOTEMPTY_TIMEOUT);\n        return;\n      }\n    }\n\n    if (err && err.code === \'ENOENT\') {\n      arguments[0] = null;\n    }\n\n    if (!results) {\n      results = arguments;\n    }\n\n    if (!cb || called) {\n      return;\n    }\n\n    called = true;\n    cb.apply(self, results);\n  }\n}\n\nmodule.exports = removeDir;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9yZW1vdmUtZGlyLmpzP2YyOTQiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImRvd25sb2FkRmlsZVV0aWwiLCJyZW1vdmVEaXIiLCJkaXIiLCJjYiIsIkVOT1RFTVBUWV9hdHRlbXB0cyIsIkVOT1RFTVBUWV9tYXhBdHRlbXB0cyIsIkVOT1RFTVBUWV9USU1FT1VUIiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJzZWxmIiwiY2FsbGVkIiwicmVzdWx0cyIsImNoZWNrRm9yTG9jYWxGaWxlIiwiZXhpc3RzQ2FsbGJhY2siLCJleGlzdHMiLCJyZW1vdmVEaXJDYWxsYmFjayIsInN0YXQiLCJzdGF0Q2FsbGJhY2siLCJlcnIiLCJpc0RpcmVjdG9yeSIsInVubGluayIsInJlYWRkaXIiLCJyZWFkZGlyQ2FsbGJhY2siLCJmaWxlcyIsIm4iLCJsZW5ndGgiLCJybWRpciIsImZvckVhY2giLCJuYW1lIiwicmVzb2x2ZSIsImNvZGUiLCJjb25zb2xlIiwiZXJyb3IiLCJzZXRUaW1lb3V0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLElBQU1BLEVBQUUsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQWxCOztBQUNBLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxDQUFELENBQXBCOztBQUNBLElBQU1FLGdCQUFnQixHQUFHRixtQkFBTyxDQUFDLENBQUQsQ0FBaEM7O0FBRUEsU0FBU0csU0FBVCxDQUFvQkMsR0FBcEIsRUFBeUJDLEVBQXpCLEVBQTZCQyxrQkFBN0IsRUFBaUQ7QUFDL0NBLG9CQUFrQixHQUFHQSxrQkFBa0IsSUFBSSxDQUEzQztBQUNBLE1BQU1DLHFCQUFxQixHQUFHLEVBQTlCO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsR0FBMUI7O0FBRUEsTUFBSSxPQUFPSixHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDM0IsVUFBTSxJQUFJSyxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUlKLEVBQUUsS0FBS0ssU0FBUCxJQUFvQixPQUFPTCxFQUFQLEtBQWMsVUFBdEMsRUFBa0Q7QUFDaEQsVUFBTSxJQUFJSSxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNEOztBQUVELE1BQU1FLElBQUksR0FBRyxJQUFiO0FBRUEsTUFBSUMsTUFBSixFQUFZQyxPQUFaO0FBRUFYLGtCQUFnQixDQUFDWSxpQkFBakIsQ0FBbUNWLEdBQW5DLEVBQXdDLFNBQVNXLGNBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDO0FBQ3ZFLFFBQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1gsYUFBT0MsaUJBQWlCLENBQUMsSUFBRCxDQUF4QjtBQUNEOztBQUNEbEIsTUFBRSxDQUFDbUIsSUFBSCxDQUFRZCxHQUFSLEVBQWEsU0FBU2UsWUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJGLElBQTVCLEVBQWtDO0FBQzdDLFVBQUlFLEdBQUosRUFBUztBQUNQLGVBQU9ILGlCQUFpQixDQUFDRyxHQUFELENBQXhCO0FBQ0Q7O0FBQ0QsVUFBSSxDQUFDRixJQUFJLENBQUNHLFdBQUwsRUFBTCxFQUF5QjtBQUN2QixlQUFPdEIsRUFBRSxDQUFDdUIsTUFBSCxDQUFVbEIsR0FBVixFQUFlYSxpQkFBZixDQUFQO0FBQ0Q7O0FBQ0RsQixRQUFFLENBQUN3QixPQUFILENBQVduQixHQUFYLEVBQWdCb0IsZUFBaEI7QUFDRCxLQVJEOztBQVVBLGFBQVNBLGVBQVQsQ0FBMEJKLEdBQTFCLEVBQStCSyxLQUEvQixFQUFzQztBQUNwQyxVQUFJTCxHQUFKLEVBQVM7QUFDUCxlQUFPSCxpQkFBaUIsQ0FBQ0csR0FBRCxDQUF4QjtBQUNEOztBQUVELFVBQUlNLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUFkOztBQUNBLFVBQUlELENBQUMsS0FBSyxDQUFWLEVBQWE7QUFDWCxlQUFPM0IsRUFBRSxDQUFDNkIsS0FBSCxDQUFTeEIsR0FBVCxFQUFjYSxpQkFBZCxDQUFQO0FBQ0Q7O0FBRURRLFdBQUssQ0FBQ0ksT0FBTixDQUFjLFVBQVVDLElBQVYsRUFBZ0I7QUFDNUIzQixpQkFBUyxDQUFDRixJQUFJLENBQUM4QixPQUFMLENBQWEzQixHQUFiLEVBQWtCMEIsSUFBbEIsQ0FBRCxFQUEwQixVQUFVVixHQUFWLEVBQWU7QUFDaEQsY0FBSUEsR0FBSixFQUFTO0FBQ1AsbUJBQU9ILGlCQUFpQixDQUFDRyxHQUFELENBQXhCO0FBQ0Q7O0FBQ0QsY0FBSSxFQUFFTSxDQUFGLEtBQVEsQ0FBWixFQUFlO0FBQ2IsbUJBQU8zQixFQUFFLENBQUM2QixLQUFILENBQVN4QixHQUFULEVBQWNhLGlCQUFkLENBQVA7QUFDRDtBQUNGLFNBUFEsQ0FBVDtBQVFELE9BVEQ7QUFVRDtBQUNGLEdBbkNEOztBQXFDQSxXQUFTQSxpQkFBVCxDQUE0QkcsR0FBNUIsRUFBaUM7QUFDL0IsUUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNZLElBQUosS0FBYSxXQUF4QixFQUFxQztBQUNuQyxVQUFJMUIsa0JBQWtCLEdBQUdDLHFCQUF6QixFQUFnRDtBQUM5Q0QsMEJBQWtCO0FBQ2xCMkIsZUFBTyxDQUFDQyxLQUFSLENBQWMsaUJBQWQsRUFBaUM5QixHQUFqQyxFQUFzQ0Usa0JBQXRDO0FBQ0E2QixrQkFBVSxDQUFDLFlBQVk7QUFDckJoQyxtQkFBUyxDQUFDQyxHQUFELEVBQU1DLEVBQU4sRUFBVUMsa0JBQVYsQ0FBVDtBQUNELFNBRlMsRUFFUEUsaUJBRk8sQ0FBVjtBQUdBO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJWSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1ksSUFBSixLQUFhLFFBQXhCLEVBQWtDO0FBQ2hDSSxlQUFTLENBQUMsQ0FBRCxDQUFULEdBQWUsSUFBZjtBQUNEOztBQUVELFFBQUksQ0FBQ3ZCLE9BQUwsRUFBYztBQUNaQSxhQUFPLEdBQUd1QixTQUFWO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDL0IsRUFBRCxJQUFPTyxNQUFYLEVBQW1CO0FBQ2pCO0FBQ0Q7O0FBQ0RBLFVBQU0sR0FBRyxJQUFUO0FBQ0FQLE1BQUUsQ0FBQ2dDLEtBQUgsQ0FBUzFCLElBQVQsRUFBZUUsT0FBZjtBQUNEO0FBQ0Y7O0FBRUR5QixNQUFNLENBQUNDLE9BQVAsR0FBaUJwQyxTQUFqQiIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50IG5vLWNvbnNvbGU6IFtcImVycm9yXCIsIHsgYWxsb3c6IFtcIndhcm5cIiwgXCJlcnJvclwiLCBcImluZm9cIl0gfV0gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRvd25sb2FkRmlsZVV0aWwgPSByZXF1aXJlKFwiLi4vZG93bmxvYWRzL2Rvd25sb2FkLWZpbGUtdXRpbFwiKTtcblxuZnVuY3Rpb24gcmVtb3ZlRGlyIChkaXIsIGNiLCBFTk9URU1QVFlfYXR0ZW1wdHMpIHtcbiAgRU5PVEVNUFRZX2F0dGVtcHRzID0gRU5PVEVNUFRZX2F0dGVtcHRzIHx8IDA7XG4gIGNvbnN0IEVOT1RFTVBUWV9tYXhBdHRlbXB0cyA9IDEwO1xuICBjb25zdCBFTk9URU1QVFlfVElNRU9VVCA9IDUwMDtcblxuICBpZiAodHlwZW9mIGRpciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpcmVjdG9yeSBwYXRoIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAoY2IgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIG11c3QgYmUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gIGxldCBjYWxsZWQsIHJlc3VsdHM7XG5cbiAgZG93bmxvYWRGaWxlVXRpbC5jaGVja0ZvckxvY2FsRmlsZShkaXIsIGZ1bmN0aW9uIGV4aXN0c0NhbGxiYWNrIChleGlzdHMpIHtcbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKG51bGwpO1xuICAgIH1cbiAgICBmcy5zdGF0KGRpciwgZnVuY3Rpb24gc3RhdENhbGxiYWNrIChlcnIsIHN0YXQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZiAoIXN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICByZXR1cm4gZnMudW5saW5rKGRpciwgcmVtb3ZlRGlyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgZnMucmVhZGRpcihkaXIsIHJlYWRkaXJDYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZWFkZGlyQ2FsbGJhY2sgKGVyciwgZmlsZXMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIGxldCBuID0gZmlsZXMubGVuZ3RoO1xuICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZzLnJtZGlyKGRpciwgcmVtb3ZlRGlyQ2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJlbW92ZURpcihwYXRoLnJlc29sdmUoZGlyLCBuYW1lKSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVEaXJDYWxsYmFjayhlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoLS1uID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnMucm1kaXIoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRGlyQ2FsbGJhY2sgKGVycikge1xuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09IFwiRU5PVEVNUFRZXCIpIHtcbiAgICAgIGlmIChFTk9URU1QVFlfYXR0ZW1wdHMgPCBFTk9URU1QVFlfbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgRU5PVEVNUFRZX2F0dGVtcHRzKys7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFUlJPUiBFTk9URU1QVFlcIiwgZGlyLCBFTk9URU1QVFlfYXR0ZW1wdHMpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmVEaXIoZGlyLCBjYiwgRU5PVEVNUFRZX2F0dGVtcHRzKTtcbiAgICAgICAgfSwgRU5PVEVNUFRZX1RJTUVPVVQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICBhcmd1bWVudHNbMF0gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghcmVzdWx0cykge1xuICAgICAgcmVzdWx0cyA9IGFyZ3VtZW50cztcbiAgICB9XG4gICAgaWYgKCFjYiB8fCBjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBjYi5hcHBseShzZWxmLCByZXN1bHRzKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZURpcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__31__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqc29uZmlsZVwiPzczNDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzMxX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n")},function(module,exports){eval('module.exports = require("util");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1dGlsXCI/YmUwYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){"use strict";eval("\n/**\n * @constructor\n */\n\nfunction ArrayStorage() {\n  this._items = [];\n}\n/**\n * @returns {void}\n */\n\n\nArrayStorage.prototype.clear = function () {\n  this._items = [];\n};\n/**\n *\n * @param {array} items - array items\n * @returns {void}\n */\n\n\nArrayStorage.prototype.concat = function (items) {\n  this._items = this._items.concat(items);\n};\n/**\n *\n * @returns {number} - number of items\n */\n\n\nArrayStorage.prototype.count = function () {\n  return this._items.length;\n};\n/**\n *\n * @returns {array} - items\n */\n\n\nArrayStorage.prototype.getItems = function () {\n  return this._items;\n};\n/**\n *\n * @param {object} item - new item\n * @returns {void}\n */\n\n\nArrayStorage.prototype.push = function (item) {\n  this._items.push(item);\n};\n/**\n * removes first element and returns it\n * @returns {*} - item\n */\n\n\nArrayStorage.prototype.shift = function () {\n  return this._items.shift();\n};\n/**\n * add elements to the beginning of array\n * @returns {*} - new length of an array\n */\n\n\nArrayStorage.prototype.unshift = function () {\n  return this._items.unshift.apply(this, arguments);\n};\n\nmodule.exports = ArrayStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9hcnJheS1zdG9yYWdlLmpzPzc1OGIiXSwibmFtZXMiOlsiQXJyYXlTdG9yYWdlIiwiX2l0ZW1zIiwicHJvdG90eXBlIiwiY2xlYXIiLCJjb25jYXQiLCJpdGVtcyIsImNvdW50IiwibGVuZ3RoIiwiZ2V0SXRlbXMiLCJwdXNoIiwiaXRlbSIsInNoaWZ0IiwidW5zaGlmdCIsImFwcGx5IiwiYXJndW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7OztBQUdBLFNBQVNBLFlBQVQsR0FBeUI7QUFDdkIsT0FBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDRDtBQUVEOzs7OztBQUdBRCxZQUFZLENBQUNFLFNBQWIsQ0FBdUJDLEtBQXZCLEdBQStCLFlBQVk7QUFDekMsT0FBS0YsTUFBTCxHQUFjLEVBQWQ7QUFDRCxDQUZEO0FBSUE7Ozs7Ozs7QUFLQUQsWUFBWSxDQUFDRSxTQUFiLENBQXVCRSxNQUF2QixHQUFnQyxVQUFVQyxLQUFWLEVBQWlCO0FBQy9DLE9BQUtKLE1BQUwsR0FBYyxLQUFLQSxNQUFMLENBQVlHLE1BQVosQ0FBbUJDLEtBQW5CLENBQWQ7QUFDRCxDQUZEO0FBSUE7Ozs7OztBQUlBTCxZQUFZLENBQUNFLFNBQWIsQ0FBdUJJLEtBQXZCLEdBQStCLFlBQVk7QUFDekMsU0FBTyxLQUFLTCxNQUFMLENBQVlNLE1BQW5CO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7QUFJQVAsWUFBWSxDQUFDRSxTQUFiLENBQXVCTSxRQUF2QixHQUFrQyxZQUFZO0FBQzVDLFNBQU8sS0FBS1AsTUFBWjtBQUNELENBRkQ7QUFJQTs7Ozs7OztBQUtBRCxZQUFZLENBQUNFLFNBQWIsQ0FBdUJPLElBQXZCLEdBQThCLFVBQVVDLElBQVYsRUFBZ0I7QUFDNUMsT0FBS1QsTUFBTCxDQUFZUSxJQUFaLENBQWlCQyxJQUFqQjtBQUNELENBRkQ7QUFJQTs7Ozs7O0FBSUFWLFlBQVksQ0FBQ0UsU0FBYixDQUF1QlMsS0FBdkIsR0FBK0IsWUFBWTtBQUN6QyxTQUFPLEtBQUtWLE1BQUwsQ0FBWVUsS0FBWixFQUFQO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7QUFJQVgsWUFBWSxDQUFDRSxTQUFiLENBQXVCVSxPQUF2QixHQUFpQyxZQUFZO0FBQzNDLFNBQU8sS0FBS1gsTUFBTCxDQUFZVyxPQUFaLENBQW9CQyxLQUFwQixDQUEwQixJQUExQixFQUFnQ0MsU0FBaEMsQ0FBUDtBQUNELENBRkQ7O0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhCLFlBQWpCIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFycmF5U3RvcmFnZSAoKSB7XG4gIHRoaXMuX2l0ZW1zID0gW107XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2l0ZW1zID0gW107XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBpdGVtcyAtIGFycmF5IGl0ZW1zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgdGhpcy5faXRlbXMgPSB0aGlzLl9pdGVtcy5jb25jYXQoaXRlbXMpO1xufTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge251bWJlcn0gLSBudW1iZXIgb2YgaXRlbXNcbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zLmxlbmd0aDtcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHthcnJheX0gLSBpdGVtc1xuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXM7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbSAtIG5ldyBpdGVtXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbn07XG5cbi8qKlxuICogcmVtb3ZlcyBmaXJzdCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcmV0dXJucyB7Kn0gLSBpdGVtXG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcy5zaGlmdCgpO1xufTtcblxuLyoqXG4gKiBhZGQgZWxlbWVudHMgdG8gdGhlIGJlZ2lubmluZyBvZiBhcnJheVxuICogQHJldHVybnMgeyp9IC0gbmV3IGxlbmd0aCBvZiBhbiBhcnJheVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcy51bnNoaWZ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5U3RvcmFnZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * the idea is to copy the methods from storage so that they can be triggered from parent object and then propagated back\n * to the storage object.\n * for example:\n *    someController.storage.status.setItem(manifestId, someKey, someValue);\n *    someController.storage.downloads.setItem(manifestId, someKey, someValue);\n * @param {object} scope - parent object where the method "From" object will be bridged to\n * @param {object} From - object where the original method was declared\n * @returns {void}\n */\n\nfunction createBridgeMethods(scope, From) {\n  function action() {\n    var args = [],\n        i,\n        j;\n\n    for (i = 0, j = arguments.length; i < j; i++) {\n      args.push(arguments[i]);\n    }\n\n    args.unshift(this._storageKey);\n    return this._parent._itemAction.apply(this._parent, args);\n  }\n\n  for (var methodName in From.prototype) {\n    if (From.prototype.hasOwnProperty(methodName)) {\n      scope[methodName] = action.bind(scope, methodName);\n    }\n  }\n}\n\nmodule.exports = createBridgeMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9jcmVhdGUtYnJpZGdlLW1ldGhvZHMuanM/OTcwOSJdLCJuYW1lcyI6WyJjcmVhdGVCcmlkZ2VNZXRob2RzIiwic2NvcGUiLCJGcm9tIiwiYWN0aW9uIiwiYXJncyIsImkiLCJqIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHVzaCIsInVuc2hpZnQiLCJfc3RvcmFnZUtleSIsIl9wYXJlbnQiLCJfaXRlbUFjdGlvbiIsImFwcGx5IiwibWV0aG9kTmFtZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7Ozs7Ozs7O0FBVUEsU0FBU0EsbUJBQVQsQ0FBOEJDLEtBQTlCLEVBQXFDQyxJQUFyQyxFQUEyQztBQUN6QyxXQUFTQyxNQUFULEdBQW1CO0FBQ2pCLFFBQUlDLElBQUksR0FBRyxFQUFYO0FBQUEsUUFBZUMsQ0FBZjtBQUFBLFFBQWtCQyxDQUFsQjs7QUFDQSxTQUFLRCxDQUFDLEdBQUcsQ0FBSixFQUFPQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBMUIsRUFBa0NILENBQUMsR0FBR0MsQ0FBdEMsRUFBeUNELENBQUMsRUFBMUMsRUFBOEM7QUFDNUNELFVBQUksQ0FBQ0ssSUFBTCxDQUFVRixTQUFTLENBQUNGLENBQUQsQ0FBbkI7QUFDRDs7QUFDREQsUUFBSSxDQUFDTSxPQUFMLENBQWEsS0FBS0MsV0FBbEI7QUFDQSxXQUFPLEtBQUtDLE9BQUwsQ0FBYUMsV0FBYixDQUF5QkMsS0FBekIsQ0FBK0IsS0FBS0YsT0FBcEMsRUFBNkNSLElBQTdDLENBQVA7QUFDRDs7QUFFRCxPQUFLLElBQUlXLFVBQVQsSUFBdUJiLElBQUksQ0FBQ2MsU0FBNUIsRUFBdUM7QUFDckMsUUFBSWQsSUFBSSxDQUFDYyxTQUFMLENBQWVDLGNBQWYsQ0FBOEJGLFVBQTlCLENBQUosRUFBK0M7QUFDN0NkLFdBQUssQ0FBQ2MsVUFBRCxDQUFMLEdBQW9CWixNQUFNLENBQUNlLElBQVAsQ0FBWWpCLEtBQVosRUFBbUJjLFVBQW5CLENBQXBCO0FBQ0Q7QUFDRjtBQUNGOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixtQkFBakIiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiB0aGUgaWRlYSBpcyB0byBjb3B5IHRoZSBtZXRob2RzIGZyb20gc3RvcmFnZSBzbyB0aGF0IHRoZXkgY2FuIGJlIHRyaWdnZXJlZCBmcm9tIHBhcmVudCBvYmplY3QgYW5kIHRoZW4gcHJvcGFnYXRlZCBiYWNrXG4gKiB0byB0aGUgc3RvcmFnZSBvYmplY3QuXG4gKiBmb3IgZXhhbXBsZTpcbiAqICAgIHNvbWVDb250cm9sbGVyLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgc29tZUtleSwgc29tZVZhbHVlKTtcbiAqICAgIHNvbWVDb250cm9sbGVyLnN0b3JhZ2UuZG93bmxvYWRzLnNldEl0ZW0obWFuaWZlc3RJZCwgc29tZUtleSwgc29tZVZhbHVlKTtcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY29wZSAtIHBhcmVudCBvYmplY3Qgd2hlcmUgdGhlIG1ldGhvZCBcIkZyb21cIiBvYmplY3Qgd2lsbCBiZSBicmlkZ2VkIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gRnJvbSAtIG9iamVjdCB3aGVyZSB0aGUgb3JpZ2luYWwgbWV0aG9kIHdhcyBkZWNsYXJlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyaWRnZU1ldGhvZHMgKHNjb3BlLCBGcm9tKSB7XG4gIGZ1bmN0aW9uIGFjdGlvbiAoKSB7XG4gICAgbGV0IGFyZ3MgPSBbXSwgaSwgajtcbiAgICBmb3IgKGkgPSAwLCBqID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIGFyZ3MudW5zaGlmdCh0aGlzLl9zdG9yYWdlS2V5KTtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50Ll9pdGVtQWN0aW9uLmFwcGx5KHRoaXMuX3BhcmVudCwgYXJncyk7XG4gIH1cblxuICBmb3IgKGxldCBtZXRob2ROYW1lIGluIEZyb20ucHJvdG90eXBlKSB7XG4gICAgaWYgKEZyb20ucHJvdG90eXBlLmhhc093blByb3BlcnR5KG1ldGhvZE5hbWUpKSB7XG4gICAgICBzY29wZVttZXRob2ROYW1lXSA9IGFjdGlvbi5iaW5kKHNjb3BlLCBtZXRob2ROYW1lKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCcmlkZ2VNZXRob2RzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n *\n * @constructor\n */\n\nfunction Storage() {\n  this._items = {};\n}\n/**\n * @returns {void}\n */\n\n\nStorage.prototype.clear = function () {\n  this._items = {};\n};\n/**\n * @returns {number} number of items\n */\n\n\nStorage.prototype.count = function () {\n  return this.getKeys().length;\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.decrease = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n\n  this._items[id]--;\n};\n/**\n * @param {string} id - item identifier\n * @returns {object} item\n */\n\n\nStorage.prototype.getItem = function (id) {\n  return this._items[id];\n};\n/**\n * @returns {object} items\n */\n\n\nStorage.prototype.getItems = function () {\n  return this._items;\n};\n/**\n * @returns {string[]} keys of all items\n */\n\n\nStorage.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.increase = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n\n  this._items[id]++;\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.removeItem = function (id) {\n  delete this._items[id];\n};\n/**\n *\n * @param {string} id - item identifier\n * @param {object} item - item to be saved\n * @returns {void}\n */\n\n\nStorage.prototype.setItem = function (id, item) {\n  this._items[id] = item;\n};\n/**\n *\n * @param {object} items - items to be saved\n * @returns {void}\n */\n\n\nStorage.prototype.setItems = function (items) {\n  for (var key in items) {\n    if (items.hasOwnProperty(key)) {\n      this.setItem(key, items[key]);\n    }\n  }\n};\n\nmodule.exports = Storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9zdG9yYWdlLmpzPzRiYWIiXSwibmFtZXMiOlsiU3RvcmFnZSIsIl9pdGVtcyIsInByb3RvdHlwZSIsImNsZWFyIiwiY291bnQiLCJnZXRLZXlzIiwibGVuZ3RoIiwiZGVjcmVhc2UiLCJpZCIsImdldEl0ZW0iLCJnZXRJdGVtcyIsIk9iamVjdCIsImtleXMiLCJpbmNyZWFzZSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiaXRlbSIsInNldEl0ZW1zIiwiaXRlbXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7O0FBSUEsU0FBU0EsT0FBVCxHQUFvQjtBQUNsQixPQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNEO0FBRUQ7Ozs7O0FBR0FELE9BQU8sQ0FBQ0UsU0FBUixDQUFrQkMsS0FBbEIsR0FBMEIsWUFBWTtBQUNwQyxPQUFLRixNQUFMLEdBQWMsRUFBZDtBQUNELENBRkQ7QUFJQTs7Ozs7QUFHQUQsT0FBTyxDQUFDRSxTQUFSLENBQWtCRSxLQUFsQixHQUEwQixZQUFZO0FBQ3BDLFNBQU8sS0FBS0MsT0FBTCxHQUFlQyxNQUF0QjtBQUNELENBRkQ7QUFJQTs7Ozs7O0FBSUFOLE9BQU8sQ0FBQ0UsU0FBUixDQUFrQkssUUFBbEIsR0FBNkIsVUFBVUMsRUFBVixFQUFjO0FBQ3pDLE1BQUksT0FBTyxLQUFLUCxNQUFMLENBQVlPLEVBQVosQ0FBUCxLQUEyQixRQUEvQixFQUF5QztBQUN2QyxTQUFLUCxNQUFMLENBQVlPLEVBQVosSUFBa0IsQ0FBbEI7QUFDRDs7QUFDRCxPQUFLUCxNQUFMLENBQVlPLEVBQVo7QUFDRCxDQUxEO0FBT0E7Ozs7OztBQUlBUixPQUFPLENBQUNFLFNBQVIsQ0FBa0JPLE9BQWxCLEdBQTRCLFVBQVVELEVBQVYsRUFBYztBQUN4QyxTQUFPLEtBQUtQLE1BQUwsQ0FBWU8sRUFBWixDQUFQO0FBQ0QsQ0FGRDtBQUlBOzs7OztBQUdBUixPQUFPLENBQUNFLFNBQVIsQ0FBa0JRLFFBQWxCLEdBQTZCLFlBQVk7QUFDdkMsU0FBTyxLQUFLVCxNQUFaO0FBQ0QsQ0FGRDtBQUlBOzs7OztBQUdBRCxPQUFPLENBQUNFLFNBQVIsQ0FBa0JHLE9BQWxCLEdBQTRCLFlBQVk7QUFDdEMsU0FBT00sTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS1gsTUFBakIsQ0FBUDtBQUNELENBRkQ7QUFJQTs7Ozs7O0FBSUFELE9BQU8sQ0FBQ0UsU0FBUixDQUFrQlcsUUFBbEIsR0FBNkIsVUFBVUwsRUFBVixFQUFjO0FBQ3pDLE1BQUksT0FBTyxLQUFLUCxNQUFMLENBQVlPLEVBQVosQ0FBUCxLQUEyQixRQUEvQixFQUF5QztBQUN2QyxTQUFLUCxNQUFMLENBQVlPLEVBQVosSUFBa0IsQ0FBbEI7QUFDRDs7QUFDRCxPQUFLUCxNQUFMLENBQVlPLEVBQVo7QUFDRCxDQUxEO0FBT0E7Ozs7OztBQUlBUixPQUFPLENBQUNFLFNBQVIsQ0FBa0JZLFVBQWxCLEdBQStCLFVBQVVOLEVBQVYsRUFBYztBQUMzQyxTQUFPLEtBQUtQLE1BQUwsQ0FBWU8sRUFBWixDQUFQO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7OztBQU1BUixPQUFPLENBQUNFLFNBQVIsQ0FBa0JhLE9BQWxCLEdBQTRCLFVBQVVQLEVBQVYsRUFBY1EsSUFBZCxFQUFvQjtBQUM5QyxPQUFLZixNQUFMLENBQVlPLEVBQVosSUFBa0JRLElBQWxCO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7O0FBS0FoQixPQUFPLENBQUNFLFNBQVIsQ0FBa0JlLFFBQWxCLEdBQTZCLFVBQVVDLEtBQVYsRUFBaUI7QUFDNUMsT0FBSyxJQUFJQyxHQUFULElBQWdCRCxLQUFoQixFQUF1QjtBQUNyQixRQUFJQSxLQUFLLENBQUNFLGNBQU4sQ0FBcUJELEdBQXJCLENBQUosRUFBK0I7QUFDN0IsV0FBS0osT0FBTCxDQUFhSSxHQUFiLEVBQWtCRCxLQUFLLENBQUNDLEdBQUQsQ0FBdkI7QUFDRDtBQUNGO0FBQ0YsQ0FORDs7QUFRQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsT0FBakIiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0b3JhZ2UgKCkge1xuICB0aGlzLl9pdGVtcyA9IHt9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5faXRlbXMgPSB7fTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gbnVtYmVyIG9mIGl0ZW1zXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRLZXlzKCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5kZWNyZWFzZSA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAodHlwZW9mIHRoaXMuX2l0ZW1zW2lkXSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRoaXMuX2l0ZW1zW2lkXSA9IDA7XG4gIH1cbiAgdGhpcy5faXRlbXNbaWRdLS07XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge29iamVjdH0gaXRlbVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtc1tpZF07XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtvYmplY3R9IGl0ZW1zXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXM7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0ga2V5cyBvZiBhbGwgaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuZ2V0S2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2l0ZW1zKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gaXRlbSBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuaW5jcmVhc2UgPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLl9pdGVtc1tpZF0gIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aGlzLl9pdGVtc1tpZF0gPSAwO1xuICB9XG4gIHRoaXMuX2l0ZW1zW2lkXSsrO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gIGRlbGV0ZSB0aGlzLl9pdGVtc1tpZF07XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIC0gaXRlbSB0byBiZSBzYXZlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLnNldEl0ZW0gPSBmdW5jdGlvbiAoaWQsIGl0ZW0pIHtcbiAgdGhpcy5faXRlbXNbaWRdID0gaXRlbTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtcyAtIGl0ZW1zIHRvIGJlIHNhdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbXMgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgZm9yIChsZXQga2V5IGluIGl0ZW1zKSB7XG4gICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRoaXMuc2V0SXRlbShrZXksIGl0ZW1zW2tleV0pXG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JhZ2U7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction join() {\n  var pathString = "",\n      arg;\n\n  for (var i = 0, j = arguments.length; i < j; i++) {\n    arg = arguments[i].replace(/^\\.\\//g, "/"); // don\'t add to the last one\n\n    pathString += arg;\n\n    if (i < j - 1) {\n      pathString += "/";\n    }\n  }\n\n  pathString = pathString.replace(/\\/{2,}/g, "/");\n  pathString = pathString.replace("https:/", "https://");\n  pathString = pathString.replace("http:/", "http://");\n  pathString = pathString.replace("file:/", "file://");\n  return pathString;\n}\n\nfunction joinPath() {\n  return join.apply(null, arguments) + "/";\n}\n\nfunction joinPathWithFile() {\n  return join.apply(null, arguments);\n}\n\nmodule.exports = {\n  joinPath: joinPath,\n  joinPathWithFile: joinPathWithFile\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC91cmwuanM/NWFkOCJdLCJuYW1lcyI6WyJqb2luIiwicGF0aFN0cmluZyIsImFyZyIsImkiLCJqIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVwbGFjZSIsImpvaW5QYXRoIiwiYXBwbHkiLCJqb2luUGF0aFdpdGhGaWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsU0FBU0EsSUFBVCxHQUFpQjtBQUNmLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxHQUFyQjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUE5QixFQUFzQ0gsQ0FBQyxHQUFHQyxDQUExQyxFQUE2Q0QsQ0FBQyxFQUE5QyxFQUFrRDtBQUNoREQsT0FBRyxHQUFHRyxTQUFTLENBQUNGLENBQUQsQ0FBVCxDQUFhSSxPQUFiLENBQXFCLFFBQXJCLEVBQStCLEdBQS9CLENBQU4sQ0FEZ0QsQ0FFaEQ7O0FBQ0FOLGNBQVUsSUFBSUMsR0FBZDs7QUFDQSxRQUFJQyxDQUFDLEdBQUdDLENBQUMsR0FBRyxDQUFaLEVBQWU7QUFDYkgsZ0JBQVUsSUFBSSxHQUFkO0FBQ0Q7QUFDRjs7QUFDREEsWUFBVSxHQUFHQSxVQUFVLENBQUNNLE9BQVgsQ0FBbUIsU0FBbkIsRUFBOEIsR0FBOUIsQ0FBYjtBQUNBTixZQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBWCxDQUFtQixTQUFuQixFQUE4QixVQUE5QixDQUFiO0FBQ0FOLFlBQVUsR0FBR0EsVUFBVSxDQUFDTSxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLFNBQTdCLENBQWI7QUFDQU4sWUFBVSxHQUFHQSxVQUFVLENBQUNNLE9BQVgsQ0FBbUIsUUFBbkIsRUFBNkIsU0FBN0IsQ0FBYjtBQUNBLFNBQU9OLFVBQVA7QUFDRDs7QUFFRCxTQUFTTyxRQUFULEdBQXFCO0FBQ25CLFNBQU9SLElBQUksQ0FBQ1MsS0FBTCxDQUFXLElBQVgsRUFBaUJKLFNBQWpCLElBQThCLEdBQXJDO0FBQ0Q7O0FBRUQsU0FBU0ssZ0JBQVQsR0FBNkI7QUFDM0IsU0FBT1YsSUFBSSxDQUFDUyxLQUFMLENBQVcsSUFBWCxFQUFpQkosU0FBakIsQ0FBUDtBQUNEOztBQUVETSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkosVUFBUSxFQUFFQSxRQURLO0FBRWZFLGtCQUFnQixFQUFFQTtBQUZILENBQWpCIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGpvaW4gKCkge1xuICBsZXQgcGF0aFN0cmluZyA9IFwiXCIsIGFyZztcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgYXJnID0gYXJndW1lbnRzW2ldLnJlcGxhY2UoL15cXC5cXC8vZywgXCIvXCIpO1xuICAgIC8vIGRvbid0IGFkZCB0byB0aGUgbGFzdCBvbmVcbiAgICBwYXRoU3RyaW5nICs9IGFyZztcbiAgICBpZiAoaSA8IGogLSAxKSB7XG4gICAgICBwYXRoU3RyaW5nICs9IFwiL1wiO1xuICAgIH1cbiAgfVxuICBwYXRoU3RyaW5nID0gcGF0aFN0cmluZy5yZXBsYWNlKC9cXC97Mix9L2csIFwiL1wiKTtcbiAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZShcImh0dHBzOi9cIiwgXCJodHRwczovL1wiKTtcbiAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZShcImh0dHA6L1wiLCBcImh0dHA6Ly9cIik7XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoXCJmaWxlOi9cIiwgXCJmaWxlOi8vXCIpO1xuICByZXR1cm4gcGF0aFN0cmluZztcbn1cblxuZnVuY3Rpb24gam9pblBhdGggKCkge1xuICByZXR1cm4gam9pbi5hcHBseShudWxsLCBhcmd1bWVudHMpICsgXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGpvaW5QYXRoV2l0aEZpbGUgKCkge1xuICByZXR1cm4gam9pbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgam9pblBhdGg6IGpvaW5QYXRoLFxuICBqb2luUGF0aFdpdGhGaWxlOiBqb2luUGF0aFdpdGhGaWxlXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar jsonfile = __webpack_require__(31);\n\nvar path = __webpack_require__(4);\n\nvar appSettings = __webpack_require__(1);\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} itemName - item name\n * @returns {Promise} promise\n * @constructor\n */\n\n\nfunction ReadItem(manifestId, itemName) {\n  if (!manifestId) {\n    throw new Error("manifestId is missing");\n  }\n\n  this._manifestId = manifestId;\n  this._itemName = itemName;\n  return new Promise(this._read.bind(this));\n}\n/**\n *\n * @param {function} resolve - callback to be invoked on finish\n * @private\n * @returns {void}\n */\n\n\nReadItem.prototype._read = function (resolve) {\n  var fileUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + this._manifestId + "/" + this._itemName + ".json");\n  jsonfile.readFile(fileUrl, function (err, data) {\n    if (err) {\n      resolve();\n    } else {\n      resolve(data);\n    }\n  });\n};\n\nmodule.exports = ReadItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL3JlYWQtaXRlbS5qcz9kMWExIl0sIm5hbWVzIjpbImpzb25maWxlIiwicmVxdWlyZSIsInBhdGgiLCJhcHBTZXR0aW5ncyIsIlJlYWRJdGVtIiwibWFuaWZlc3RJZCIsIml0ZW1OYW1lIiwiRXJyb3IiLCJfbWFuaWZlc3RJZCIsIl9pdGVtTmFtZSIsIlByb21pc2UiLCJfcmVhZCIsImJpbmQiLCJwcm90b3R5cGUiLCJyZXNvbHZlIiwiZmlsZVVybCIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJyZWFkRmlsZSIsImVyciIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUF4Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUFwQjs7QUFFQSxJQUFNRSxXQUFXLEdBQUdGLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjtBQUVBOzs7Ozs7Ozs7QUFPQSxTQUFTRyxRQUFULENBQW1CQyxVQUFuQixFQUErQkMsUUFBL0IsRUFBeUM7QUFDdkMsTUFBSSxDQUFDRCxVQUFMLEVBQWlCO0FBQ2YsVUFBTSxJQUFJRSxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNEOztBQUNELE9BQUtDLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsT0FBS0ksU0FBTCxHQUFpQkgsUUFBakI7QUFDQSxTQUFPLElBQUlJLE9BQUosQ0FBWSxLQUFLQyxLQUFMLENBQVdDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBWixDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNQVIsUUFBUSxDQUFDUyxTQUFULENBQW1CRixLQUFuQixHQUEyQixVQUFVRyxPQUFWLEVBQW1CO0FBQzVDLE1BQU1DLE9BQU8sR0FBR2IsSUFBSSxDQUFDWSxPQUFMLENBQWFYLFdBQVcsQ0FBQ2EsV0FBWixHQUEwQkMsY0FBMUIsR0FBMkMsR0FBM0MsR0FBaUQsS0FBS1QsV0FBdEQsR0FBb0UsR0FBcEUsR0FBMEUsS0FBS0MsU0FBL0UsR0FBMkYsT0FBeEcsQ0FBaEI7QUFDQVQsVUFBUSxDQUFDa0IsUUFBVCxDQUFrQkgsT0FBbEIsRUFBMkIsVUFBVUksR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQzlDLFFBQUlELEdBQUosRUFBUztBQUNQTCxhQUFPO0FBQ1IsS0FGRCxNQUVPO0FBQ0xBLGFBQU8sQ0FBQ00sSUFBRCxDQUFQO0FBQ0Q7QUFDRixHQU5EO0FBT0QsQ0FURDs7QUFXQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEIsUUFBakIiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGpzb25maWxlID0gcmVxdWlyZSgnanNvbmZpbGUnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9hcHAtc2V0dGluZ3MnKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gaXRlbU5hbWUgLSBpdGVtIG5hbWVcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVhZEl0ZW0gKG1hbmlmZXN0SWQsIGl0ZW1OYW1lKSB7XG4gIGlmICghbWFuaWZlc3RJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1hbmlmZXN0SWQgaXMgbWlzc2luZ1wiKTtcbiAgfVxuICB0aGlzLl9tYW5pZmVzdElkID0gbWFuaWZlc3RJZDtcbiAgdGhpcy5faXRlbU5hbWUgPSBpdGVtTmFtZTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHRoaXMuX3JlYWQuYmluZCh0aGlzKSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmUgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGZpbmlzaFxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5SZWFkSXRlbS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICBjb25zdCBmaWxlVXJsID0gcGF0aC5yZXNvbHZlKGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc2V0dGluZ3NGb2xkZXIgKyBcIi9cIiArIHRoaXMuX21hbmlmZXN0SWQgKyBcIi9cIiArIHRoaXMuX2l0ZW1OYW1lICsgXCIuanNvblwiKTtcbiAganNvbmZpbGUucmVhZEZpbGUoZmlsZVVybCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkSXRlbTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n')},,,function(Q,F,B){Q.exports=B(41)},function(module,exports,__webpack_require__){"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(5);\n\nvar Snowflake = __webpack_require__(9);\n\nvar appSettings = __webpack_require__(1);\n\nvar beMethods = __webpack_require__(44);\n\nvar DownloadsController = __webpack_require__(84);\n\nvar ManifestController = __webpack_require__(96);\n\nvar OfflineController = __webpack_require__(99);\n\nvar SubscribersController = __webpack_require__(102);\n\nvar Server = __webpack_require__(103);\n\nvar DownstreamElectronBE;\n\nfunction deserialize(serializedJavascript) {\n  try {\n    return JSON.parse(serializedJavascript);\n  } catch (err) {\n    return {};\n  }\n}\n/**\n * @constructor\n * @namespace DownstreamElectronBE\n * @param {object} configParams - configuration\n * @property {DownstreamElectronBE.init} init - initialize api in main process\n * @description\n * During initialization you can configure your app, [click here]{@link DownstreamElectronBE.configuration}\n *\n * @example\n * //somewhere in the main process\n * const { BrowserWindow, app } = require(\'electron\');\n * const downstreamElectron = require(\'downstream-electron\');\n *\n * const userSettings = {\n *   "appDir": "/Users/admin/myApp",\n *   "settingsName": "settings",\n *   "publicName": "public",\n *   "downloadsName": "movies"\n * };\n *\n * let downstreamInstance;\n * function createWindow() {\n *   downstreamInstance = downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n *\n * function onWillQuit() {\n *  downstreamInstance.stop();\n * }\n *\n * app.on(\'ready\', createWindow);\n * app.on(\'will-quit\', onWillQuit);\n * app.on(\'window-all-closed\', function () {\n *  console.log("window-all-closed");\n *  app.quit();\n * });\n */\n\n\nDownstreamElectronBE = function DownstreamElectronBE() {\n  this._offlineContentPort = appSettings.getSettings().offlineContentPortStart;\n\n  _.bindAll(this, "_onApiRequest", "processSubscriber");\n\n  this._createControllers();\n\n  this._serveOfflineContent();\n\n  this._attachEvents(); // this.offlineController.restoreLocalManifest("6163760572308389888");\n\n};\n\nDownstreamElectronBE.prototype.stop = function () {\n  this.server.stop();\n};\n/**\n *\n * @param {string} methodName - api function\n * @param {string} promiseId - promise identifier\n * @param {object} args - arguments\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._apiMethods = function (methodName, promiseId, args, target) {\n  var self = this;\n  var manifestId = args[0];\n  var response = {};\n  response.promiseId = promiseId;\n\n  var onSuccess = function onSuccess(result, subscribersId) {\n    response.subscribersId = subscribersId;\n    response.status = "OK";\n    response.result = result;\n    response.manifestId = manifestId;\n\n    self._send(response, target);\n  };\n\n  var onFailure = function onFailure(err, internalError) {\n    var errorId = String(Snowflake.SnowflakeId.getUUID());\n\n    var errorInfo = _.clone({\n      errorId: errorId,\n      methodName: methodName,\n      args: args.slice(4),\n      err: err,\n      internalError: internalError\n    });\n\n    response.manifestId = manifestId;\n    response.status = "ERROR";\n    response.error = err || {};\n    response.error.errorId = errorId;\n    response.error.details = internalError;\n\n    self._send(response, target); // @TODO log all errors that user have seen, the errorId will help to find stack\n\n\n    try {\n      console.error(new Date(), "Error occurred", JSON.stringify(errorInfo));\n    } catch (e) {//do nothing\n    }\n  };\n\n  args = args || [];\n  args.unshift(target);\n  args.unshift(onFailure);\n  args.unshift(onSuccess);\n  args.unshift(this);\n\n  var method = this._getMethod(methodName);\n\n  if (typeof method === "function") {\n    method.apply(null, args);\n  } else {\n    response.status = "ERROR";\n    response.error = "Provided method \'" + methodName + "\' doesn\'t exists";\n\n    this._send(response, target);\n\n    console.error("ERROR", "Provided method \'" + methodName + "\' doesn\'t exists");\n  }\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._attachEvents = function () {\n  var ipcMain = __webpack_require__(3).ipcMain;\n\n  ipcMain.on("downstreamElectronBE", this._onApiRequest);\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._createControllers = function () {\n  this.manifestController = new ManifestController();\n  this.offlineController = new OfflineController(this.manifestController);\n  this.downloadsController = new DownloadsController(this.manifestController, this.offlineController);\n  this.subscribersController = new SubscribersController();\n};\n/**\n *\n * @param {string} methodName - method name\n * @returns {*} - method\n * @private\n */\n\n\nDownstreamElectronBE.prototype._getMethod = function (methodName) {\n  var names = methodName.split(".");\n  var i, j, method;\n  method = beMethods[names[0]];\n\n  for (i = 1, j = names.length; i < j; i++) {\n    method = method[names[i]];\n  }\n\n  return method;\n};\n/**\n *\n * @param {object} evt - event\n * @param {object} data - data from renderer\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._onApiRequest = function (evt, data, target) {\n  var promiseId = data.promiseId;\n  var argsObj = deserialize(data.args) || {};\n  var method = data.method;\n  var windowId = data.windowId;\n  target = windowId;\n  var args = [];\n  var i = 0;\n\n  while (argsObj.hasOwnProperty(i)) {\n    args.push(argsObj[i]);\n    i++;\n  }\n\n  this._apiMethods(method, promiseId, args, target);\n};\n/**\n * @private\n * @param {object} response - response\n * @param {number} target - window target id\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._send = function (response, target) {\n  try {\n    var windows = __webpack_require__(3).BrowserWindow.getAllWindows();\n\n    for (var i = 0, j = windows.length; i < j; i++) {\n      if (windows[i].id === target) {\n        windows[i].webContents.send(\'downstreamElectronFE\', response);\n        break;\n      }\n    }\n  } catch (err) {\n    console.error("internal error ocurred", err);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._serveOfflineContent = function () {\n  var self = this;\n  var maxOfflineContentPortRange = appSettings.getSettings().maxOfflineContentPortRange;\n  this.server = new Server(this.offlineController, this.downloadsController, maxOfflineContentPortRange, this._offlineContentPort);\n  this.server.serveOfflineContent(function (offlinePort) {\n    self._offlineContentPort = offlinePort;\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} - offline path\n */\n\n\nDownstreamElectronBE.prototype.getOfflinePath = function (manifestId) {\n  var offlinePath = appSettings.getSettings().offlineDomain;\n  var offlineContentPort = this._offlineContentPort;\n\n  if (offlineContentPort) {\n    offlinePath += ":" + offlineContentPort;\n  }\n\n  offlinePath += "/" + encodeURIComponent(appSettings.getSettings().downloadsName) + "/" + encodeURIComponent(manifestId) + "/";\n  return offlinePath;\n};\n/**\n *\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {number} target - window target id\n * @param {boolean} subscriberFinished - download finished\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype.processSubscriber = function (subscriberId, err, result, target, subscriberFinished) {\n  var response = {};\n  response.subscriberId = subscriberId;\n  response.status = err ? "ERROR" : "OK";\n  response.err = err;\n  response.result = result;\n  response.subscriberFinished = subscriberFinished;\n\n  this._send(response, target);\n\n  if (subscriberFinished) {\n    this.subscribersController.removeAllManifestSubscribersById(subscriberId);\n  }\n}; //---------------------------\n\n\nmodule.exports = {\n  init: function init(userSettings) {\n    appSettings.load(userSettings);\n    return new DownstreamElectronBE();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__42__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmbGFrZS1pZGdlblwiPzQ2YmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzQyX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__43__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJiaWd1aW50LWZvcm1hdFwiPzM0ZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzQzX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @typedef manifestObject\n * @property {Object} video - video representations\n * @property {Object} audio - audio representations\n * @property {Object} text - text representations\n * @property {String} id - manifest id\n */\n\n/**\n * @memberOf DownstreamElectronFE\n * @namespace DownstreamElectronFE.downloads\n */\n\nvar downloads = {};\n/**\n * create a new download, if success the result will contain "id" which should be used for other calls\n * @method create\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestUrl - manifest url\n * @param {string} customManifestId - custom manifest id, if empty, null or \'\'\n * the id will be generated automatically.<br>\n * The manifestId is used to also store information about movie under the same folder so if you overwrite it,\n * it will be also used as a name for folder where movie content will be stored\n * customManifestId will be validated against default regex\n * {@link DownstreamElectronBE.configuration|customManifestIdFolderRegex}\n * @example\n * var url = "http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd";\n * DownstreamElectronFE.downloads.create(url)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * DownstreamElectronFE.downloads.create(url, \'<myCustomId>\')\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.create = __webpack_require__(45);\n/**\n * create a persistent session\n * @method createPersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {PersistentConfig} config - persistent configuration\n * @param {boolean} [forced=false] - replace existing persistent session, if true\n * @example\n * var config = {\n *   licenseUrl: \'https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/\',\n *   serverCertificate: new Uint8Array(<server_certificate>),\n *   customData: {\n *     userId: \'<user_id>\',\n *     sessionId: \'<session_id>\',\n *     merchant: \'<merchant>\'\n *   }\n * };\n * DownstreamElectronFE.downloads.createPersistent(manifestId, config)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.createPersistent = __webpack_require__(62);\n/**\n * Get info about manifest folder\n * @method getFolderInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getFolderInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getFolderInfo = __webpack_require__(63);\n/**\n * get ids of all downloads\n * @method getList\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getList()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getList = __webpack_require__(64);\n/**\n * get list of all downloads with additional info {@link manifestObject}\n * @method getListWithInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getListWithInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getListWithInfo = __webpack_require__(65);\n/**\n * get offline link for download which can be used by any player to play movie\n * @method getOfflineLink\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.getOfflineLink(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getOfflineLink = __webpack_require__(66);\n/**\n * get info for download\n * @method info\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.info(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.info = __webpack_require__(67);\n/**\n * removes download\n * @method remove\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.remove(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.remove = __webpack_require__(68);\n/**\n * removes all downloads\n * @method removeAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removeAll = __webpack_require__(69);\n/**\n * removes all unfinished downloads\n * @method removeAllUnfinished\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAllUnfinished()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removeAllUnfinished = __webpack_require__(70);\n/**\n * removes persistent information previously stored\n * @method removePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.removePersistent(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removePersistent = __webpack_require__(71);\n/**\n * resumes download which could be previously stopped or is broken\n * @method resume\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.resume(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.resume = __webpack_require__(72);\n/**\n * Saves some user data this might be a string or json object.\n * This data will be available as "data" property for info of download\n * @method saveData\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string|json} data - user data\n * @example\n * DownstreamElectronFE.downloads.saveData(manifestId, data)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.saveData = __webpack_require__(73);\n/**\n * saves persistent session identifier\n * @method savePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} persistentSessionId - persistent session identifier\n * @example\n * DownstreamElectronFE.downloads.savePersistent(manifestId, persistentSessionId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.savePersistent = __webpack_require__(75);\n/**\n * starts download\n * @method start\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - representations to be downloaded, available options: \'video\', \'audio\', \'text\'.\n * For each option please provide an array of representations id to be downloaded\n * @example\n * DownstreamElectronFE.downloads.start(manifestId, {video: [\'video=400000\', \'video=795000\'], audio: [\'audio=128000\']})\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.start = __webpack_require__(76);\n/**\n * stops download\n * @method stop\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.stop(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.stop = __webpack_require__(77);\n/**\n * stops all downloads\n * @method stopAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.stopAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.stopAll = __webpack_require__(78);\n/**\n * subscribe to download progress\n * @method subscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @param {number} interval - in milliseconds - how often callback onProgress should be invoked\n * @param {function} onProgress - callback to be invoked as often as defined by interval with [stats information]{@link DownloadStats}\n * @param {function} onFinish - callback to be invoked when download is finished\n * @example\n * function onProgress (err, stats) {\n *   if (err) {\n *     console.logs(stats);\n *   }\n * };\n * function onFinish (err, info) {\n *   if (err) {\n *     console.log("error", err);\n *   } else {\n *     console.log("success", info);\n *   }\n * };\n * DownstreamElectronFE.downloads.subscribe(manifestId, 1000, onProgress, onFinish)\n *    .then(\n *      function onSuccess() {console.log("subscribed successfully");},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.subscribe = __webpack_require__(79);\n/**\n * removes callbacks from subscribe process\n * @method unsubscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @example\n * DownstreamElectronFE.downloads.unsubscribe(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.unsubscribe = __webpack_require__(81);\n/**\n * update download folder info for manifest id\n * this can be usefule when user has copied download folder\n * @method updateDownloadFolder\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder path\n * @example\n * DownstreamElectronFE.downloads.updateDownloadFolder(manifestId, downloadFolder)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.updateDownloadFolder = __webpack_require__(82);\n/**\n * remove all subscribers\n * @private\n * @method removeSubscribers\n * @memberOf DownstreamElectronFE\n * @example\n * DownstreamElectronFE.removeSubscribers()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\nvar removeSubscribers = __webpack_require__(83);\n\nmodule.exports = {\n  downloads: downloads,\n  removeSubscribers: removeSubscribers\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar Manifest = __webpack_require__(15).Manifest;\n\nvar translation = __webpack_require__(0);\n\nvar canCreateManifest = __webpack_require__(29);\n\nvar getInvalidDiff = __webpack_require__(61);\n\nvar appSettings = __webpack_require__(1);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestUrl, customManifestId, manifestStr) {\n  var useCustomId = true;\n\n  if (typeof customManifestId === "undefined" || customManifestId === "" || customManifestId === null) {\n    useCustomId = false;\n  }\n\n  if (useCustomId) {\n    if (typeof customManifestId !== "undefined" && typeof customManifestId !== "number" && typeof customManifestId !== "string") {\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, customManifestId));\n      return;\n    }\n\n    var customManifestIdFolderRegex = appSettings.getSettings().customManifestIdFolderRegex;\n\n    if (!customManifestId.match(customManifestIdFolderRegex)) {\n      var invalid = getInvalidDiff(customManifestId, customManifestIdFolderRegex, appSettings.getSettings().openingTagForInvalidCustomManifestIdCharacter, appSettings.getSettings().closingTagForInvalidCustomManifestIdCharacter);\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, invalid));\n      return;\n    }\n  }\n\n  var manifest = new Manifest(customManifestId);\n  var promise;\n\n  if (manifestStr) {\n    promise = manifest.loadWithManifest(manifestUrl, manifestStr);\n  } else {\n    promise = manifest.load(manifestUrl);\n  }\n\n  promise.then(function () {\n    if (useCustomId) {\n      canCreateManifest(customManifestId).then(function () {\n        api.manifestController.cacheManifest(manifest);\n        onSuccess(manifest.getJsonInfo());\n      }, function (err) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, customManifestId), err);\n      });\n    } else {\n      api.manifestController.cacheManifest(manifest);\n      onSuccess(manifest.getJsonInfo());\n    }\n  }, function (err) {\n    onFailure(translation.getError(translation.e.manifests.LOADING_FAILED, manifestUrl), err);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvY3JlYXRlLmpzP2VjMjQiXSwibmFtZXMiOlsiTWFuaWZlc3QiLCJyZXF1aXJlIiwidHJhbnNsYXRpb24iLCJjYW5DcmVhdGVNYW5pZmVzdCIsImdldEludmFsaWREaWZmIiwiYXBwU2V0dGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RVcmwiLCJjdXN0b21NYW5pZmVzdElkIiwibWFuaWZlc3RTdHIiLCJ1c2VDdXN0b21JZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIklOVkFMSURfSUQiLCJjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXgiLCJnZXRTZXR0aW5ncyIsIm1hdGNoIiwiaW52YWxpZCIsIm9wZW5pbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3RlciIsImNsb3NpbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3RlciIsIm1hbmlmZXN0IiwicHJvbWlzZSIsImxvYWRXaXRoTWFuaWZlc3QiLCJsb2FkIiwidGhlbiIsIm1hbmlmZXN0Q29udHJvbGxlciIsImNhY2hlTWFuaWZlc3QiLCJnZXRKc29uSW5mbyIsImVyciIsIkZPTERFUl9BTFJFQURZX0VYSVNUUyIsIkxPQURJTkdfRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUFQLENBQTBDRCxRQUEzRDs7QUFDQSxJQUFNRSxXQUFXLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxpQkFBaUIsR0FBR0YsbUJBQU8sQ0FBQyxFQUFELENBQWpDOztBQUNBLElBQU1HLGNBQWMsR0FBR0gsbUJBQU8sQ0FBQyxFQUFELENBQTlCOztBQUNBLElBQU1JLFdBQVcsR0FBR0osbUJBQU8sQ0FBQyxDQUFELENBQTNCOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFdBQTdDLEVBQTBEQyxnQkFBMUQsRUFBNEVDLFdBQTVFLEVBQXlGO0FBQ3hHLE1BQUlDLFdBQVcsR0FBRyxJQUFsQjs7QUFFQSxNQUFJLE9BQU9GLGdCQUFQLEtBQTRCLFdBQTVCLElBQ0ZBLGdCQUFnQixLQUFLLEVBRG5CLElBRUZBLGdCQUFnQixLQUFLLElBRnZCLEVBRTZCO0FBQzNCRSxlQUFXLEdBQUcsS0FBZDtBQUNEOztBQUVELE1BQUlBLFdBQUosRUFBaUI7QUFDZixRQUFJLE9BQU9GLGdCQUFQLEtBQTRCLFdBQTVCLElBQ0YsT0FBT0EsZ0JBQVAsS0FBNEIsUUFEMUIsSUFFRixPQUFPQSxnQkFBUCxLQUE0QixRQUY5QixFQUV3QztBQUN0Q0gsZUFBUyxDQUFDUixXQUFXLENBQUNjLFFBQVosQ0FBcUJkLFdBQVcsQ0FBQ2UsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxVQUE3QyxFQUF5RE4sZ0JBQXpELENBQUQsQ0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsUUFBTU8sMkJBQTJCLEdBQUdmLFdBQVcsQ0FBQ2dCLFdBQVosR0FBMEJELDJCQUE5RDs7QUFFQSxRQUFJLENBQUNQLGdCQUFnQixDQUFDUyxLQUFqQixDQUF1QkYsMkJBQXZCLENBQUwsRUFBMEQ7QUFDeEQsVUFBTUcsT0FBTyxHQUFHbkIsY0FBYyxDQUM1QlMsZ0JBRDRCLEVBRTVCTywyQkFGNEIsRUFHNUJmLFdBQVcsQ0FBQ2dCLFdBQVosR0FBMEJHLDZDQUhFLEVBSTVCbkIsV0FBVyxDQUFDZ0IsV0FBWixHQUEwQkksNkNBSkUsQ0FBOUI7QUFLQWYsZUFBUyxDQUFDUixXQUFXLENBQUNjLFFBQVosQ0FBcUJkLFdBQVcsQ0FBQ2UsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxVQUE3QyxFQUF5REksT0FBekQsQ0FBRCxDQUFUO0FBQ0E7QUFDRDtBQUNGOztBQUVELE1BQUlHLFFBQVEsR0FBRyxJQUFJMUIsUUFBSixDQUFhYSxnQkFBYixDQUFmO0FBQ0EsTUFBSWMsT0FBSjs7QUFDQSxNQUFJYixXQUFKLEVBQWlCO0FBQ2ZhLFdBQU8sR0FBR0QsUUFBUSxDQUFDRSxnQkFBVCxDQUEwQmhCLFdBQTFCLEVBQXVDRSxXQUF2QyxDQUFWO0FBQ0QsR0FGRCxNQUVPO0FBQ0xhLFdBQU8sR0FBR0QsUUFBUSxDQUFDRyxJQUFULENBQWNqQixXQUFkLENBQVY7QUFDRDs7QUFFRGUsU0FBTyxDQUFDRyxJQUFSLENBQWEsWUFBTTtBQUNqQixRQUFJZixXQUFKLEVBQWlCO0FBQ2ZaLHVCQUFpQixDQUFDVSxnQkFBRCxDQUFqQixDQUFvQ2lCLElBQXBDLENBQXlDLFlBQVk7QUFDbkR0QixXQUFHLENBQUN1QixrQkFBSixDQUF1QkMsYUFBdkIsQ0FBcUNOLFFBQXJDO0FBQ0FqQixpQkFBUyxDQUFDaUIsUUFBUSxDQUFDTyxXQUFULEVBQUQsQ0FBVDtBQUNELE9BSEQsRUFHRyxVQUFVQyxHQUFWLEVBQWU7QUFDaEJ4QixpQkFBUyxDQUFDUixXQUFXLENBQUNjLFFBQVosQ0FBcUJkLFdBQVcsQ0FBQ2UsQ0FBWixDQUFjQyxTQUFkLENBQXdCaUIscUJBQTdDLEVBQW9FdEIsZ0JBQXBFLENBQUQsRUFBd0ZxQixHQUF4RixDQUFUO0FBQ0QsT0FMRDtBQU1ELEtBUEQsTUFPTztBQUNMMUIsU0FBRyxDQUFDdUIsa0JBQUosQ0FBdUJDLGFBQXZCLENBQXFDTixRQUFyQztBQUNBakIsZUFBUyxDQUFDaUIsUUFBUSxDQUFDTyxXQUFULEVBQUQsQ0FBVDtBQUNEO0FBQ0YsR0FaRCxFQVlHLFVBQUNDLEdBQUQsRUFBUztBQUNWeEIsYUFBUyxDQUFDUixXQUFXLENBQUNjLFFBQVosQ0FBcUJkLFdBQVcsQ0FBQ2UsQ0FBWixDQUFjQyxTQUFkLENBQXdCa0IsY0FBN0MsRUFBNkR4QixXQUE3RCxDQUFELEVBQTRFc0IsR0FBNUUsQ0FBVDtBQUNELEdBZEQ7QUFlRCxDQXBERCIsImZpbGUiOiI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBNYW5pZmVzdCA9IHJlcXVpcmUoXCIuLi8uLi9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3RcIikuTWFuaWZlc3Q7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi90cmFuc2xhdGlvbi9pbmRleFwiKTtcbmNvbnN0IGNhbkNyZWF0ZU1hbmlmZXN0ID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdFwiKTtcbmNvbnN0IGdldEludmFsaWREaWZmID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZ2V0LWludmFsaWQtZGlmZlwiKTtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZShcIi4uLy4uL2FwcC1zZXR0aW5nc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdFVybCwgY3VzdG9tTWFuaWZlc3RJZCwgbWFuaWZlc3RTdHIpIHtcbiAgdmFyIHVzZUN1c3RvbUlkID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgPT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICBjdXN0b21NYW5pZmVzdElkID09PSBcIlwiIHx8XG4gICAgY3VzdG9tTWFuaWZlc3RJZCA9PT0gbnVsbCkge1xuICAgIHVzZUN1c3RvbUlkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodXNlQ3VzdG9tSWQpIHtcbiAgICBpZiAodHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIHR5cGVvZiBjdXN0b21NYW5pZmVzdElkICE9PSBcIm51bWJlclwiICYmXG4gICAgICB0eXBlb2YgY3VzdG9tTWFuaWZlc3RJZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLklOVkFMSURfSUQsIGN1c3RvbU1hbmlmZXN0SWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4ID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5jdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXg7XG5cbiAgICBpZiAoIWN1c3RvbU1hbmlmZXN0SWQubWF0Y2goY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4KSkge1xuICAgICAgY29uc3QgaW52YWxpZCA9IGdldEludmFsaWREaWZmKFxuICAgICAgICBjdXN0b21NYW5pZmVzdElkLFxuICAgICAgICBjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXgsXG4gICAgICAgIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkub3BlbmluZ1RhZ0ZvckludmFsaWRDdXN0b21NYW5pZmVzdElkQ2hhcmFjdGVyLFxuICAgICAgICBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmNsb3NpbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3Rlcik7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5WQUxJRF9JRCwgaW52YWxpZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxldCBtYW5pZmVzdCA9IG5ldyBNYW5pZmVzdChjdXN0b21NYW5pZmVzdElkKTtcbiAgbGV0IHByb21pc2U7XG4gIGlmIChtYW5pZmVzdFN0cikge1xuICAgIHByb21pc2UgPSBtYW5pZmVzdC5sb2FkV2l0aE1hbmlmZXN0KG1hbmlmZXN0VXJsLCBtYW5pZmVzdFN0cilcbiAgfSBlbHNlIHtcbiAgICBwcm9taXNlID0gbWFuaWZlc3QubG9hZChtYW5pZmVzdFVybCk7XG4gIH1cblxuICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgIGlmICh1c2VDdXN0b21JZCkge1xuICAgICAgY2FuQ3JlYXRlTWFuaWZlc3QoY3VzdG9tTWFuaWZlc3RJZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIuY2FjaGVNYW5pZmVzdChtYW5pZmVzdCk7XG4gICAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdC5nZXRKc29uSW5mbygpKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkZPTERFUl9BTFJFQURZX0VYSVNUUywgY3VzdG9tTWFuaWZlc3RJZCksIGVycik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5jYWNoZU1hbmlmZXN0KG1hbmlmZXN0KTtcbiAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdC5nZXRKc29uSW5mbygpKTtcbiAgICB9XG4gIH0sIChlcnIpID0+IHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTE9BRElOR19GQUlMRUQsIG1hbmlmZXN0VXJsKSwgZXJyKTtcbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _require = __webpack_require__(3),\n    net = _require.net;\n\nvar appSettings = __webpack_require__(1);\n\nvar ManifestLoader = function () {\n  function ManifestLoader() {}\n\n  ManifestLoader.prototype.load = function (url) {\n    return this.sendXMLHttpRequest(url);\n  };\n\n  ManifestLoader.prototype.sendXMLHttpRequest = function (url) {\n    var req_options = Object.assign({\n      url: url,\n      method: 'GET'\n    }, appSettings.getSettings().defaultManifestRequestOptions);\n    return new Promise(function (resolve, reject) {\n      var req = net.request(req_options);\n      req.chunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n      req.on('error', function (err) {\n        reject(err);\n      });\n      req.on('response', function (response) {\n        response.on(\"error\", function (error) {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        });\n        var error;\n\n        if (response.statusCode >= 400) {\n          error = response.statusMessage;\n        }\n\n        if (!error) {\n          var body = [];\n          response.on('data', function (chunk) {\n            body.push(chunk);\n          }).on('end', function () {\n            body = Buffer.concat(body);\n            resolve({\n              response: body,\n              url: url\n            });\n          });\n        } else {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        }\n      });\n      req.end();\n    });\n  };\n\n  return ManifestLoader;\n}();\n\nexports.ManifestLoader = ManifestLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvbG9hZGVyL21hbmlmZXN0LWxvYWRlci5qcz85NTQ5Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJuZXQiLCJhcHBTZXR0aW5ncyIsIk1hbmlmZXN0TG9hZGVyIiwicHJvdG90eXBlIiwibG9hZCIsInVybCIsInNlbmRYTUxIdHRwUmVxdWVzdCIsInJlcV9vcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwibWV0aG9kIiwiZ2V0U2V0dGluZ3MiLCJkZWZhdWx0TWFuaWZlc3RSZXF1ZXN0T3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxIiwicmVxdWVzdCIsImNodW5rZWRFbmNvZGluZyIsInVzZUNodW5rZWRFbmNvZGluZyIsIm9uIiwiZXJyIiwicmVzcG9uc2UiLCJlcnJvciIsIkVycm9yIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJib2R5IiwiY2h1bmsiLCJwdXNoIiwiQnVmZmVyIiwiY29uY2F0IiwiZW5kIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O2VBQ0NBLG1CQUFPLENBQUMsQ0FBRCxDO0lBQWRDLEcsWUFBQUEsRzs7QUFDUCxJQUFNQyxXQUFXLEdBQUdGLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFFQSxJQUFNRyxjQUFjLEdBQUksWUFBWTtBQUNsQyxXQUFTQSxjQUFULEdBQTJCLENBQUU7O0FBRTdCQSxnQkFBYyxDQUFDQyxTQUFmLENBQXlCQyxJQUF6QixHQUFnQyxVQUFVQyxHQUFWLEVBQWU7QUFDN0MsV0FBTyxLQUFLQyxrQkFBTCxDQUF3QkQsR0FBeEIsQ0FBUDtBQUNELEdBRkQ7O0FBR0FILGdCQUFjLENBQUNDLFNBQWYsQ0FBeUJHLGtCQUF6QixHQUE4QyxVQUFVRCxHQUFWLEVBQWU7QUFDM0QsUUFBTUUsV0FBVyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUNoQ0osU0FBRyxFQUFFQSxHQUQyQjtBQUVoQ0ssWUFBTSxFQUFFO0FBRndCLEtBQWQsRUFHakJULFdBQVcsQ0FBQ1UsV0FBWixHQUEwQkMsNkJBSFQsQ0FBcEI7QUFLQSxXQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUM1QyxVQUFJQyxHQUFHLEdBQUdoQixHQUFHLENBQUNpQixPQUFKLENBQVlWLFdBQVosQ0FBVjtBQUNBUyxTQUFHLENBQUNFLGVBQUosR0FBc0JqQixXQUFXLENBQUNVLFdBQVosR0FBMEJRLGtCQUFoRDtBQUVBSCxTQUFHLENBQUNJLEVBQUosQ0FBTyxPQUFQLEVBQWdCLFVBQUNDLEdBQUQsRUFBUztBQUN2Qk4sY0FBTSxDQUFDTSxHQUFELENBQU47QUFDRCxPQUZEO0FBSUFMLFNBQUcsQ0FBQ0ksRUFBSixDQUFPLFVBQVAsRUFBbUIsVUFBQ0UsUUFBRCxFQUFjO0FBRS9CQSxnQkFBUSxDQUFDRixFQUFULENBQVksT0FBWixFQUFxQixVQUFVRyxLQUFWLEVBQWlCO0FBQ3BDUixnQkFBTSxDQUFDLElBQUlTLEtBQUosQ0FBVSwyQkFBMkJELEtBQXJDLENBQUQsQ0FBTjtBQUNELFNBRkQ7QUFJQSxZQUFJQSxLQUFKOztBQUNBLFlBQUlELFFBQVEsQ0FBQ0csVUFBVCxJQUF1QixHQUEzQixFQUFnQztBQUM1QkYsZUFBSyxHQUFHRCxRQUFRLENBQUNJLGFBQWpCO0FBQ0g7O0FBRUQsWUFBSSxDQUFDSCxLQUFMLEVBQVk7QUFDVixjQUFJSSxJQUFJLEdBQUcsRUFBWDtBQUNBTCxrQkFBUSxDQUFDRixFQUFULENBQVksTUFBWixFQUFvQixVQUFDUSxLQUFELEVBQVc7QUFDN0JELGdCQUFJLENBQUNFLElBQUwsQ0FBVUQsS0FBVjtBQUNELFdBRkQsRUFFR1IsRUFGSCxDQUVNLEtBRk4sRUFFYSxZQUFNO0FBQ2pCTyxnQkFBSSxHQUFHRyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osSUFBZCxDQUFQO0FBQ0FiLG1CQUFPLENBQUM7QUFBQ1Esc0JBQVEsRUFBRUssSUFBWDtBQUFpQnRCLGlCQUFHLEVBQUVBO0FBQXRCLGFBQUQsQ0FBUDtBQUNELFdBTEQ7QUFNRCxTQVJELE1BUU87QUFDSFUsZ0JBQU0sQ0FBQyxJQUFJUyxLQUFKLENBQVUsMkJBQTJCRCxLQUFyQyxDQUFELENBQU47QUFDSDtBQUNGLE9BdEJEO0FBdUJBUCxTQUFHLENBQUNnQixHQUFKO0FBQ0QsS0FoQ00sQ0FBUDtBQWlDRCxHQXZDRDs7QUF3Q0EsU0FBTzlCLGNBQVA7QUFDRCxDQS9DdUIsRUFBeEI7O0FBZ0RBK0IsT0FBTyxDQUFDL0IsY0FBUixHQUF5QkEsY0FBekIiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHtuZXR9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vLi4vYXBwLXNldHRpbmdzJyk7XG5cbmNvbnN0IE1hbmlmZXN0TG9hZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWFuaWZlc3RMb2FkZXIgKCkge31cblxuICBNYW5pZmVzdExvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kWE1MSHR0cFJlcXVlc3QodXJsKTtcbiAgfTtcbiAgTWFuaWZlc3RMb2FkZXIucHJvdG90eXBlLnNlbmRYTUxIdHRwUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBjb25zdCByZXFfb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBtZXRob2Q6ICdHRVQnXG4gICAgfSwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5kZWZhdWx0TWFuaWZlc3RSZXF1ZXN0T3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IHJlcSA9IG5ldC5yZXF1ZXN0KHJlcV9vcHRpb25zKTtcbiAgICAgIHJlcS5jaHVua2VkRW5jb2RpbmcgPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnVzZUNodW5rZWRFbmNvZGluZztcblxuICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgcmVxLm9uKCdyZXNwb25zZScsIChyZXNwb25zZSkgPT4ge1xuXG4gICAgICAgIHJlc3BvbnNlLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk1BTklGRVNUIExPQUQgRkFJTFVSRSBcIiArIGVycm9yKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlcnJvcjtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICAgICAgICBlcnJvciA9IHJlc3BvbnNlLnN0YXR1c01lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgbGV0IGJvZHkgPSBbXTtcbiAgICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgYm9keS5wdXNoKGNodW5rKTtcbiAgICAgICAgICB9KS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgYm9keSA9IEJ1ZmZlci5jb25jYXQoYm9keSk7XG4gICAgICAgICAgICByZXNvbHZlKHtyZXNwb25zZTogYm9keSwgdXJsOiB1cmx9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJNQU5JRkVTVCBMT0FEIEZBSUxVUkUgXCIgKyBlcnJvcikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJlcS5lbmQoKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIE1hbmlmZXN0TG9hZGVyO1xufSgpKTtcbmV4cG9ydHMuTWFuaWZlc3RMb2FkZXIgPSBNYW5pZmVzdExvYWRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fs = __webpack_require__(2);\n\nvar path = __webpack_require__(4);\n/**\n * @param {string} url - local url\n * @returns {Promise} promise\n * @constructor\n */\n\n\nfunction ManifestLocalLoader(url) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(path.resolve(url), "utf-8", function (err, content) {\n      if (!err) {\n        resolve(content);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nmodule.exports = ManifestLocalLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvbG9hZGVyL21hbmlmZXN0LWxvY2FsLWxvYWRlci5qcz9mMzY5Il0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJNYW5pZmVzdExvY2FsTG9hZGVyIiwidXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkRmlsZSIsImVyciIsImNvbnRlbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUFsQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUFwQjtBQUVBOzs7Ozs7O0FBS0EsU0FBU0UsbUJBQVQsQ0FBOEJDLEdBQTlCLEVBQW1DO0FBQ2pDLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQzVDUCxNQUFFLENBQUNRLFFBQUgsQ0FBWU4sSUFBSSxDQUFDSSxPQUFMLENBQWFGLEdBQWIsQ0FBWixFQUErQixPQUEvQixFQUF3QyxVQUFVSyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDOUQsVUFBSSxDQUFDRCxHQUFMLEVBQVU7QUFDUkgsZUFBTyxDQUFDSSxPQUFELENBQVA7QUFDRCxPQUZELE1BRU87QUFDTEgsY0FBTSxDQUFDRSxHQUFELENBQU47QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQVJNLENBQVA7QUFTRDs7QUFDREUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxtQkFBakIiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIGxvY2FsIHVybFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYW5pZmVzdExvY2FsTG9hZGVyICh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUodXJsKSwgXCJ1dGYtOFwiLCBmdW5jdGlvbiAoZXJyLCBjb250ZW50KSB7XG4gICAgICBpZiAoIWVycikge1xuICAgICAgICByZXNvbHZlKGNvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBNYW5pZmVzdExvY2FsTG9hZGVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar ManifestXML_1 = __webpack_require__(49);\n\nvar StreamIndexNode_1 = __webpack_require__(53);\n\nManifestXML_1.ManifestXML.prototype.getManifestType = function (xml) {\n  return xml.getElementsByTagName('SmoothStreamingMedia').length !== 0 ? 'MSS' : 'DASH';\n};\n\nManifestXML_1.ManifestXML.prototype.getAdaptationSetNodeName = function () {\n  return this.manifestType === 'MSS' ? 'StreamIndex' : 'AdaptationSet';\n};\n\nManifestXML_1.ManifestXML.prototype.getRepresentationNodeName = function () {\n  return this.manifestType === 'MSS' ? 'QualityLevel' : 'Representation';\n};\n\nManifestXML_1.ManifestXML.prototype.parseStreams = function () {\n  var streams = this.xml.getElementsByTagName('StreamIndex');\n\n  for (var i = 0; i < streams.length; i++) {\n    var streamNode = new StreamIndexNode_1.StreamIndexNode(streams[i], this.xml);\n    this.adaptationSetColl[i] = streamNode;\n  }\n};\n\nManifestXML_1.ManifestXML.prototype._parseAdaptations = ManifestXML_1.ManifestXML.prototype.parseAdaptations;\n\nManifestXML_1.ManifestXML.prototype.parseAdaptations = function () {\n  // Manifest type detection\n  this.manifestType = this.getManifestType(this.xml);\n\n  if (this.manifestType === 'MSS') {\n    return this.parseStreams();\n  } else {\n    return this._parseAdaptations();\n  }\n};\n\nexports.ManifestXML = ManifestXML_1.ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21zcy9tYW5pZmVzdC14bWwuanM/NjVkMCJdLCJuYW1lcyI6WyJNYW5pZmVzdFhNTF8xIiwicmVxdWlyZSIsIlN0cmVhbUluZGV4Tm9kZV8xIiwiTWFuaWZlc3RYTUwiLCJwcm90b3R5cGUiLCJnZXRNYW5pZmVzdFR5cGUiLCJ4bWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsImdldEFkYXB0YXRpb25TZXROb2RlTmFtZSIsIm1hbmlmZXN0VHlwZSIsImdldFJlcHJlc2VudGF0aW9uTm9kZU5hbWUiLCJwYXJzZVN0cmVhbXMiLCJzdHJlYW1zIiwiaSIsInN0cmVhbU5vZGUiLCJTdHJlYW1JbmRleE5vZGUiLCJhZGFwdGF0aW9uU2V0Q29sbCIsIl9wYXJzZUFkYXB0YXRpb25zIiwicGFyc2VBZGFwdGF0aW9ucyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQTdCOztBQUNBLElBQU1DLGlCQUFpQixHQUFHRCxtQkFBTyxDQUFDLEVBQUQsQ0FBakM7O0FBR0FELGFBQWEsQ0FBQ0csV0FBZCxDQUEwQkMsU0FBMUIsQ0FBb0NDLGVBQXBDLEdBQXNELFVBQVVDLEdBQVYsRUFBZTtBQUNuRSxTQUFPQSxHQUFHLENBQUNDLG9CQUFKLENBQXlCLHNCQUF6QixFQUFpREMsTUFBakQsS0FBNEQsQ0FBNUQsR0FBZ0UsS0FBaEUsR0FBd0UsTUFBL0U7QUFDRCxDQUZEOztBQUlBUixhQUFhLENBQUNHLFdBQWQsQ0FBMEJDLFNBQTFCLENBQW9DSyx3QkFBcEMsR0FBK0QsWUFBWTtBQUN6RSxTQUFRLEtBQUtDLFlBQUwsS0FBc0IsS0FBdkIsR0FBZ0MsYUFBaEMsR0FBZ0QsZUFBdkQ7QUFDRCxDQUZEOztBQUdBVixhQUFhLENBQUNHLFdBQWQsQ0FBMEJDLFNBQTFCLENBQW9DTyx5QkFBcEMsR0FBZ0UsWUFBWTtBQUMxRSxTQUFRLEtBQUtELFlBQUwsS0FBc0IsS0FBdkIsR0FBZ0MsY0FBaEMsR0FBaUQsZ0JBQXhEO0FBQ0QsQ0FGRDs7QUFHQVYsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ1EsWUFBcEMsR0FBbUQsWUFBWTtBQUM3RCxNQUFNQyxPQUFPLEdBQUcsS0FBS1AsR0FBTCxDQUFTQyxvQkFBVCxDQUE4QixhQUE5QixDQUFoQjs7QUFDQSxPQUFLLElBQUlPLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE9BQU8sQ0FBQ0wsTUFBNUIsRUFBb0NNLENBQUMsRUFBckMsRUFBeUM7QUFDdkMsUUFBTUMsVUFBVSxHQUFHLElBQUliLGlCQUFpQixDQUFDYyxlQUF0QixDQUFzQ0gsT0FBTyxDQUFDQyxDQUFELENBQTdDLEVBQWtELEtBQUtSLEdBQXZELENBQW5CO0FBQ0EsU0FBS1csaUJBQUwsQ0FBdUJILENBQXZCLElBQTRCQyxVQUE1QjtBQUNEO0FBQ0YsQ0FORDs7QUFPQWYsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ2MsaUJBQXBDLEdBQXdEbEIsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ2UsZ0JBQTVGOztBQUNBbkIsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ2UsZ0JBQXBDLEdBQXVELFlBQVk7QUFDakU7QUFDQSxPQUFLVCxZQUFMLEdBQW9CLEtBQUtMLGVBQUwsQ0FBcUIsS0FBS0MsR0FBMUIsQ0FBcEI7O0FBRUEsTUFBSSxLQUFLSSxZQUFMLEtBQXNCLEtBQTFCLEVBQWlDO0FBQy9CLFdBQU8sS0FBS0UsWUFBTCxFQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBTyxLQUFLTSxpQkFBTCxFQUFQO0FBQ0Q7QUFDRixDQVREOztBQVdBRSxPQUFPLENBQUNqQixXQUFSLEdBQXNCSCxhQUFhLENBQUNHLFdBQXBDIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBNYW5pZmVzdFhNTF8xID0gcmVxdWlyZSgnLi4vbWFuaWZlc3QteG1sJyk7XG5jb25zdCBTdHJlYW1JbmRleE5vZGVfMSA9IHJlcXVpcmUoJy4vc3RyZWFtSW5kZXgtbm9kZScpO1xuXG5cbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLmdldE1hbmlmZXN0VHlwZSA9IGZ1bmN0aW9uICh4bWwpIHtcbiAgcmV0dXJuIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU21vb3RoU3RyZWFtaW5nTWVkaWEnKS5sZW5ndGggIT09IDAgPyAnTVNTJyA6ICdEQVNIJztcbn07XG5cbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLmdldEFkYXB0YXRpb25TZXROb2RlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpID8gJ1N0cmVhbUluZGV4JyA6ICdBZGFwdGF0aW9uU2V0Jztcbn07XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRSZXByZXNlbnRhdGlvbk5vZGVOYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKHRoaXMubWFuaWZlc3RUeXBlID09PSAnTVNTJykgPyAnUXVhbGl0eUxldmVsJyA6ICdSZXByZXNlbnRhdGlvbic7XG59O1xuTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUucGFyc2VTdHJlYW1zID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzdHJlYW1zID0gdGhpcy54bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1N0cmVhbUluZGV4Jyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyZWFtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0cmVhbU5vZGUgPSBuZXcgU3RyZWFtSW5kZXhOb2RlXzEuU3RyZWFtSW5kZXhOb2RlKHN0cmVhbXNbaV0sIHRoaXMueG1sKTtcbiAgICB0aGlzLmFkYXB0YXRpb25TZXRDb2xsW2ldID0gc3RyZWFtTm9kZTtcbiAgfVxufTtcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLl9wYXJzZUFkYXB0YXRpb25zID0gTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUucGFyc2VBZGFwdGF0aW9ucztcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlQWRhcHRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE1hbmlmZXN0IHR5cGUgZGV0ZWN0aW9uXG4gIHRoaXMubWFuaWZlc3RUeXBlID0gdGhpcy5nZXRNYW5pZmVzdFR5cGUodGhpcy54bWwpO1xuXG4gIGlmICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmVhbXMoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VBZGFwdGF0aW9ucygpO1xuICB9XG59O1xuXG5leHBvcnRzLk1hbmlmZXN0WE1MID0gTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar AdaptationSetNode_1 = __webpack_require__(21);\n\nvar DOMParser = __webpack_require__(10).DOMParser;\n\nvar ManifestXML = function () {\n  function ManifestXML() {}\n\n  ManifestXML.prototype.parse = function (str, onSuccess, onError) {\n    var parser;\n\n    if (typeof onSuccess === \"function\" && typeof onError === \"function\") {\n      parser = new DOMParser({\n        errorHandler: {\n          warning: function warning() {},\n          error: onError,\n          fatalError: onError\n        }\n      });\n    } else {\n      parser = new DOMParser();\n    }\n\n    this.adaptationSetColl = [];\n    this.xml = parser.parseFromString(str, \"application/xml\");\n    this.parseAdaptations();\n\n    if (typeof onSuccess === \"function\") {\n      onSuccess();\n    }\n  };\n\n  ManifestXML.prototype.getAdaptationSetNodeName = function () {\n    return 'AdaptationSet';\n  };\n\n  ManifestXML.prototype.getRepresentationNodeName = function () {\n    return 'Representation';\n  };\n\n  ManifestXML.prototype.parseAdaptations = function () {\n    var adaptations = this.xml.getElementsByTagName('AdaptationSet');\n\n    for (var i = 0; i < adaptations.length; i++) {\n      var adaptNode = new AdaptationSetNode_1.AdaptationSetNode(adaptations[i], this.xml);\n      this.adaptationSetColl[i] = adaptNode;\n    }\n  };\n\n  ManifestXML.prototype.getVideoAdaptation = function () {\n    return this.getAdaptations('video');\n  };\n\n  ManifestXML.prototype.getAudioAdaptation = function () {\n    return this.getAdaptations('audio');\n  };\n\n  ManifestXML.prototype.getTextAdaptation = function () {\n    return this.getAdaptations('text');\n  };\n\n  ManifestXML.prototype.getManifestXML = function () {\n    return this.xml;\n  };\n\n  ManifestXML.prototype.getAdaptations = function (which) {\n    var adaptations = this.adaptationSetColl.map(function (item) {\n      return item;\n    }).filter(function (item) {\n      if (item.isMimeType(which) || item.isContentType(which)) {\n        return true;\n      }\n    });\n    return adaptations;\n  };\n\n  ManifestXML.cloneXML = function (xml) {\n    var newDocument = xml.implementation.createDocument(xml.namespaceURI, null, null);\n    var newNode = newDocument.importNode(xml.documentElement, true);\n    newDocument.appendChild(newNode);\n    return newDocument;\n  };\n\n  ManifestXML.prototype.removeNode = function () {\n    var self = this;\n    var representationCollection = this.xml.documentElement.getElementsByTagName(this.getRepresentationNodeName());\n    var adaptationCollection = this.xml.documentElement.getElementsByTagName(this.getAdaptationSetNodeName());\n    var repArray = [];\n    var adaptationArray = [];\n\n    for (var i = 0; i < representationCollection.length; i++) {\n      repArray[i] = representationCollection[i];\n    }\n\n    repArray.forEach(function (item) {\n      var markForDownload = item.attributes.getNamedItem(\"markForDownload\") && item.attributes.getNamedItem(\"markForDownload\").value == 'true' ? true : false;\n\n      if (!markForDownload) {\n        item.parentNode.removeChild(item);\n      }\n\n      item.removeAttribute('markForDownload');\n    }, this);\n\n    for (var _i = 0; _i < adaptationCollection.length; _i++) {\n      adaptationArray[_i] = adaptationCollection[_i];\n    }\n\n    adaptationArray.forEach(function (item) {\n      if (!item.getElementsByTagName(self.getRepresentationNodeName()).length) {\n        item.parentNode.removeChild(item);\n      }\n    });\n  };\n\n  return ManifestXML;\n}();\n\nexports.ManifestXML = ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(17);\n\nvar SegmentInformation_1 = __webpack_require__(23);\n\nvar IsoDurationParser_1 = __webpack_require__(25);\n\nvar RepresentationNode = function (_super) {\n  __extends(RepresentationNode, _super);\n\n  function RepresentationNode(node, xml) {\n    _super.call(this, node, xml);\n\n    this.markNodeForDownload(false);\n  }\n\n  RepresentationNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(this.attributeList['mediaPresentationDuration']);\n    var segmentTimeline;\n    var timelineItemList;\n    var segmentUrlList;\n    var representationID = this.attributeList['id'];\n\n    if (this.segmentTemplate && this.segmentTemplate.hasChildNodes()) {\n      for (var i = 0; i < this.segmentTemplate.childNodes.length; i++) {\n        if (this.segmentTemplate.childNodes[i].nodeName == \"SegmentTimeline\") {\n          segmentTimeline = this.segmentTemplate.childNodes[i];\n        }\n      }\n    }\n\n    try {\n      timelineItemList = segmentTimeline.getElementsByTagName('S');\n    } catch (e) {}\n\n    try {\n      segmentUrlList = this.segmentList.getElementsByTagName('SegmentURL');\n    } catch (e) {}\n\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentInformation = new SegmentInformation_1.SegmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentBase, this.segmentTemplate, segmentTimeline, timelineItemList, this.segmentList, segmentUrlList);\n  };\n\n  RepresentationNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (list['mediaPresentationDuration'] !== undefined) {\n      list['durationInS'] = IsoDurationParser_1.IsoDurationParser.getDurationAsS(this.attributeList['mediaPresentationDuration']);\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n\n  RepresentationNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'];\n  };\n\n  RepresentationNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'] ? true : false;\n  };\n\n  RepresentationNode.prototype.getMediaUrlList = function () {\n    return this.segmentInformation.getMediaUrlList();\n  };\n\n  RepresentationNode.prototype.getRepresentationId = function () {\n    return this.id;\n  };\n\n  return RepresentationNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.RepresentationNode = RepresentationNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar ZeroPadding = function () {\n  function ZeroPadding() {}\n\n  ZeroPadding.addPadding = function (num, howManyZeros) {\n    var result;\n    var numArr = num.toString().split('');\n\n    while (numArr.length < howManyZeros) {\n      numArr.unshift('0');\n    }\n\n    result = numArr.join('');\n    return result;\n  };\n\n  ZeroPadding.getPaddingAmount = function (inputStr) {\n    var startIndex = inputStr.indexOf('%');\n    var endIndex = inputStr.lastIndexOf('$');\n    var numPadding = parseInt(inputStr.substring(startIndex + 1, endIndex - 1));\n    numPadding = isNaN(numPadding) ? 0 : numPadding;\n    return numPadding;\n  };\n\n  return ZeroPadding;\n}();\n\nexports.ZeroPadding = ZeroPadding;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC96ZXJvLXBhZGRpbmcuanM/ZDI5NCJdLCJuYW1lcyI6WyJaZXJvUGFkZGluZyIsImFkZFBhZGRpbmciLCJudW0iLCJob3dNYW55WmVyb3MiLCJyZXN1bHQiLCJudW1BcnIiLCJ0b1N0cmluZyIsInNwbGl0IiwibGVuZ3RoIiwidW5zaGlmdCIsImpvaW4iLCJnZXRQYWRkaW5nQW1vdW50IiwiaW5wdXRTdHIiLCJzdGFydEluZGV4IiwiaW5kZXhPZiIsImVuZEluZGV4IiwibGFzdEluZGV4T2YiLCJudW1QYWRkaW5nIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJpc05hTiIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLFdBQVcsR0FBSSxZQUFZO0FBQy9CLFdBQVNBLFdBQVQsR0FBd0IsQ0FDdkI7O0FBRURBLGFBQVcsQ0FBQ0MsVUFBWixHQUF5QixVQUFVQyxHQUFWLEVBQWVDLFlBQWYsRUFBNkI7QUFDcEQsUUFBSUMsTUFBSjtBQUNBLFFBQU1DLE1BQU0sR0FBR0gsR0FBRyxDQUFDSSxRQUFKLEdBQWVDLEtBQWYsQ0FBcUIsRUFBckIsQ0FBZjs7QUFDQSxXQUFPRixNQUFNLENBQUNHLE1BQVAsR0FBZ0JMLFlBQXZCLEVBQXFDO0FBQ25DRSxZQUFNLENBQUNJLE9BQVAsQ0FBZSxHQUFmO0FBQ0Q7O0FBQ0RMLFVBQU0sR0FBR0MsTUFBTSxDQUFDSyxJQUFQLENBQVksRUFBWixDQUFUO0FBQ0EsV0FBT04sTUFBUDtBQUNELEdBUkQ7O0FBU0FKLGFBQVcsQ0FBQ1csZ0JBQVosR0FBK0IsVUFBVUMsUUFBVixFQUFvQjtBQUNqRCxRQUFNQyxVQUFVLEdBQUdELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixHQUFqQixDQUFuQjtBQUNBLFFBQU1DLFFBQVEsR0FBR0gsUUFBUSxDQUFDSSxXQUFULENBQXFCLEdBQXJCLENBQWpCO0FBQ0EsUUFBSUMsVUFBVSxHQUFHQyxRQUFRLENBQUNOLFFBQVEsQ0FBQ08sU0FBVCxDQUFtQk4sVUFBVSxHQUFHLENBQWhDLEVBQW1DRSxRQUFRLEdBQUcsQ0FBOUMsQ0FBRCxDQUF6QjtBQUNBRSxjQUFVLEdBQUlHLEtBQUssQ0FBQ0gsVUFBRCxDQUFOLEdBQXNCLENBQXRCLEdBQTBCQSxVQUF2QztBQUNBLFdBQU9BLFVBQVA7QUFDRCxHQU5EOztBQU9BLFNBQU9qQixXQUFQO0FBQ0QsQ0FyQm9CLEVBQXJCOztBQXNCQXFCLE9BQU8sQ0FBQ3JCLFdBQVIsR0FBc0JBLFdBQXRCIiwiZmlsZSI6IjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBaZXJvUGFkZGluZyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFplcm9QYWRkaW5nICgpIHtcbiAgfVxuXG4gIFplcm9QYWRkaW5nLmFkZFBhZGRpbmcgPSBmdW5jdGlvbiAobnVtLCBob3dNYW55WmVyb3MpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGNvbnN0IG51bUFyciA9IG51bS50b1N0cmluZygpLnNwbGl0KCcnKTtcbiAgICB3aGlsZSAobnVtQXJyLmxlbmd0aCA8IGhvd01hbnlaZXJvcykge1xuICAgICAgbnVtQXJyLnVuc2hpZnQoJzAnKTtcbiAgICB9XG4gICAgcmVzdWx0ID0gbnVtQXJyLmpvaW4oJycpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIFplcm9QYWRkaW5nLmdldFBhZGRpbmdBbW91bnQgPSBmdW5jdGlvbiAoaW5wdXRTdHIpIHtcbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5wdXRTdHIuaW5kZXhPZignJScpO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gaW5wdXRTdHIubGFzdEluZGV4T2YoJyQnKTtcbiAgICBsZXQgbnVtUGFkZGluZyA9IHBhcnNlSW50KGlucHV0U3RyLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgZW5kSW5kZXggLSAxKSk7XG4gICAgbnVtUGFkZGluZyA9IChpc05hTihudW1QYWRkaW5nKSkgPyAwIDogbnVtUGFkZGluZztcbiAgICByZXR1cm4gbnVtUGFkZGluZztcbiAgfTtcbiAgcmV0dXJuIFplcm9QYWRkaW5nO1xufSgpKTtcbmV4cG9ydHMuWmVyb1BhZGRpbmcgPSBaZXJvUGFkZGluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__52__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtb21lbnQvbW9tZW50XCI/OTkzZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNTJfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(16);\n\nvar pssh = __webpack_require__(22);\n\nvar DOMParser = __webpack_require__(10).DOMParser;\n\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar PLAYREADY_SCHEME_ID_URI = 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95';\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AdaptationSetNode_1 = __webpack_require__(21);\n\nvar QualityLevelNode_1 = __webpack_require__(54);\n\nvar StreamIndexNode = function (_super) {\n  __extends(StreamIndexNode, _super);\n\n  function StreamIndexNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n\n  StreamIndexNode.prototype.parse = function () {\n    var qualityLevels = this.currentNode.getElementsByTagName('QualityLevel');\n\n    for (var i = 0; i < qualityLevels.length; i++) {\n      var qualityLevelNode = new QualityLevelNode_1.QualityLevelNode(qualityLevels[i], this.xml);\n      this.representationColl[i] = qualityLevelNode;\n\n      if (this.representationColl[0].hasMimeType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n      }\n\n      if (this.representationColl[0].hasContentType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getContentType();\n      }\n    }\n\n    var protection = this.xml.getElementsByTagName('Protection')[0];\n\n    if (protection !== undefined) {\n      var protectionHeader = protection.getElementsByTagName('ProtectionHeader')[0]; // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n      // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n\n      var psshPR = protectionHeader.firstChild.data.replace(/\\n|\\r/g, ''); // Get KID (in CENC format) from protection header\n\n      var KID = this.getKIDFromProtectionHeader(protectionHeader); // Create ContentProtection for PlayReady\n\n      var cpPR = {\n        schemeIdUri: PLAYREADY_SCHEME_ID_URI,\n        cencPSSH: psshPR\n      };\n      this.contentProtections.push(cpPR); // Create ContentProtection for Widevine (as a CENC protection)\n\n      var psshWV = pssh.createWidevinePssh(KID);\n      var cpWV = {\n        schemeIdUri: WIDEVINE_SCHEME_ID_URI,\n        cencPSSH: psshWV\n      };\n      this.contentProtections.push(cpWV);\n    }\n  };\n\n  StreamIndexNode.prototype.getKIDFromProtectionHeader = function (protectionHeader) {\n    var prHeader, wrmHeader, xmlReader, KID; // Get PlayReady header as byte array (base64 decoded)\n\n    prHeader = BASE64.toByteArray(protectionHeader.firstChild.data); // Get Right Management header (WRMHEADER) from PlayReady header\n\n    wrmHeader = this.getWRMHeaderFromPRHeader(prHeader); // Convert from multi-byte to unicode\n\n    wrmHeader = new Uint16Array(wrmHeader.buffer); // Convert to string\n\n    wrmHeader = String.fromCharCode.apply(null, wrmHeader); // Parse <WRMHeader> to get KID field value\n\n    xmlReader = new DOMParser().parseFromString(wrmHeader, 'application/xml');\n    KID = xmlReader.getElementsByTagName('KID')[0].textContent; // Get KID (base64 decoded) as byte array\n\n    KID = BASE64.toByteArray(KID); // Convert UUID from little-endian to big-endian\n\n    this.convertUuidEndianness(KID);\n    return KID;\n  };\n\n  StreamIndexNode.prototype.convertUuidEndianness = function (uuid) {\n    this.swapBytes(uuid, 0, 3);\n    this.swapBytes(uuid, 1, 2);\n    this.swapBytes(uuid, 4, 5);\n    this.swapBytes(uuid, 6, 7);\n  };\n\n  StreamIndexNode.prototype.swapBytes = function (bytes, pos1, pos2) {\n    var temp = bytes[pos1];\n    bytes[pos1] = bytes[pos2];\n    bytes[pos2] = temp;\n  };\n\n  StreamIndexNode.prototype.getWRMHeaderFromPRHeader = function getWRMHeaderFromPRHeader(prHeader) {\n    var recordType, recordLength, recordValue;\n    var i = 0; // Parse PlayReady header\n    // Length - 32 bits (LE format)\n    // var length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n\n    i += 4; // Record count - 16 bits (LE format)\n    // var recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n\n    i += 2; // Parse records\n\n    while (i < prHeader.length) {\n      // Record type - 16 bits (LE format)\n      recordType = prHeader[i + 1] * 256 + prHeader[i];\n      i += 2; // Check if Rights Management header (record type = 0x01)\n\n      if (recordType === 0x01) {\n        // Record length - 16 bits (LE format)\n        recordLength = prHeader[i + 1] * 256 + prHeader[i];\n        i += 2; // Record value => contains <WRMHEADER>\n\n        recordValue = new Uint8Array(recordLength);\n        recordValue.set(prHeader.subarray(i, i + recordLength));\n        return recordValue;\n      }\n    }\n\n    return null;\n  };\n\n  return StreamIndexNode;\n}(AdaptationSetNode_1.AdaptationSetNode);\n\nexports.StreamIndexNode = StreamIndexNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(17);\n\nvar IsoDurationParser_1 = __webpack_require__(25);\n\nvar FragmentInformation_1 = __webpack_require__(55);\n\nvar TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0;\n\nvar QualityLevelNode = function (_super) {\n  __extends(QualityLevelNode, _super);\n\n  function QualityLevelNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n\n  QualityLevelNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(parseFloat(this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT));\n    var representationID = this.attributeList['id'];\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentTemplate = this.mapMssSegmentTemplate();\n    this.segmentInformation = new FragmentInformation_1.FragmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentTemplate);\n  };\n\n  QualityLevelNode.prototype.mapMssSegmentTemplate = function () {\n    var segmentTemplate = {};\n    var mediaUrl;\n    mediaUrl = this.attributeList['Url'].replace('{bitrate}', '$Bandwidth$');\n    mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n    segmentTemplate.media = mediaUrl;\n    segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n    segmentTemplate.SegmentTimeline = this.mapMssSegmentTimeline();\n    return segmentTemplate;\n  };\n\n  QualityLevelNode.prototype.mapMssSegmentTimeline = function () {\n    var segmentTimeline = {};\n    var chunks = this.currentNode.parentNode.getElementsByTagName('c');\n    var segments = [];\n    var segment;\n    var prevSegment;\n    var tManifest;\n    var i;\n    var duration = 0;\n\n    for (i = 0; i < chunks.length; i++) {\n      segment = {}; // Get time 't' attribute value\n\n      tManifest = chunks[i].getAttribute('t'); // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n      // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n\n      segment.tManifest = parseFloat(tManifest);\n      segment.t = parseFloat(tManifest); // Get duration 'd' attribute value\n\n      segment.d = parseFloat(chunks[i].getAttribute('d')); // If 't' not defined for first segment then t=0\n\n      if (i === 0 && !segment.t) {\n        segment.t = 0;\n      }\n\n      if (i > 0) {\n        prevSegment = segments[segments.length - 1]; // Update previous segment duration if not defined\n\n        if (!prevSegment.d) {\n          if (prevSegment.tManifest) {\n            prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n          } else {\n            prevSegment.d = segment.t - prevSegment.t;\n          }\n        } // Set segment absolute timestamp if not set in manifest\n\n\n        if (!segment.t) {\n          if (prevSegment.tManifest) {\n            segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n            segment.t = parseFloat(segment.tManifest);\n          } else {\n            segment.t = prevSegment.t + prevSegment.d;\n          }\n        }\n      }\n\n      duration += segment.d; // Create new segment\n\n      segments.push(segment);\n    }\n\n    segmentTimeline.S = segments;\n    segmentTimeline.S_asArray = segments;\n    segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n    return segmentTimeline;\n  };\n\n  QualityLevelNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    var mimeTypeMap = {\n      'video': 'video/mp4',\n      'audio': 'audio/mp4',\n      'text': 'application/mp4'\n    };\n\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (list['Type'] !== undefined) {\n      list['contentType'] = list['Type'];\n      list['mimeType'] = mimeTypeMap[list['contentType']];\n      list['bandwidth'] = list['Bitrate'];\n      list['width'] = list['MaxWidth'];\n      list['height'] = list['MaxHeight'];\n      list.lang = list['Language'] || 'und';\n      var indexId = list['Name'] ? list['Name'] : list['Type']; // build id\n\n      list['id'] = indexId + '_' + list['Index'];\n\n      if (list['Type'] === 'audio') {\n        list.audioSamplingRate = list['SamplingRate'];\n      }\n    }\n\n    if (list['Duration'] !== undefined) {\n      list['durationInS'] = this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT;\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n\n  QualityLevelNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'];\n  };\n\n  QualityLevelNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] ? true : false;\n  };\n\n  QualityLevelNode.prototype.getContentType = function () {\n    return this.attributeList['contentType'];\n  };\n\n  QualityLevelNode.prototype.hasContentType = function () {\n    return this.attributeList['contentType'] ? true : false;\n  };\n\n  return QualityLevelNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.QualityLevelNode = QualityLevelNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar MediaUrl_1 = __webpack_require__(24);\n\nvar SegmentInformation_1 = __webpack_require__(23);\n\nvar FragmentInformation = function (_super) {\n  __extends(FragmentInformation, _super);\n\n  function FragmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentTemplate) {\n    _super.call(this, presentationDuration, bandwidth, baseUrl, representationID, mimeType);\n\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.media;\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n    }\n\n    if (this.segmentTemplate.media) {\n      this.timelineItemList = this.segmentTemplate.SegmentTimeline;\n    }\n\n    this.createFragmentUrlsFromTimeline(this.timelineItemList);\n  }\n\n  FragmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    for (var i = 0; i < segmentNodes.S.length; i++) {\n      var fragment = this.mediaTemplate;\n      fragment = this.replace$Time$(fragment, segmentNodes.S[i].t);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  return FragmentInformation;\n}(SegmentInformation_1.SegmentInformation);\n\nexports.FragmentInformation = FragmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21zcy9mcmFnbWVudC1pbmZvcm1hdGlvbi5qcz9iODE0Il0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIk1lZGlhVXJsXzEiLCJyZXF1aXJlIiwiU2VnbWVudEluZm9ybWF0aW9uXzEiLCJGcmFnbWVudEluZm9ybWF0aW9uIiwiX3N1cGVyIiwicHJlc2VudGF0aW9uRHVyYXRpb24iLCJiYW5kd2lkdGgiLCJiYXNlVXJsIiwicmVwcmVzZW50YXRpb25JRCIsIm1pbWVUeXBlIiwic2VnbWVudFRlbXBsYXRlIiwiY2FsbCIsIm1lZGlhVGVtcGxhdGUiLCJtZWRpYSIsInJlcGxhY2UkQmFuZHdpZHRoJCIsInRpbWVsaW5lSXRlbUxpc3QiLCJTZWdtZW50VGltZWxpbmUiLCJjcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUiLCJzZWdtZW50Tm9kZXMiLCJpIiwiUyIsImxlbmd0aCIsImZyYWdtZW50IiwicmVwbGFjZSRUaW1lJCIsInQiLCJtZWRpYVVybHMiLCJwdXNoIiwiTWVkaWFVcmwiLCJTZWdtZW50SW5mb3JtYXRpb24iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxTQUFTLEdBQUksUUFBUSxLQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxPQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZCxFQUFpQjtBQUNmLFFBQUlBLENBQUMsQ0FBQ0UsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QjtBQUN2QkYsT0FBQyxDQUFDRSxDQUFELENBQUQsR0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQVI7QUFDRDtBQUNGOztBQUNELFdBQVNFLEVBQVQsR0FBZTtBQUNiLFNBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQ0Q7O0FBRURBLEdBQUMsQ0FBQ00sU0FBRixHQUFjTCxDQUFDLEtBQUssSUFBTixHQUFhTSxNQUFNLENBQUNDLE1BQVAsQ0FBY1AsQ0FBZCxDQUFiLElBQWlDRyxFQUFFLENBQUNFLFNBQUgsR0FBZUwsQ0FBQyxDQUFDSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDRCxDQVhMOztBQVlBLElBQU1LLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQTFCOztBQUNBLElBQU1DLG9CQUFvQixHQUFHRCxtQkFBTyxDQUFDLEVBQUQsQ0FBcEM7O0FBQ0EsSUFBTUUsbUJBQW1CLEdBQUksVUFBVUMsTUFBVixFQUFrQjtBQUM3Q2QsV0FBUyxDQUFDYSxtQkFBRCxFQUFzQkMsTUFBdEIsQ0FBVDs7QUFDQSxXQUFTRCxtQkFBVCxDQUE4QkUsb0JBQTlCLEVBQW9EQyxTQUFwRCxFQUErREMsT0FBL0QsRUFBd0VDLGdCQUF4RSxFQUEwRkMsUUFBMUYsRUFBb0dDLGVBQXBHLEVBQXFIO0FBQ25ITixVQUFNLENBQUNPLElBQVAsQ0FBWSxJQUFaLEVBQWtCTixvQkFBbEIsRUFBd0NDLFNBQXhDLEVBQW1EQyxPQUFuRCxFQUE0REMsZ0JBQTVELEVBQThFQyxRQUE5RTs7QUFDQSxRQUFJQyxlQUFKLEVBQXFCO0FBQ25CLFdBQUtBLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsV0FBS0UsYUFBTCxHQUFxQixLQUFLRixlQUFMLENBQXFCRyxLQUExQztBQUNBLFdBQUtELGFBQUwsR0FBcUIsS0FBS0Usa0JBQUwsQ0FBd0IsS0FBS0YsYUFBN0IsRUFBNEMsS0FBS04sU0FBakQsQ0FBckI7QUFDRDs7QUFDRCxRQUFJLEtBQUtJLGVBQUwsQ0FBcUJHLEtBQXpCLEVBQWdDO0FBQzlCLFdBQUtFLGdCQUFMLEdBQXdCLEtBQUtMLGVBQUwsQ0FBcUJNLGVBQTdDO0FBQ0Q7O0FBQ0QsU0FBS0MsOEJBQUwsQ0FBb0MsS0FBS0YsZ0JBQXpDO0FBQ0Q7O0FBRURaLHFCQUFtQixDQUFDTixTQUFwQixDQUE4Qm9CLDhCQUE5QixHQUErRCxVQUFVQyxZQUFWLEVBQXdCO0FBQ3JGLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsWUFBWSxDQUFDRSxDQUFiLENBQWVDLE1BQW5DLEVBQTJDRixDQUFDLEVBQTVDLEVBQWdEO0FBQzlDLFVBQUlHLFFBQVEsR0FBRyxLQUFLVixhQUFwQjtBQUNBVSxjQUFRLEdBQUcsS0FBS0MsYUFBTCxDQUFtQkQsUUFBbkIsRUFBNkJKLFlBQVksQ0FBQ0UsQ0FBYixDQUFlRCxDQUFmLEVBQWtCSyxDQUEvQyxDQUFYO0FBRUEsV0FBS0MsU0FBTCxDQUFlQyxJQUFmLENBQW9CLElBQUkxQixVQUFVLENBQUMyQixRQUFmLENBQXdCLEtBQUtwQixPQUE3QixFQUFzQ2UsUUFBdEMsRUFBZ0QsS0FBS2IsUUFBckQsQ0FBcEI7QUFDRDtBQUNGLEdBUEQ7O0FBUUEsU0FBT04sbUJBQVA7QUFDRCxDQXhCNEIsQ0F3QjNCRCxvQkFBb0IsQ0FBQzBCLGtCQXhCTSxDQUE3Qjs7QUF5QkFDLE9BQU8sQ0FBQzFCLG1CQUFSLEdBQThCQSxtQkFBOUIiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgZm9yIChsZXQgcCBpbiBiKSB7XG4gICAgICAgIGlmIChiLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgZFtwXSA9IGJbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9fICgpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgICB9XG5cbiAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuY29uc3QgTWVkaWFVcmxfMSA9IHJlcXVpcmUoXCIuLi9tZWRpYS11cmxcIik7XG5jb25zdCBTZWdtZW50SW5mb3JtYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZWdtZW50LWluZm9ybWF0aW9uXCIpO1xuY29uc3QgRnJhZ21lbnRJbmZvcm1hdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhGcmFnbWVudEluZm9ybWF0aW9uLCBfc3VwZXIpO1xuICBmdW5jdGlvbiBGcmFnbWVudEluZm9ybWF0aW9uIChwcmVzZW50YXRpb25EdXJhdGlvbiwgYmFuZHdpZHRoLCBiYXNlVXJsLCByZXByZXNlbnRhdGlvbklELCBtaW1lVHlwZSwgc2VnbWVudFRlbXBsYXRlKSB7XG4gICAgX3N1cGVyLmNhbGwodGhpcywgcHJlc2VudGF0aW9uRHVyYXRpb24sIGJhbmR3aWR0aCwgYmFzZVVybCwgcmVwcmVzZW50YXRpb25JRCwgbWltZVR5cGUpO1xuICAgIGlmIChzZWdtZW50VGVtcGxhdGUpIHtcbiAgICAgIHRoaXMuc2VnbWVudFRlbXBsYXRlID0gc2VnbWVudFRlbXBsYXRlO1xuICAgICAgdGhpcy5tZWRpYVRlbXBsYXRlID0gdGhpcy5zZWdtZW50VGVtcGxhdGUubWVkaWE7XG4gICAgICB0aGlzLm1lZGlhVGVtcGxhdGUgPSB0aGlzLnJlcGxhY2UkQmFuZHdpZHRoJCh0aGlzLm1lZGlhVGVtcGxhdGUsIHRoaXMuYmFuZHdpZHRoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VnbWVudFRlbXBsYXRlLm1lZGlhKSB7XG4gICAgICB0aGlzLnRpbWVsaW5lSXRlbUxpc3QgPSB0aGlzLnNlZ21lbnRUZW1wbGF0ZS5TZWdtZW50VGltZWxpbmU7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlRnJhZ21lbnRVcmxzRnJvbVRpbWVsaW5lKHRoaXMudGltZWxpbmVJdGVtTGlzdCk7XG4gIH1cblxuICBGcmFnbWVudEluZm9ybWF0aW9uLnByb3RvdHlwZS5jcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUgPSBmdW5jdGlvbiAoc2VnbWVudE5vZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50Tm9kZXMuUy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5tZWRpYVRlbXBsYXRlO1xuICAgICAgZnJhZ21lbnQgPSB0aGlzLnJlcGxhY2UkVGltZSQoZnJhZ21lbnQsIHNlZ21lbnROb2Rlcy5TW2ldLnQpO1xuXG4gICAgICB0aGlzLm1lZGlhVXJscy5wdXNoKG5ldyBNZWRpYVVybF8xLk1lZGlhVXJsKHRoaXMuYmFzZVVybCwgZnJhZ21lbnQsIHRoaXMubWltZVR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBGcmFnbWVudEluZm9ybWF0aW9uO1xufShTZWdtZW50SW5mb3JtYXRpb25fMS5TZWdtZW50SW5mb3JtYXRpb24pKTtcbmV4cG9ydHMuRnJhZ21lbnRJbmZvcm1hdGlvbiA9IEZyYWdtZW50SW5mb3JtYXRpb247Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar AllAdaptationSets = function () {\n  function AllAdaptationSets(vid, audio, text) {\n    this.videoAdaptation = vid;\n\n    if (audio) {\n      this.audioAdaptation = audio;\n    }\n\n    if (text) {\n      this.textAdaptation = text;\n    }\n  }\n\n  return AllAdaptationSets;\n}();\n\nexports.AllAdaptationSets = AllAdaptationSets;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2FsbC1hZGFwdGF0aW9uLXNldHMuanM/NTdlYyJdLCJuYW1lcyI6WyJBbGxBZGFwdGF0aW9uU2V0cyIsInZpZCIsImF1ZGlvIiwidGV4dCIsInZpZGVvQWRhcHRhdGlvbiIsImF1ZGlvQWRhcHRhdGlvbiIsInRleHRBZGFwdGF0aW9uIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsaUJBQWlCLEdBQUksWUFBWTtBQUNyQyxXQUFTQSxpQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUNDLEtBQWpDLEVBQXdDQyxJQUF4QyxFQUE4QztBQUM1QyxTQUFLQyxlQUFMLEdBQXVCSCxHQUF2Qjs7QUFDQSxRQUFJQyxLQUFKLEVBQVc7QUFDVCxXQUFLRyxlQUFMLEdBQXVCSCxLQUF2QjtBQUNEOztBQUNELFFBQUlDLElBQUosRUFBVTtBQUNSLFdBQUtHLGNBQUwsR0FBc0JILElBQXRCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPSCxpQkFBUDtBQUNELENBWjBCLEVBQTNCOztBQWFBTyxPQUFPLENBQUNQLGlCQUFSLEdBQTRCQSxpQkFBNUIiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEFsbEFkYXB0YXRpb25TZXRzID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQWxsQWRhcHRhdGlvblNldHMgKHZpZCwgYXVkaW8sIHRleHQpIHtcbiAgICB0aGlzLnZpZGVvQWRhcHRhdGlvbiA9IHZpZDtcbiAgICBpZiAoYXVkaW8pIHtcbiAgICAgIHRoaXMuYXVkaW9BZGFwdGF0aW9uID0gYXVkaW87XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnRleHRBZGFwdGF0aW9uID0gdGV4dDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQWxsQWRhcHRhdGlvblNldHM7XG59KCkpO1xuZXhwb3J0cy5BbGxBZGFwdGF0aW9uU2V0cyA9IEFsbEFkYXB0YXRpb25TZXRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(26);\n\nvar VideoRepresentation = __webpack_require__(27);\n\nvar TextRepresentation = __webpack_require__(28);\n\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n    }\n  }\n\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2pzb24tcmVwcmVzZW50YXRpb24uanM/MWM4OCJdLCJuYW1lcyI6WyJBdWRpb1JlcHJlc2VudGF0aW9uIiwicmVxdWlyZSIsIlZpZGVvUmVwcmVzZW50YXRpb24iLCJUZXh0UmVwcmVzZW50YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwianNvblJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpb25zIiwicmVwck9iaiIsImkiLCJqIiwibGVuZ3RoIiwiY29scyIsInJlcHJlc2VudGF0aW9uQ29sbCIsImsiLCJsIiwiYXR0ciIsImF0dHJpYnV0ZUxpc3QiLCJjb250ZW50VHlwZSIsIm1pbWVUeXBlIiwiaW5kZXhPZiIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLG1CQUFtQixHQUFHQyxtQkFBTyxDQUFDLEVBQUQsQ0FBbkM7O0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUdELG1CQUFPLENBQUMsRUFBRCxDQUFuQzs7QUFDQSxJQUFNRSxrQkFBa0IsR0FBR0YsbUJBQU8sQ0FBQyxFQUFELENBQWxDOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0Msa0JBQVQsQ0FBNkJDLGVBQTdCLEVBQThDO0FBQzdELE1BQUlDLE9BQU8sR0FBRyxFQUFkOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSCxlQUFlLENBQUNJLE1BQXBDLEVBQTRDRixDQUFDLEdBQUdDLENBQWhELEVBQW1ERCxDQUFDLEVBQXBELEVBQXdEO0FBQ3RELFFBQU1HLElBQUksR0FBR0wsZUFBZSxDQUFDRSxDQUFELENBQWYsQ0FBbUJJLGtCQUFoQzs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0gsSUFBSSxDQUFDRCxNQUF6QixFQUFpQ0csQ0FBQyxHQUFHQyxDQUFyQyxFQUF3Q0QsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxVQUFNRSxJQUFJLEdBQUdKLElBQUksQ0FBQ0UsQ0FBRCxDQUFKLENBQVFHLGFBQXJCO0FBQ0EsVUFBSUMsV0FBVyxHQUFHRixJQUFJLENBQUNFLFdBQUwsSUFBb0JGLElBQUksQ0FBQ0csUUFBM0M7O0FBQ0EsVUFBSUQsV0FBVyxDQUFDRSxPQUFaLENBQW9CLE9BQXBCLEtBQWdDLENBQXBDLEVBQXVDO0FBQ3JDRixtQkFBVyxHQUFHLE9BQWQ7QUFDRCxPQUZELE1BRU8sSUFBSUEsV0FBVyxDQUFDRSxPQUFaLENBQW9CLE9BQXBCLEtBQWdDLENBQXBDLEVBQXVDO0FBQzVDRixtQkFBVyxHQUFHLE9BQWQ7QUFDRCxPQUZNLE1BRUE7QUFDTEEsbUJBQVcsR0FBRyxNQUFkO0FBQ0Q7O0FBQ0QsY0FBUUEsV0FBUjtBQUNFLGFBQUssT0FBTDtBQUNFVixpQkFBTyxDQUFDYSxJQUFSLENBQWEsSUFBSXJCLG1CQUFKLENBQXdCZ0IsSUFBeEIsQ0FBYjtBQUNBOztBQUVGLGFBQUssT0FBTDtBQUNFUixpQkFBTyxDQUFDYSxJQUFSLENBQWEsSUFBSW5CLG1CQUFKLENBQXdCYyxJQUF4QixDQUFiO0FBQ0E7O0FBRUY7QUFDRVIsaUJBQU8sQ0FBQ2EsSUFBUixDQUFhLElBQUlsQixrQkFBSixDQUF1QmEsSUFBdkIsQ0FBYjtBQVZKO0FBWUQ7QUFDRjs7QUFDRCxTQUFPUixPQUFQO0FBQ0QsQ0E3QkQiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEF1ZGlvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi9hdWRpby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFZpZGVvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi92aWRlby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFRleHRSZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3RleHQtcmVwcmVzZW50YXRpb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ganNvblJlcHJlc2VudGF0aW9uIChyZXByZXNlbnRhdGlvbnMpIHtcbiAgbGV0IHJlcHJPYmogPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSByZXByZXNlbnRhdGlvbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgY29scyA9IHJlcHJlc2VudGF0aW9uc1tpXS5yZXByZXNlbnRhdGlvbkNvbGw7XG4gICAgZm9yIChsZXQgayA9IDAsIGwgPSBjb2xzLmxlbmd0aDsgayA8IGw7IGsrKykge1xuICAgICAgY29uc3QgYXR0ciA9IGNvbHNba10uYXR0cmlidXRlTGlzdDtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IGF0dHIuY29udGVudFR5cGUgfHwgYXR0ci5taW1lVHlwZTtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwidmlkZW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidmlkZW9cIjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcImF1ZGlvXCIpID49IDApIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcImF1ZGlvXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidGV4dFwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IEF1ZGlvUmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVmlkZW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IFRleHRSZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXByT2JqO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(26);\n\nvar VideoRepresentation = __webpack_require__(27);\n\nvar TextRepresentation = __webpack_require__(28);\n\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n\n      reprObj[k].protections = representations[i].contentProtections.slice();\n    }\n  }\n\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2pzb24tcmVwcmVzZW50YXRpb24td2l0aC1wcm90ZWN0aW9uLmpzPzUxNGIiXSwibmFtZXMiOlsiQXVkaW9SZXByZXNlbnRhdGlvbiIsInJlcXVpcmUiLCJWaWRlb1JlcHJlc2VudGF0aW9uIiwiVGV4dFJlcHJlc2VudGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImpzb25SZXByZXNlbnRhdGlvbiIsInJlcHJlc2VudGF0aW9ucyIsInJlcHJPYmoiLCJpIiwiaiIsImxlbmd0aCIsImNvbHMiLCJyZXByZXNlbnRhdGlvbkNvbGwiLCJrIiwibCIsImF0dHIiLCJhdHRyaWJ1dGVMaXN0IiwiY29udGVudFR5cGUiLCJtaW1lVHlwZSIsImluZGV4T2YiLCJwdXNoIiwicHJvdGVjdGlvbnMiLCJjb250ZW50UHJvdGVjdGlvbnMiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsbUJBQW1CLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUFuQzs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyxFQUFELENBQW5DOztBQUNBLElBQU1FLGtCQUFrQixHQUFHRixtQkFBTyxDQUFDLEVBQUQsQ0FBbEM7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxrQkFBVCxDQUE2QkMsZUFBN0IsRUFBOEM7QUFDN0QsTUFBSUMsT0FBTyxHQUFHLEVBQWQ7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdILGVBQWUsQ0FBQ0ksTUFBcEMsRUFBNENGLENBQUMsR0FBR0MsQ0FBaEQsRUFBbURELENBQUMsRUFBcEQsRUFBd0Q7QUFDdEQsUUFBTUcsSUFBSSxHQUFHTCxlQUFlLENBQUNFLENBQUQsQ0FBZixDQUFtQkksa0JBQWhDOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSCxJQUFJLENBQUNELE1BQXpCLEVBQWlDRyxDQUFDLEdBQUdDLENBQXJDLEVBQXdDRCxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLFVBQU1FLElBQUksR0FBR0osSUFBSSxDQUFDRSxDQUFELENBQUosQ0FBUUcsYUFBckI7QUFDQSxVQUFJQyxXQUFXLEdBQUdGLElBQUksQ0FBQ0UsV0FBTCxJQUFvQkYsSUFBSSxDQUFDRyxRQUEzQzs7QUFDQSxVQUFJRCxXQUFXLENBQUNFLE9BQVosQ0FBb0IsT0FBcEIsS0FBZ0MsQ0FBcEMsRUFBdUM7QUFDckNGLG1CQUFXLEdBQUcsT0FBZDtBQUNELE9BRkQsTUFFTyxJQUFJQSxXQUFXLENBQUNFLE9BQVosQ0FBb0IsT0FBcEIsS0FBZ0MsQ0FBcEMsRUFBdUM7QUFDNUNGLG1CQUFXLEdBQUcsT0FBZDtBQUNELE9BRk0sTUFFQTtBQUNMQSxtQkFBVyxHQUFHLE1BQWQ7QUFDRDs7QUFDRCxjQUFRQSxXQUFSO0FBQ0UsYUFBSyxPQUFMO0FBQ0VWLGlCQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJckIsbUJBQUosQ0FBd0JnQixJQUF4QixDQUFiO0FBQ0E7O0FBRUYsYUFBSyxPQUFMO0FBQ0VSLGlCQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJbkIsbUJBQUosQ0FBd0JjLElBQXhCLENBQWI7QUFDQTs7QUFFRjtBQUNFUixpQkFBTyxDQUFDYSxJQUFSLENBQWEsSUFBSWxCLGtCQUFKLENBQXVCYSxJQUF2QixDQUFiO0FBVko7O0FBWUFSLGFBQU8sQ0FBQ00sQ0FBRCxDQUFQLENBQVdRLFdBQVgsR0FBeUJmLGVBQWUsQ0FBQ0UsQ0FBRCxDQUFmLENBQW1CYyxrQkFBbkIsQ0FBc0NDLEtBQXRDLEVBQXpCO0FBQ0Q7QUFFRjs7QUFDRCxTQUFPaEIsT0FBUDtBQUNELENBL0JEIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBBdWRpb1JlcHJlc2VudGF0aW9uID0gcmVxdWlyZShcIi4uL2pzb24vYXVkaW8tcmVwcmVzZW50YXRpb25cIik7XG5jb25zdCBWaWRlb1JlcHJlc2VudGF0aW9uID0gcmVxdWlyZShcIi4uL2pzb24vdmlkZW8tcmVwcmVzZW50YXRpb25cIik7XG5jb25zdCBUZXh0UmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi90ZXh0LXJlcHJlc2VudGF0aW9uXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGpzb25SZXByZXNlbnRhdGlvbiAocmVwcmVzZW50YXRpb25zKSB7XG4gIGxldCByZXByT2JqID0gW107XG4gIGZvciAobGV0IGkgPSAwLCBqID0gcmVwcmVzZW50YXRpb25zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnN0IGNvbHMgPSByZXByZXNlbnRhdGlvbnNbaV0ucmVwcmVzZW50YXRpb25Db2xsO1xuICAgIGZvciAobGV0IGsgPSAwLCBsID0gY29scy5sZW5ndGg7IGsgPCBsOyBrKyspIHtcbiAgICAgIGNvbnN0IGF0dHIgPSBjb2xzW2tdLmF0dHJpYnV0ZUxpc3Q7XG4gICAgICBsZXQgY29udGVudFR5cGUgPSBhdHRyLmNvbnRlbnRUeXBlIHx8IGF0dHIubWltZVR5cGU7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcInZpZGVvXCIpID49IDApIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcInZpZGVvXCI7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCJhdWRpb1wiKSA+PSAwKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJhdWRpb1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcInRleHRcIjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY29udGVudFR5cGUpIHtcbiAgICAgICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICAgICAgcmVwck9iai5wdXNoKG5ldyBBdWRpb1JlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidmlkZW9cIjpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IFZpZGVvUmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVwck9iai5wdXNoKG5ldyBUZXh0UmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgfVxuICAgICAgcmVwck9ialtrXS5wcm90ZWN0aW9ucyA9IHJlcHJlc2VudGF0aW9uc1tpXS5jb250ZW50UHJvdGVjdGlvbnMuc2xpY2UoKTtcbiAgICB9XG5cbiAgfVxuICByZXR1cm4gcmVwck9iajtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__59__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1cmwtcGFyc2VcIj82NzRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjU5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181OV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction isUTF16(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, next, prev;\n\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n\n    if (b1 === 0xFF && // BOM (little-endian)\n    b2 === 0xFE) {\n      return true;\n    }\n\n    if (b1 === 0xFE && // BOM (big-endian)\n    b2 === 0xFF) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    next = data[pos + 1]; // BE\n\n    if (next !== void 0 && next > 0x00 && next < 0x80) {\n      return true;\n    }\n\n    prev = data[pos - 1]; // LE\n\n    if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  isUTF16: isUTF16\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9lbmNvZGluZy5qcz84ODFiIl0sIm5hbWVzIjpbImlzVVRGMTYiLCJkYXRhIiwiaSIsImxlbiIsImxlbmd0aCIsInBvcyIsImIxIiwiYjIiLCJuZXh0IiwicHJldiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLE9BQVQsQ0FBa0JDLElBQWxCLEVBQXdCO0FBQ3RCLE1BQUlDLENBQUMsR0FBRyxDQUFSO0FBQ0EsTUFBSUMsR0FBRyxHQUFHRixJQUFJLElBQUlBLElBQUksQ0FBQ0csTUFBdkI7QUFDQSxNQUFJQyxHQUFHLEdBQUcsSUFBVjtBQUNBLE1BQUlDLEVBQUosRUFBUUMsRUFBUixFQUFZQyxJQUFaLEVBQWtCQyxJQUFsQjs7QUFFQSxNQUFJTixHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQ1QsUUFBSUYsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLElBQWQsRUFBb0I7QUFDaEIsYUFBTyxLQUFQO0FBQ0g7QUFDSixHQUpELE1BSU87QUFDSEssTUFBRSxHQUFHTCxJQUFJLENBQUMsQ0FBRCxDQUFUO0FBQ0FNLE1BQUUsR0FBR04sSUFBSSxDQUFDLENBQUQsQ0FBVDs7QUFDQSxRQUFJSyxFQUFFLEtBQUssSUFBUCxJQUFlO0FBQ2ZDLE1BQUUsS0FBSyxJQURYLEVBQ2lCO0FBQ2IsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsUUFBSUQsRUFBRSxLQUFLLElBQVAsSUFBZTtBQUNmQyxNQUFFLEtBQUssSUFEWCxFQUNpQjtBQUNiLGFBQU8sSUFBUDtBQUNIOztBQUVELFdBQU9MLENBQUMsR0FBR0MsR0FBWCxFQUFnQkQsQ0FBQyxFQUFqQixFQUFxQjtBQUNqQixVQUFJRCxJQUFJLENBQUNDLENBQUQsQ0FBSixLQUFZLElBQWhCLEVBQXNCO0FBQ2xCRyxXQUFHLEdBQUdILENBQU47QUFDQTtBQUNILE9BSEQsTUFHTyxJQUFJRCxJQUFJLENBQUNDLENBQUQsQ0FBSixHQUFVLElBQWQsRUFBb0I7QUFDdkIsZUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxRQUFJRyxHQUFHLEtBQUssSUFBWixFQUFrQjtBQUNkLGFBQU8sS0FBUCxDQURjLENBQ0E7QUFDakI7O0FBRURHLFFBQUksR0FBR1AsSUFBSSxDQUFDSSxHQUFHLEdBQUcsQ0FBUCxDQUFYLENBekJHLENBeUJtQjs7QUFDdEIsUUFBSUcsSUFBSSxLQUFLLEtBQUssQ0FBZCxJQUFtQkEsSUFBSSxHQUFHLElBQTFCLElBQWtDQSxJQUFJLEdBQUcsSUFBN0MsRUFBbUQ7QUFDL0MsYUFBTyxJQUFQO0FBQ0g7O0FBRURDLFFBQUksR0FBR1IsSUFBSSxDQUFDSSxHQUFHLEdBQUcsQ0FBUCxDQUFYLENBOUJHLENBOEJtQjs7QUFDdEIsUUFBSUksSUFBSSxLQUFLLEtBQUssQ0FBZCxJQUFtQkEsSUFBSSxHQUFHLElBQTFCLElBQWtDQSxJQUFJLEdBQUcsSUFBN0MsRUFBbUQ7QUFDL0MsYUFBTyxJQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZYLFNBQU8sRUFBRUE7QUFETSxDQUFqQiIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBpc1VURjE2IChkYXRhKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGRhdGEgJiYgZGF0YS5sZW5ndGg7XG4gIHZhciBwb3MgPSBudWxsO1xuICB2YXIgYjEsIGIyLCBuZXh0LCBwcmV2O1xuXG4gIGlmIChsZW4gPCAyKSB7XG4gICAgICBpZiAoZGF0YVswXSA+IDB4RkYpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gIH0gZWxzZSB7XG4gICAgICBiMSA9IGRhdGFbMF07XG4gICAgICBiMiA9IGRhdGFbMV07XG4gICAgICBpZiAoYjEgPT09IDB4RkYgJiYgLy8gQk9NIChsaXR0bGUtZW5kaWFuKVxuICAgICAgICAgIGIyID09PSAweEZFKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYjEgPT09IDB4RkUgJiYgLy8gQk9NIChiaWctZW5kaWFuKVxuICAgICAgICAgIGIyID09PSAweEZGKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGF0YVtpXSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgICBwb3MgPSBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFbaV0gPiAweEZGKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3MgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vbiBBU0NJSVxuICAgICAgfVxuXG4gICAgICBuZXh0ID0gZGF0YVtwb3MgKyAxXTsgLy8gQkVcbiAgICAgIGlmIChuZXh0ICE9PSB2b2lkIDAgJiYgbmV4dCA+IDB4MDAgJiYgbmV4dCA8IDB4ODApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJldiA9IGRhdGFbcG9zIC0gMV07IC8vIExFXG4gICAgICBpZiAocHJldiAhPT0gdm9pZCAwICYmIHByZXYgPiAweDAwICYmIHByZXYgPCAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1VURjE2OiBpc1VURjE2XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction removeCharacter(text, pos) {\n  var newText;\n  newText = text.substr(0, pos - 1);\n\n  if (text.length > pos) {\n    newText += text.substr(pos, text.length);\n  }\n\n  return newText;\n}\n\nfunction getInvalidDiff(text, regex, openingTag, closingTag) {\n  var value = String(text);\n  var check = true;\n  var i = 1;\n\n  while (check) {\n    var valueToCheck = value.substr(0, i);\n\n    if (!valueToCheck.match(regex)) {\n      value = removeCharacter(value, i);\n    } else {\n      i++;\n    }\n\n    if (i > value.length) {\n      check = false;\n    }\n  }\n\n  var arrValue = value.split("");\n\n  for (var _i = 0, j = text.length; _i < j; _i++) {\n    if (_i >= arrValue.length || text[_i] !== arrValue[_i]) {\n      arrValue.splice(_i, 0, openingTag + text[_i] + closingTag);\n    }\n  }\n\n  return arrValue.join("");\n}\n\nmodule.exports = getInvalidDiff;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9nZXQtaW52YWxpZC1kaWZmLmpzP2JhMWQiXSwibmFtZXMiOlsicmVtb3ZlQ2hhcmFjdGVyIiwidGV4dCIsInBvcyIsIm5ld1RleHQiLCJzdWJzdHIiLCJsZW5ndGgiLCJnZXRJbnZhbGlkRGlmZiIsInJlZ2V4Iiwib3BlbmluZ1RhZyIsImNsb3NpbmdUYWciLCJ2YWx1ZSIsIlN0cmluZyIsImNoZWNrIiwiaSIsInZhbHVlVG9DaGVjayIsIm1hdGNoIiwiYXJyVmFsdWUiLCJzcGxpdCIsImoiLCJzcGxpY2UiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsU0FBU0EsZUFBVCxDQUEwQkMsSUFBMUIsRUFBZ0NDLEdBQWhDLEVBQXFDO0FBQ25DLE1BQUlDLE9BQUo7QUFDQUEsU0FBTyxHQUFHRixJQUFJLENBQUNHLE1BQUwsQ0FBWSxDQUFaLEVBQWVGLEdBQUcsR0FBRyxDQUFyQixDQUFWOztBQUNBLE1BQUlELElBQUksQ0FBQ0ksTUFBTCxHQUFjSCxHQUFsQixFQUF1QjtBQUNyQkMsV0FBTyxJQUFJRixJQUFJLENBQUNHLE1BQUwsQ0FBWUYsR0FBWixFQUFpQkQsSUFBSSxDQUFDSSxNQUF0QixDQUFYO0FBQ0Q7O0FBQ0QsU0FBT0YsT0FBUDtBQUNEOztBQUVELFNBQVNHLGNBQVQsQ0FBeUJMLElBQXpCLEVBQStCTSxLQUEvQixFQUFzQ0MsVUFBdEMsRUFBa0RDLFVBQWxELEVBQThEO0FBQzVELE1BQUlDLEtBQUssR0FBR0MsTUFBTSxDQUFDVixJQUFELENBQWxCO0FBQ0EsTUFBSVcsS0FBSyxHQUFHLElBQVo7QUFDQSxNQUFJQyxDQUFDLEdBQUcsQ0FBUjs7QUFDQSxTQUFPRCxLQUFQLEVBQWM7QUFDWixRQUFJRSxZQUFZLEdBQUdKLEtBQUssQ0FBQ04sTUFBTixDQUFhLENBQWIsRUFBZ0JTLENBQWhCLENBQW5COztBQUVBLFFBQUksQ0FBQ0MsWUFBWSxDQUFDQyxLQUFiLENBQW1CUixLQUFuQixDQUFMLEVBQWdDO0FBQzlCRyxXQUFLLEdBQUdWLGVBQWUsQ0FBQ1UsS0FBRCxFQUFRRyxDQUFSLENBQXZCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLE9BQUM7QUFDRjs7QUFDRCxRQUFJQSxDQUFDLEdBQUdILEtBQUssQ0FBQ0wsTUFBZCxFQUFzQjtBQUNwQk8sV0FBSyxHQUFHLEtBQVI7QUFDRDtBQUNGOztBQUNELE1BQUlJLFFBQVEsR0FBR04sS0FBSyxDQUFDTyxLQUFOLENBQVksRUFBWixDQUFmOztBQUNBLE9BQUssSUFBSUosRUFBQyxHQUFHLENBQVIsRUFBV0ssQ0FBQyxHQUFHakIsSUFBSSxDQUFDSSxNQUF6QixFQUFpQ1EsRUFBQyxHQUFHSyxDQUFyQyxFQUF3Q0wsRUFBQyxFQUF6QyxFQUE2QztBQUMzQyxRQUFJQSxFQUFDLElBQUlHLFFBQVEsQ0FBQ1gsTUFBZCxJQUF3QkosSUFBSSxDQUFDWSxFQUFELENBQUosS0FBWUcsUUFBUSxDQUFDSCxFQUFELENBQWhELEVBQXFEO0FBQ25ERyxjQUFRLENBQUNHLE1BQVQsQ0FBZ0JOLEVBQWhCLEVBQW1CLENBQW5CLEVBQXNCTCxVQUFVLEdBQUdQLElBQUksQ0FBQ1ksRUFBRCxDQUFqQixHQUF1QkosVUFBN0M7QUFDRDtBQUNGOztBQUNELFNBQU9PLFFBQVEsQ0FBQ0ksSUFBVCxDQUFjLEVBQWQsQ0FBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQixjQUFqQiIsImZpbGUiOiI2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiByZW1vdmVDaGFyYWN0ZXIgKHRleHQsIHBvcykge1xuICBsZXQgbmV3VGV4dDtcbiAgbmV3VGV4dCA9IHRleHQuc3Vic3RyKDAsIHBvcyAtIDEpO1xuICBpZiAodGV4dC5sZW5ndGggPiBwb3MpIHtcbiAgICBuZXdUZXh0ICs9IHRleHQuc3Vic3RyKHBvcywgdGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBuZXdUZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkRGlmZiAodGV4dCwgcmVnZXgsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcbiAgbGV0IHZhbHVlID0gU3RyaW5nKHRleHQpO1xuICBsZXQgY2hlY2sgPSB0cnVlO1xuICBsZXQgaSA9IDE7XG4gIHdoaWxlIChjaGVjaykge1xuICAgIGxldCB2YWx1ZVRvQ2hlY2sgPSB2YWx1ZS5zdWJzdHIoMCwgaSk7XG5cbiAgICBpZiAoIXZhbHVlVG9DaGVjay5tYXRjaChyZWdleCkpIHtcbiAgICAgIHZhbHVlID0gcmVtb3ZlQ2hhcmFjdGVyKHZhbHVlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoaSA+IHZhbHVlLmxlbmd0aCkge1xuICAgICAgY2hlY2sgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgbGV0IGFyclZhbHVlID0gdmFsdWUuc3BsaXQoXCJcIik7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gdGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAoaSA+PSBhcnJWYWx1ZS5sZW5ndGggfHwgdGV4dFtpXSAhPT0gYXJyVmFsdWVbaV0pIHtcbiAgICAgIGFyclZhbHVlLnNwbGljZShpLCAwLCBvcGVuaW5nVGFnICsgdGV4dFtpXSArIGNsb3NpbmdUYWcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyVmFsdWUuam9pbihcIlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJbnZhbGlkRGlmZjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (api, onSuccess\n/*, onFailure, target, manifestId */\n) {\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvY3JlYXRlUGVyc2lzdGVudC5qcz9lYWRkIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQztBQUFVO0FBQXpCLEVBQStEO0FBQzlFQSxXQUFTO0FBQ1YsQ0FGRCIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2VzcyAvKiwgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQgKi8pIHtcbiAgb25TdWNjZXNzKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestFolderInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvZm9sZGVyLWluZm8uanM/ZWNjMiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RGb2xkZXJJbmZvIiwiZXJyIiwiaW5mbyIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIklORk9fRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtBQUN4RUosS0FBRyxDQUFDSyxpQkFBSixDQUFzQkMscUJBQXRCLENBQTRDRixVQUE1QyxFQUF3RCxVQUFVRyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDM0UsUUFBSUQsR0FBSixFQUFTO0FBQ1BMLGVBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsV0FBN0MsRUFBMERSLFVBQTFELENBQUQsRUFBd0VHLEdBQXhFLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTE4sZUFBUyxDQUFDTyxJQUFELENBQVQ7QUFDRDtBQUNGLEdBTkQ7QUFPRCxDQVJEIiwiZmlsZSI6IjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEZvbGRlckluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5JTkZPX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uU3VjY2VzcyhpbmZvKTtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsList(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvZ2V0LWxpc3QuanM/M2ZiNSJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdHNMaXN0IiwiZXJyIiwibGlzdCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIkxJU1RfTE9BRElOR19GQUlMRUQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQztBQUNwREYsS0FBRyxDQUFDRyxpQkFBSixDQUFzQkMsZ0JBQXRCLENBQXVDLFVBQVVDLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtBQUMxRCxRQUFJRCxHQUFKLEVBQVM7QUFDUEgsZUFBUyxDQUFDTixXQUFXLENBQUNXLFFBQVosQ0FBcUJYLFdBQVcsQ0FBQ1ksQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMSixlQUFTLENBQUNLLElBQUQsQ0FBVDtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQiLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0KGZ1bmN0aW9uIChlcnIsIGxpc3QpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTElTVF9MT0FESU5HX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uU3VjY2VzcyhsaXN0KTtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, full) {\n  api.offlineController.getManifestsListWithInfo(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvZ2V0LWxpc3Qtd2l0aC1pbmZvLmpzP2Y0ODEiXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsImZ1bGwiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsImxpc3QiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJMSVNUX0xPQURJTkdfRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxJQUE3QyxFQUFtRDtBQUNsRUosS0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsd0JBQXRCLENBQStDLFVBQVVDLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtBQUNsRSxRQUFJRCxHQUFKLEVBQVM7QUFDUEwsZUFBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMTixlQUFTLENBQUNPLElBQUQsQ0FBVDtBQUNEO0FBQ0YsR0FORCxFQU1HSixJQU5IO0FBT0QsQ0FSRCIsImZpbGUiOiI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgZnVsbCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIGxpc3QpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTElTVF9MT0FESU5HX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uU3VjY2VzcyhsaXN0KTtcbiAgICB9XG4gIH0sIGZ1bGwpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    } else {\n      onSuccess({\n        offlineLink: api.getOfflinePath(manifestId) + info.manifest.name,\n        persistent: info.persistent\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvZ2V0LW9mZmxpbmUtbGluay5qcz9mNGMyIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiX0dFTkVSQUwiLCJvZmZsaW5lTGluayIsImdldE9mZmxpbmVQYXRoIiwibWFuaWZlc3QiLCJuYW1lIiwicGVyc2lzdGVudCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBM0I7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLFNBQWYsRUFBMEJDLFNBQTFCLEVBQXFDQyxNQUFyQyxFQUE2Q0MsVUFBN0MsRUFBeUQ7QUFDeEVKLEtBQUcsQ0FBQ0ssaUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDRixVQUF0QyxFQUFrRCxVQUFVRyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDckUsUUFBSUQsR0FBSixFQUFTO0FBQ1BMLGVBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsUUFBN0MsQ0FBRCxFQUF5REwsR0FBekQsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMTixlQUFTLENBQUM7QUFDUlksbUJBQVcsRUFBRWIsR0FBRyxDQUFDYyxjQUFKLENBQW1CVixVQUFuQixJQUFpQ0ksSUFBSSxDQUFDTyxRQUFMLENBQWNDLElBRHBEO0FBRVJDLGtCQUFVLEVBQUVULElBQUksQ0FBQ1M7QUFGVCxPQUFELENBQVQ7QUFJRDtBQUNGLEdBVEQ7QUFVRCxDQVhEIiwiZmlsZSI6IjY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3Moe1xuICAgICAgICBvZmZsaW5lTGluazogYXBpLmdldE9mZmxpbmVQYXRoKG1hbmlmZXN0SWQpICsgaW5mby5tYW5pZmVzdC5uYW1lLFxuICAgICAgICBwZXJzaXN0ZW50OiBpbmZvLnBlcnNpc3RlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, full) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvaW5mby5qcz82ZGI1Il0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZnVsbCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiaW5mbyIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIklORk9fRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsSUFBekQsRUFBK0Q7QUFDOUVMLEtBQUcsQ0FBQ00saUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDSCxVQUF0QyxFQUFrRCxVQUFVSSxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDckUsUUFBSUQsR0FBSixFQUFTO0FBQ1BOLGVBQVMsQ0FBQ04sV0FBVyxDQUFDYyxRQUFaLENBQXFCZCxXQUFXLENBQUNlLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsV0FBN0MsRUFBMERULFVBQTFELENBQUQsRUFBd0VJLEdBQXhFLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTFAsZUFBUyxDQUFDUSxJQUFELENBQVQ7QUFDRDtBQUNGLEdBTkQsRUFNR0osSUFOSDtBQU9ELENBUkQiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIGZ1bGwpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCBpbmZvKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLklORk9fRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25TdWNjZXNzKGluZm8pO1xuICAgIH1cbiAgfSwgZnVsbCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    api.downloadsController.removePromise(manifestId).then(function () {\n      api.offlineController.removePromise(manifestId).then(function () {\n        api.subscribersController.unsubscribe(manifestId);\n        api.manifestController.removeFromCache(manifestId);\n        onSuccess(info);\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n      });\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLmpzPzQzYTUiXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImluZm8iLCJkb3dubG9hZHNDb250cm9sbGVyIiwicmVtb3ZlUHJvbWlzZSIsInRoZW4iLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJ1bnN1YnNjcmliZSIsIm1hbmlmZXN0Q29udHJvbGxlciIsInJlbW92ZUZyb21DYWNoZSIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0ZBSUxFRCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBTUEsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBM0I7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLFNBQWYsRUFBMEJDLFNBQTFCLEVBQXFDQyxNQUFyQyxFQUE2Q0MsVUFBN0MsRUFBeUQ7QUFDeEVKLEtBQUcsQ0FBQ0ssaUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDRixVQUF0QyxFQUFrRCxVQUFVRyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDckVSLE9BQUcsQ0FBQ1MsbUJBQUosQ0FBd0JDLGFBQXhCLENBQXNDTixVQUF0QyxFQUNLTyxJQURMLENBQ1UsWUFBWTtBQUNoQlgsU0FBRyxDQUFDSyxpQkFBSixDQUFzQkssYUFBdEIsQ0FBb0NOLFVBQXBDLEVBQ0tPLElBREwsQ0FDVSxZQUFZO0FBQ2hCWCxXQUFHLENBQUNZLHFCQUFKLENBQTBCQyxXQUExQixDQUFzQ1QsVUFBdEM7QUFDQUosV0FBRyxDQUFDYyxrQkFBSixDQUF1QkMsZUFBdkIsQ0FBdUNYLFVBQXZDO0FBQ0FILGlCQUFTLENBQUNPLElBQUQsQ0FBVDtBQUNELE9BTEwsRUFLTyxVQUFVRCxHQUFWLEVBQWU7QUFDaEJMLGlCQUFTLENBQUNOLFdBQVcsQ0FBQ29CLFFBQVosQ0FBcUJwQixXQUFXLENBQUNxQixDQUFaLENBQWNDLFNBQWQsQ0FBd0JDLGVBQTdDLEVBQThEZixVQUE5RCxDQUFELEVBQTRFRyxHQUE1RSxDQUFUO0FBQ0QsT0FQTDtBQVFELEtBVkwsRUFVTyxVQUFVQSxHQUFWLEVBQWU7QUFDaEJMLGVBQVMsQ0FBQ04sV0FBVyxDQUFDb0IsUUFBWixDQUFxQnBCLFdBQVcsQ0FBQ3FCLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsZUFBN0MsRUFBOERmLFVBQTlELENBQUQsRUFBNEVHLEdBQTVFLENBQVQ7QUFDRCxLQVpMO0FBYUQsR0FkRDtBQWVELENBaEJEIiwiZmlsZSI6IjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnJlbW92ZVByb21pc2UobWFuaWZlc3RJZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFwaS5vZmZsaW5lQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWQpO1xuICAgICAgICAgICAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIucmVtb3ZlRnJvbUNhY2hlKG1hbmlmZXN0SWQpO1xuICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhpbmZvKTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, manifests) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n    } else {\n      var manifestIds = manifests.map(function (manifest) {\n        return manifest.manifestInfo.id;\n      });\n      var promises = [];\n\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        promises.push(api.downloadsController.removePromise(manifestIds[i]));\n      }\n\n      Promise.all(promises).then(function () {\n        api.offlineController.removeAllPromise().then(function () {\n          api.subscribersController.unsubscribeAll();\n          api.manifestController.removeFromCacheAll();\n          onSuccess(manifests);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLWFsbC5qcz9mNjVhIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsIm1hbmlmZXN0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0FMTF9GQUlMRUQiLCJtYW5pZmVzdElkcyIsIm1hcCIsIm1hbmlmZXN0IiwibWFuaWZlc3RJbmZvIiwiaWQiLCJwcm9taXNlcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJyZW1vdmVBbGxQcm9taXNlIiwic3Vic2NyaWJlcnNDb250cm9sbGVyIiwidW5zdWJzY3JpYmVBbGwiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJyZW1vdmVGcm9tQ2FjaGVBbGwiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQztBQUNwREYsS0FBRyxDQUFDRyxpQkFBSixDQUFzQkMsd0JBQXRCLENBQStDLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQjtBQUN2RSxRQUFJRCxHQUFKLEVBQVM7QUFDUEgsZUFBUyxDQUFDTixXQUFXLENBQUNXLFFBQVosQ0FBcUJYLFdBQVcsQ0FBQ1ksQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU1NLFdBQVcsR0FBR0wsU0FBUyxDQUFDTSxHQUFWLENBQWMsVUFBVUMsUUFBVixFQUFvQjtBQUNwRCxlQUFPQSxRQUFRLENBQUNDLFlBQVQsQ0FBc0JDLEVBQTdCO0FBQ0QsT0FGbUIsQ0FBcEI7QUFHQSxVQUFJQyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR1AsV0FBVyxDQUFDUSxNQUFoQyxFQUF3Q0YsQ0FBQyxHQUFHQyxDQUE1QyxFQUErQ0QsQ0FBQyxFQUFoRCxFQUFvRDtBQUNsREQsZ0JBQVEsQ0FBQ0ksSUFBVCxDQUFjcEIsR0FBRyxDQUFDcUIsbUJBQUosQ0FBd0JDLGFBQXhCLENBQXNDWCxXQUFXLENBQUNNLENBQUQsQ0FBakQsQ0FBZDtBQUNEOztBQUNETSxhQUFPLENBQUNDLEdBQVIsQ0FBWVIsUUFBWixFQUNLUyxJQURMLENBQ1UsWUFBWTtBQUNoQnpCLFdBQUcsQ0FBQ0csaUJBQUosQ0FBc0J1QixnQkFBdEIsR0FDS0QsSUFETCxDQUNVLFlBQVk7QUFDaEJ6QixhQUFHLENBQUMyQixxQkFBSixDQUEwQkMsY0FBMUI7QUFDQTVCLGFBQUcsQ0FBQzZCLGtCQUFKLENBQXVCQyxrQkFBdkI7QUFDQTdCLG1CQUFTLENBQUNLLFNBQUQsQ0FBVDtBQUNELFNBTEwsRUFLTyxVQUFVRCxHQUFWLEVBQWU7QUFDaEJILG1CQUFTLENBQUNOLFdBQVcsQ0FBQ1csUUFBWixDQUFxQlgsV0FBVyxDQUFDWSxDQUFaLENBQWNDLFNBQWQsQ0FBd0JDLG1CQUE3QyxDQUFELEVBQW9FTCxHQUFwRSxDQUFUO0FBQ0QsU0FQTDtBQVFELE9BVkwsRUFVTyxVQUFVQSxHQUFWLEVBQWU7QUFDaEJILGlCQUFTLENBQUNOLFdBQVcsQ0FBQ1csUUFBWixDQUFxQlgsV0FBVyxDQUFDWSxDQUFaLENBQWNDLFNBQWQsQ0FBd0JDLG1CQUE3QyxDQUFELEVBQW9FTCxHQUFwRSxDQUFUO0FBQ0QsT0FaTDtBQWFEO0FBQ0YsR0F6QkQ7QUEwQkQsQ0EzQkQiLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgbWFuaWZlc3RzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYW5pZmVzdElkcyA9IG1hbmlmZXN0cy5tYXAoZnVuY3Rpb24gKG1hbmlmZXN0KSB7XG4gICAgICAgIHJldHVybiBtYW5pZmVzdC5tYW5pZmVzdEluZm8uaWQ7XG4gICAgICB9KTtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWRzW2ldKSk7XG4gICAgICB9XG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhcGkub2ZmbGluZUNvbnRyb2xsZXIucmVtb3ZlQWxsUHJvbWlzZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZUFsbCgpO1xuICAgICAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGVBbGwoKTtcbiAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdHMpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nvar STATUSES = __webpack_require__(8);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n\n      if (!results.length) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_REMOVED_ALL_UNFINISHED));\n        return;\n      }\n\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.removePromise(manifestId));\n        }\n      }\n\n      Promise.all(promises).then(function () {\n        var promises = [];\n\n        for (var _i = 0, _j = manifestIds.length; _i < _j; _i++) {\n          promises.push(api.offlineController.removePromise(manifestIds[_i]));\n        }\n\n        Promise.all(promises).then(function () {\n          api.subscribersController.unsubscribe(manifestIds);\n          api.manifestController.removeFromCache(manifestIds);\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLWFsbC11bmZpbmlzaGVkLmpzPzc3MWQiXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwiU1RBVFVTRVMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8iLCJlcnIiLCJyZXN1bHRzIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEIiwicHJvbWlzZXMiLCJtYW5pZmVzdElkcyIsImxlbmd0aCIsIkFMUkVBRFlfUkVNT1ZFRF9BTExfVU5GSU5JU0hFRCIsImkiLCJqIiwic3RhdHVzIiwibWFuaWZlc3RJZCIsIm1hbmlmZXN0SW5mbyIsImlkIiwiRklOSVNIRUQiLCJwdXNoIiwiZG93bmxvYWRzQ29udHJvbGxlciIsInJlbW92ZVByb21pc2UiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwibWFuaWZlc3RDb250cm9sbGVyIiwicmVtb3ZlRnJvbUNhY2hlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUF4Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUM7QUFDcERGLEtBQUcsQ0FBQ0csaUJBQUosQ0FBc0JDLHdCQUF0QixDQUErQyxVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDckUsUUFBSUQsR0FBSixFQUFTO0FBQ1BILGVBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsOEJBQTdDLENBQUQsRUFBK0VMLEdBQS9FLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJTSxRQUFRLEdBQUcsRUFBZjtBQUNBLFVBQUlDLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxVQUFJLENBQUNOLE9BQU8sQ0FBQ08sTUFBYixFQUFxQjtBQUNuQlgsaUJBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkssOEJBQTdDLENBQUQsQ0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdWLE9BQU8sQ0FBQ08sTUFBNUIsRUFBb0NFLENBQUMsR0FBR0MsQ0FBeEMsRUFBMkNELENBQUMsRUFBNUMsRUFBZ0Q7QUFDOUMsWUFBSUUsTUFBTSxHQUFHWCxPQUFPLENBQUNTLENBQUQsQ0FBUCxDQUFXRSxNQUF4QjtBQUNBLFlBQUlDLFVBQVUsR0FBR1osT0FBTyxDQUFDUyxDQUFELENBQVAsQ0FBV0ksWUFBWCxDQUF3QkMsRUFBekM7O0FBQ0EsWUFBSUgsTUFBTSxLQUFLcEIsUUFBUSxDQUFDd0IsUUFBeEIsRUFBa0M7QUFDaENULHFCQUFXLENBQUNVLElBQVosQ0FBaUJKLFVBQWpCO0FBQ0FQLGtCQUFRLENBQUNXLElBQVQsQ0FBY3RCLEdBQUcsQ0FBQ3VCLG1CQUFKLENBQXdCQyxhQUF4QixDQUFzQ04sVUFBdEMsQ0FBZDtBQUNEO0FBQ0Y7O0FBQ0RPLGFBQU8sQ0FBQ0MsR0FBUixDQUFZZixRQUFaLEVBQ0dnQixJQURILENBQ1EsWUFBWTtBQUNoQixZQUFJaEIsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsYUFBSyxJQUFJSSxFQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFDLEdBQUdKLFdBQVcsQ0FBQ0MsTUFBaEMsRUFBd0NFLEVBQUMsR0FBR0MsRUFBNUMsRUFBK0NELEVBQUMsRUFBaEQsRUFBb0Q7QUFDbERKLGtCQUFRLENBQUNXLElBQVQsQ0FBY3RCLEdBQUcsQ0FBQ0csaUJBQUosQ0FBc0JxQixhQUF0QixDQUFvQ1osV0FBVyxDQUFDRyxFQUFELENBQS9DLENBQWQ7QUFDRDs7QUFDRFUsZUFBTyxDQUFDQyxHQUFSLENBQVlmLFFBQVosRUFDR2dCLElBREgsQ0FDUSxZQUFZO0FBQ2hCM0IsYUFBRyxDQUFDNEIscUJBQUosQ0FBMEJDLFdBQTFCLENBQXNDakIsV0FBdEM7QUFDQVosYUFBRyxDQUFDOEIsa0JBQUosQ0FBdUJDLGVBQXZCLENBQXVDbkIsV0FBdkM7QUFDQVgsbUJBQVMsQ0FBQ1csV0FBRCxDQUFUO0FBQ0QsU0FMSCxFQUtLLFVBQVVQLEdBQVYsRUFBZTtBQUNoQkgsbUJBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsOEJBQTdDLENBQUQsRUFBK0VMLEdBQS9FLENBQVQ7QUFDRCxTQVBIO0FBUUQsT0FkSCxFQWNLLFVBQVVBLEdBQVYsRUFBZTtBQUNoQkgsaUJBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsOEJBQTdDLENBQUQsRUFBK0VMLEdBQS9FLENBQVQ7QUFDRCxPQWhCSDtBQWlCRDtBQUNGLEdBcENEO0FBcUNELENBdENEIiwiZmlsZSI6IjcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5jb25zdCBTVEFUVVNFUyA9IHJlcXVpcmUoXCIuLi8uLi9kb3dubG9hZHMvc3RhdHVzZXNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyhmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9VTkZJTklTSEVEX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgbGV0IG1hbmlmZXN0SWRzID0gW107XG4gICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5BTFJFQURZX1JFTU9WRURfQUxMX1VORklOSVNIRUQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSByZXN1bHRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBsZXQgc3RhdHVzID0gcmVzdWx0c1tpXS5zdGF0dXM7XG4gICAgICAgIGxldCBtYW5pZmVzdElkID0gcmVzdWx0c1tpXS5tYW5pZmVzdEluZm8uaWQ7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IFNUQVRVU0VTLkZJTklTSEVEKSB7XG4gICAgICAgICAgbWFuaWZlc3RJZHMucHVzaChtYW5pZmVzdElkKTtcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnJlbW92ZVByb21pc2UobWFuaWZlc3RJZCkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGV0IHByb21pc2VzID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goYXBpLm9mZmxpbmVDb250cm9sbGVyLnJlbW92ZVByb21pc2UobWFuaWZlc3RJZHNbaV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgICBhcGkubWFuaWZlc3RDb250cm9sbGVyLnJlbW92ZUZyb21DYWNoZShtYW5pZmVzdElkcyk7XG4gICAgICAgICAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdElkcyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfVU5GSU5JU0hFRF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar appSettings = __webpack_require__(1);\n\nvar translation = __webpack_require__(0);\n\nvar removeDir = __webpack_require__(30);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var file = appSettings.getSettings().settingsFolder + manifestId + "/" + appSettings.getSettings().stores.PERSISTENT + ".json";\n      removeDir(file, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_PERSISTENT_FAILED, manifestId), err);\n        } else {\n          onSuccess(info);\n        }\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLXBlcnNpc3RlbnQuanM/Nzc1OSJdLCJuYW1lcyI6WyJhcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsInJlbW92ZURpciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTk9UX0ZPVU5EIiwiZmlsZSIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJzdG9yZXMiLCJQRVJTSVNURU5UIiwiY29kZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX1BFUlNJU1RFTlRfRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsRUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtBQUN4RUosS0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsZUFBdEIsQ0FBc0NGLFVBQXRDLEVBQWtELFVBQVVHLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtBQUNyRSxRQUFJRCxHQUFKLEVBQVM7QUFDUEwsZUFBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxTQUE3QyxFQUF3RFIsVUFBeEQsQ0FBRCxFQUFzRUcsR0FBdEUsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU1NLElBQUksR0FBR25CLFdBQVcsQ0FBQ29CLFdBQVosR0FBMEJDLGNBQTFCLEdBQTJDWCxVQUEzQyxHQUF3RCxHQUF4RCxHQUE4RFYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkUsTUFBMUIsQ0FBaUNDLFVBQS9GLEdBQTRHLE9BQXpIO0FBRUFwQixlQUFTLENBQUNnQixJQUFELEVBQU8sVUFBVU4sR0FBVixFQUFlO0FBQzdCLFlBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDVyxJQUFKLEtBQWEsUUFBeEIsRUFBa0M7QUFDaENoQixtQkFBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjUyxTQUFkLENBQXdCQywwQkFBN0MsRUFBeUVoQixVQUF6RSxDQUFELEVBQXVGRyxHQUF2RixDQUFUO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLG1CQUFTLENBQUNPLElBQUQsQ0FBVDtBQUNEO0FBQ0YsT0FOUSxDQUFUO0FBT0Q7QUFDRixHQWREO0FBZ0JELENBakJEIiwiZmlsZSI6IjcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgcmVtb3ZlRGlyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvcmVtb3ZlLWRpclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaWxlID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIG1hbmlmZXN0SWQgKyBcIi9cIiArIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLlBFUlNJU1RFTlQgKyBcIi5qc29uXCI7XG5cbiAgICAgIHJlbW92ZURpcihmaWxlLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfUEVSU0lTVEVOVF9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uU3VjY2VzcyhpbmZvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///71\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations) {\n  api.downloadsController.resume(manifestId, representations, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVzdW1lLmpzPzgzODkiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJyZXByZXNlbnRhdGlvbnMiLCJkb3dubG9hZHNDb250cm9sbGVyIiwicmVzdW1lIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsZUFBekQsRUFBMEU7QUFDekZMLEtBQUcsQ0FBQ00sbUJBQUosQ0FBd0JDLE1BQXhCLENBQStCSCxVQUEvQixFQUEyQ0MsZUFBM0MsRUFBNERKLFNBQTVELEVBQXVFQyxTQUF2RTtBQUNELENBRkQiLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMpIHtcbiAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIucmVzdW1lKG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucywgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar appSettings = __webpack_require__(1);\n\nvar translation = __webpack_require__(0);\n\nvar FlushItem = __webpack_require__(12);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, data) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.DATA, data);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1kYXRhLmpzPzgwYjEiXSwibmFtZXMiOlsiYXBwU2V0dGluZ3MiLCJyZXF1aXJlIiwidHJhbnNsYXRpb24iLCJGbHVzaEl0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsImRhdGEiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsImZsdXNoSXRlbSIsImdldFNldHRpbmdzIiwic3RvcmVzIiwiREFUQSIsInNhdmUiLCJ0aGVuIiwiZG93bmxvYWRzIiwiU0FWSU5HX0RBVEFfRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsRUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsSUFBekQsRUFBK0Q7QUFDOUVMLEtBQUcsQ0FBQ00saUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDSCxVQUF0QyxFQUFrRCxVQUFVSSxHQUFWLEVBQWU7QUFDL0QsUUFBSUEsR0FBSixFQUFTO0FBQ1BOLGVBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsU0FBN0MsRUFBd0RSLFVBQXhELENBQUQsRUFBc0VJLEdBQXRFLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFNSyxTQUFTLEdBQUcsSUFBSWhCLFNBQUosQ0FBY08sVUFBZCxFQUEwQlYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkMsTUFBMUIsQ0FBaUNDLElBQTNELEVBQWlFWCxJQUFqRSxDQUFsQjtBQUNBUSxlQUFTLENBQUNJLElBQVYsR0FDR0MsSUFESCxDQUNRLFlBQVk7QUFDaEJqQixpQkFBUztBQUNWLE9BSEgsRUFHSyxVQUFVTyxHQUFWLEVBQWU7QUFDaEJOLGlCQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBWixDQUFxQmIsV0FBVyxDQUFDYyxDQUFaLENBQWNTLFNBQWQsQ0FBd0JDLGtCQUE3QyxFQUFpRWhCLFVBQWpFLENBQUQsRUFBK0VJLEdBQS9FLENBQVQ7QUFDRCxPQUxIO0FBTUQ7QUFDRixHQVpEO0FBY0QsQ0FmRCIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi9hcHAtc2V0dGluZ3MnKTtcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IEZsdXNoSXRlbSA9IHJlcXVpcmUoXCIuLi8uLi9kb3dubG9hZHMvZmx1c2gtaXRlbVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCBkYXRhKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmbHVzaEl0ZW0gPSBuZXcgRmx1c2hJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLkRBVEEsIGRhdGEpO1xuICAgICAgZmx1c2hJdGVtLnNhdmUoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU0FWSU5HX0RBVEFfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(11);\n\nmodule.exports = function LinkSave(attr) {\n  fieldsPicker(this, ["id", "contentType", "bandwidth", "remoteUrl", "stats", "localUrl"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbWFuaWZlc3QvanNvbi9saW5rLXNhdmUuanM/MWEwOCJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkxpbmtTYXZlIiwiYXR0ciJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLEVBQUQsQ0FBNUI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN4Q0wsY0FBWSxDQUFDLElBQUQsRUFBTyxDQUNqQixJQURpQixFQUVqQixhQUZpQixFQUdqQixXQUhpQixFQUlqQixXQUppQixFQUtqQixPQUxpQixFQU1qQixVQU5pQixDQUFQLEVBT1RLLElBUFMsQ0FBWjtBQVFELENBVEQiLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGlua1NhdmUgKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImlkXCIsXG4gICAgXCJjb250ZW50VHlwZVwiLFxuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJyZW1vdGVVcmxcIixcbiAgICBcInN0YXRzXCIsXG4gICAgXCJsb2NhbFVybFwiXG4gIF0sIGF0dHIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar appSettings = __webpack_require__(1);\n\nvar translation = __webpack_require__(0);\n\nvar FlushItem = __webpack_require__(12);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, persistent) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.PERSISTENT, persistent);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_PERSISTENT_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1wZXJzaXN0ZW50LmpzPzcyNTEiXSwibmFtZXMiOlsiYXBwU2V0dGluZ3MiLCJyZXF1aXJlIiwidHJhbnNsYXRpb24iLCJGbHVzaEl0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInBlcnNpc3RlbnQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsImZsdXNoSXRlbSIsImdldFNldHRpbmdzIiwic3RvcmVzIiwiUEVSU0lTVEVOVCIsInNhdmUiLCJ0aGVuIiwiZG93bmxvYWRzIiwiU0FWSU5HX1BFUlNJU1RFTlRfRkFJTEVEIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsRUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsVUFBekQsRUFBcUU7QUFDcEZMLEtBQUcsQ0FBQ00saUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDSCxVQUF0QyxFQUFrRCxVQUFVSSxHQUFWLEVBQWU7QUFDL0QsUUFBSUEsR0FBSixFQUFTO0FBQ1BOLGVBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsU0FBN0MsRUFBd0RSLFVBQXhELENBQUQsRUFBc0VJLEdBQXRFLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFNSyxTQUFTLEdBQUcsSUFBSWhCLFNBQUosQ0FBY08sVUFBZCxFQUEwQlYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkMsTUFBMUIsQ0FBaUNDLFVBQTNELEVBQXVFWCxVQUF2RSxDQUFsQjtBQUNBUSxlQUFTLENBQUNJLElBQVYsR0FDS0MsSUFETCxDQUNVLFlBQVk7QUFDaEJqQixpQkFBUztBQUNWLE9BSEwsRUFHTyxVQUFVTyxHQUFWLEVBQWU7QUFDaEJOLGlCQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBWixDQUFxQmIsV0FBVyxDQUFDYyxDQUFaLENBQWNTLFNBQWQsQ0FBd0JDLHdCQUE3QyxFQUF1RWhCLFVBQXZFLENBQUQsRUFBcUZJLEdBQXJGLENBQVQ7QUFDRCxPQUxMO0FBTUQ7QUFDRixHQVpEO0FBY0QsQ0FmRCIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi9hcHAtc2V0dGluZ3MnKTtcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IEZsdXNoSXRlbSA9IHJlcXVpcmUoXCIuLi8uLi9kb3dubG9hZHMvZmx1c2gtaXRlbVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCBwZXJzaXN0ZW50KSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmbHVzaEl0ZW0gPSBuZXcgRmx1c2hJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLlBFUlNJU1RFTlQsIHBlcnNpc3RlbnQpO1xuICAgICAgZmx1c2hJdGVtLnNhdmUoKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9uU3VjY2VzcygpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TQVZJTkdfUEVSU0lTVEVOVF9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nvar canCreateManifest = __webpack_require__(29);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations, downloadFolder) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n\n  function start() {\n    api.downloadsController.storage.getItem(manifestId).then(function (result) {\n      if (result) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      } else {\n        api.downloadsController.start(manifestId, representations, downloadFolder, onSuccess, function (err) {\n          onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n        });\n      }\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    });\n  }\n\n  canCreateManifest(manifestId, downloadFolder).then(function () {\n    start();\n  }, function (errors) {\n    errors = errors || [];\n    var movieFolderError = errors[1];\n\n    if (errors.length) {\n      if (movieFolderError) {\n        // if movie folder has been already created the we can't start as it might be either different folder\n        // or simply the resume should be used\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n        return;\n      }\n    } // if manifest exists physically on drive that means something is wrong and can't start the manifest\n    // the manifest is saved in method start so this cannot be overwritten here\n\n\n    api.offlineController.getManifestDataFile(manifestId, function (data) {\n      if (data) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n      } else {\n        start();\n      }\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc3RhcnQuanM/MmQ3YyJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJjYW5DcmVhdGVNYW5pZmVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicmVwcmVzZW50YXRpb25zIiwiZG93bmxvYWRGb2xkZXIiLCJtYW5pZmVzdCIsIm1hbmlmZXN0Q29udHJvbGxlciIsImdldE1hbmlmZXN0QnlJZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsInN0YXJ0IiwiZG93bmxvYWRzQ29udHJvbGxlciIsInN0b3JhZ2UiLCJnZXRJdGVtIiwidGhlbiIsInJlc3VsdCIsImRvd25sb2FkcyIsIkFMUkVBRFlfU1RBUlRFRCIsImVyciIsIl9HRU5FUkFMIiwiZXJyb3JzIiwibW92aWVGb2xkZXJFcnJvciIsImxlbmd0aCIsIkZPTERFUl9BTFJFQURZX0VYSVNUUyIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3REYXRhRmlsZSIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTNCOztBQUNBLElBQU1DLGlCQUFpQixHQUFHRCxtQkFBTyxDQUFDLEVBQUQsQ0FBakM7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLFNBQWYsRUFBMEJDLFNBQTFCLEVBQXFDQyxNQUFyQyxFQUE2Q0MsVUFBN0MsRUFBeURDLGVBQXpELEVBQTBFQyxjQUExRSxFQUEwRjtBQUN6RyxNQUFNQyxRQUFRLEdBQUdQLEdBQUcsQ0FBQ1Esa0JBQUosQ0FBdUJDLGVBQXZCLENBQXVDTCxVQUF2QyxDQUFqQjs7QUFDQSxNQUFJLENBQUNHLFFBQUwsRUFBZTtBQUNiTCxhQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBWixDQUFxQmYsV0FBVyxDQUFDZ0IsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxTQUE3QyxFQUF3RFQsVUFBeEQsQ0FBRCxDQUFUO0FBQ0E7QUFDRDs7QUFFRCxXQUFTVSxLQUFULEdBQWtCO0FBQ2hCZCxPQUFHLENBQUNlLG1CQUFKLENBQXdCQyxPQUF4QixDQUFnQ0MsT0FBaEMsQ0FBd0NiLFVBQXhDLEVBQW9EYyxJQUFwRCxDQUF5RCxVQUFVQyxNQUFWLEVBQWtCO0FBQ3pFLFVBQUlBLE1BQUosRUFBWTtBQUNWakIsaUJBQVMsQ0FBQ1AsV0FBVyxDQUFDZSxRQUFaLENBQXFCZixXQUFXLENBQUNnQixDQUFaLENBQWNTLFNBQWQsQ0FBd0JDLGVBQTdDLEVBQThEakIsVUFBOUQsQ0FBRCxDQUFUO0FBQ0QsT0FGRCxNQUVPO0FBQ0xKLFdBQUcsQ0FBQ2UsbUJBQUosQ0FBd0JELEtBQXhCLENBQThCVixVQUE5QixFQUEwQ0MsZUFBMUMsRUFBMkRDLGNBQTNELEVBQTJFTCxTQUEzRSxFQUFzRixVQUFVcUIsR0FBVixFQUFlO0FBQ25HcEIsbUJBQVMsQ0FBQ1AsV0FBVyxDQUFDZSxRQUFaLENBQXFCZixXQUFXLENBQUNnQixDQUFaLENBQWNTLFNBQWQsQ0FBd0JHLFFBQTdDLENBQUQsRUFBeURELEdBQXpELENBQVQ7QUFDRCxTQUZEO0FBR0Q7QUFDRixLQVJELEVBUUcsVUFBVUEsR0FBVixFQUFlO0FBQ2hCcEIsZUFBUyxDQUFDUCxXQUFXLENBQUNlLFFBQVosQ0FBcUJmLFdBQVcsQ0FBQ2dCLENBQVosQ0FBY1MsU0FBZCxDQUF3QkcsUUFBN0MsQ0FBRCxFQUF5REQsR0FBekQsQ0FBVDtBQUNELEtBVkQ7QUFXRDs7QUFFRHpCLG1CQUFpQixDQUFDTyxVQUFELEVBQWFFLGNBQWIsQ0FBakIsQ0FBOENZLElBQTlDLENBQW1ELFlBQVk7QUFDN0RKLFNBQUs7QUFDTixHQUZELEVBRUcsVUFBVVUsTUFBVixFQUFrQjtBQUNuQkEsVUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7QUFDQSxRQUFJQyxnQkFBZ0IsR0FBR0QsTUFBTSxDQUFDLENBQUQsQ0FBN0I7O0FBQ0EsUUFBSUEsTUFBTSxDQUFDRSxNQUFYLEVBQW1CO0FBQ2pCLFVBQUlELGdCQUFKLEVBQXNCO0FBQ3BCO0FBQ0E7QUFDQXZCLGlCQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBWixDQUFxQmYsV0FBVyxDQUFDZ0IsQ0FBWixDQUFjQyxTQUFkLENBQXdCZSxxQkFBN0MsRUFBb0V2QixVQUFwRSxDQUFELENBQVQ7QUFDQTtBQUNEO0FBQ0YsS0FWa0IsQ0FXbkI7QUFDQTs7O0FBQ0FKLE9BQUcsQ0FBQzRCLGlCQUFKLENBQXNCQyxtQkFBdEIsQ0FBMEN6QixVQUExQyxFQUFzRCxVQUFVMEIsSUFBVixFQUFnQjtBQUNwRSxVQUFJQSxJQUFKLEVBQVU7QUFDUjVCLGlCQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBWixDQUFxQmYsV0FBVyxDQUFDZ0IsQ0FBWixDQUFjQyxTQUFkLENBQXdCZSxxQkFBN0MsRUFBb0V2QixVQUFwRSxDQUFELENBQVQ7QUFDRCxPQUZELE1BRU87QUFDTFUsYUFBSztBQUNOO0FBQ0YsS0FORDtBQU9ELEdBdEJEO0FBd0JELENBN0NEIiwiZmlsZSI6Ijc2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZShcIi4uLy4uL3RyYW5zbGF0aW9uL2luZGV4XCIpO1xuY29uc3QgY2FuQ3JlYXRlTWFuaWZlc3QgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9jYW4tY3JlYXRlLW1hbmlmZXN0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucywgZG93bmxvYWRGb2xkZXIpIHtcbiAgY29uc3QgbWFuaWZlc3QgPSBhcGkubWFuaWZlc3RDb250cm9sbGVyLmdldE1hbmlmZXN0QnlJZChtYW5pZmVzdElkKTtcbiAgaWYgKCFtYW5pZmVzdCkge1xuICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCAoKSB7XG4gICAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RvcmFnZS5nZXRJdGVtKG1hbmlmZXN0SWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9TVEFSVEVELCBtYW5pZmVzdElkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5zdGFydChtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIGRvd25sb2FkRm9sZGVyLCBvblN1Y2Nlc3MsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgY2FuQ3JlYXRlTWFuaWZlc3QobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0KCk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICBlcnJvcnMgPSBlcnJvcnMgfHwgW107XG4gICAgdmFyIG1vdmllRm9sZGVyRXJyb3IgPSBlcnJvcnNbMV07XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIGlmIChtb3ZpZUZvbGRlckVycm9yKSB7XG4gICAgICAgIC8vIGlmIG1vdmllIGZvbGRlciBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQgdGhlIHdlIGNhbid0IHN0YXJ0IGFzIGl0IG1pZ2h0IGJlIGVpdGhlciBkaWZmZXJlbnQgZm9sZGVyXG4gICAgICAgIC8vIG9yIHNpbXBseSB0aGUgcmVzdW1lIHNob3VsZCBiZSB1c2VkXG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5GT0xERVJfQUxSRUFEWV9FWElTVFMsIG1hbmlmZXN0SWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiBtYW5pZmVzdCBleGlzdHMgcGh5c2ljYWxseSBvbiBkcml2ZSB0aGF0IG1lYW5zIHNvbWV0aGluZyBpcyB3cm9uZyBhbmQgY2FuJ3Qgc3RhcnQgdGhlIG1hbmlmZXN0XG4gICAgLy8gdGhlIG1hbmlmZXN0IGlzIHNhdmVkIGluIG1ldGhvZCBzdGFydCBzbyB0aGlzIGNhbm5vdCBiZSBvdmVyd3JpdHRlbiBoZXJlXG4gICAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0RGF0YUZpbGUobWFuaWZlc3RJZCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5GT0xERVJfQUxSRUFEWV9FWElTVFMsIG1hbmlmZXN0SWQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.downloadsController.stop(manifestId, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc3RvcC5qcz8zNDY0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZG93bmxvYWRzQ29udHJvbGxlciIsInN0b3AiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFVBQTdDLEVBQXlEO0FBQ3hFSixLQUFHLENBQUNLLG1CQUFKLENBQXdCQyxJQUF4QixDQUE2QkYsVUFBN0IsRUFBeUNILFNBQXpDLEVBQW9EQyxTQUFwRDtBQUNELENBRkQiLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0b3AobWFuaWZlc3RJZCwgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///77\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nvar STATUSES = __webpack_require__(8);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.stopPromise(manifestId, true));\n        }\n      }\n\n      if (manifestIds.length > 0) {\n        Promise.all(promises).then(function () {\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n        });\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED_ALL));\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc3RvcC1hbGwuanM/NzcwYyJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJTVEFUVVNFUyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsInJlc3VsdHMiLCJnZXRFcnJvciIsImUiLCJkb3dubG9hZHMiLCJTVE9QUElOR19BTExfRkFJTEVEIiwicHJvbWlzZXMiLCJtYW5pZmVzdElkcyIsImkiLCJqIiwibGVuZ3RoIiwic3RhdHVzIiwibWFuaWZlc3RJZCIsIm1hbmlmZXN0SW5mbyIsImlkIiwiRklOSVNIRUQiLCJwdXNoIiwiZG93bmxvYWRzQ29udHJvbGxlciIsInN0b3BQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJBTFJFQURZX1NUT1BQRURfQUxMIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUF4Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUM7QUFDcERGLEtBQUcsQ0FBQ0csaUJBQUosQ0FBc0JDLHdCQUF0QixDQUErQyxVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDckUsUUFBSUQsR0FBSixFQUFTO0FBQ1BILGVBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsbUJBQTdDLENBQUQsRUFBb0VMLEdBQXBFLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJTSxRQUFRLEdBQUcsRUFBZjtBQUNBLFVBQUlDLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR1IsT0FBTyxDQUFDUyxNQUE1QixFQUFvQ0YsQ0FBQyxHQUFHQyxDQUF4QyxFQUEyQ0QsQ0FBQyxFQUE1QyxFQUFnRDtBQUM5QyxZQUFJRyxNQUFNLEdBQUdWLE9BQU8sQ0FBQ08sQ0FBRCxDQUFQLENBQVdHLE1BQXhCO0FBQ0EsWUFBSUMsVUFBVSxHQUFHWCxPQUFPLENBQUNPLENBQUQsQ0FBUCxDQUFXSyxZQUFYLENBQXdCQyxFQUF6Qzs7QUFDQSxZQUFJSCxNQUFNLEtBQUtuQixRQUFRLENBQUN1QixRQUF4QixFQUFrQztBQUNoQ1IscUJBQVcsQ0FBQ1MsSUFBWixDQUFpQkosVUFBakI7QUFDQU4sa0JBQVEsQ0FBQ1UsSUFBVCxDQUFjckIsR0FBRyxDQUFDc0IsbUJBQUosQ0FBd0JDLFdBQXhCLENBQW9DTixVQUFwQyxFQUFnRCxJQUFoRCxDQUFkO0FBQ0Q7QUFDRjs7QUFDRCxVQUFJTCxXQUFXLENBQUNHLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJTLGVBQU8sQ0FBQ0MsR0FBUixDQUFZZCxRQUFaLEVBQ0tlLElBREwsQ0FDVSxZQUFZO0FBQ2hCekIsbUJBQVMsQ0FBQ1csV0FBRCxDQUFUO0FBQ0QsU0FITCxFQUdPLFVBQVVQLEdBQVYsRUFBZTtBQUNoQkgsbUJBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsbUJBQTdDLENBQUQsRUFBb0VMLEdBQXBFLENBQVQ7QUFDRCxTQUxMO0FBTUQsT0FQRCxNQU9PO0FBQ0xILGlCQUFTLENBQUNQLFdBQVcsQ0FBQ1ksUUFBWixDQUFxQlosV0FBVyxDQUFDYSxDQUFaLENBQWNDLFNBQWQsQ0FBd0JrQixtQkFBN0MsQ0FBRCxDQUFUO0FBQ0Q7QUFDRjtBQUNGLEdBekJEO0FBMEJELENBM0JEIiwiZmlsZSI6Ijc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IFNUQVRVU0VTID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9zdGF0dXNlc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU1RPUFBJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgbGV0IG1hbmlmZXN0SWRzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBzdGF0dXMgPSByZXN1bHRzW2ldLnN0YXR1cztcbiAgICAgICAgbGV0IG1hbmlmZXN0SWQgPSByZXN1bHRzW2ldLm1hbmlmZXN0SW5mby5pZDtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gU1RBVFVTRVMuRklOSVNIRUQpIHtcbiAgICAgICAgICBtYW5pZmVzdElkcy5wdXNoKG1hbmlmZXN0SWQpO1xuICAgICAgICAgIHByb21pc2VzLnB1c2goYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RvcFByb21pc2UobWFuaWZlc3RJZCwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFuaWZlc3RJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb25TdWNjZXNzKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlNUT1BQSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9TVE9QUEVEX0FMTCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nvar Subscriber = __webpack_require__(80);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds, timeout) {\n  if (typeof manifestIds === 'string') {\n    subscribeSingle(api, onSuccess, onFailure, target, manifestIds, timeout);\n  } else {\n    subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout);\n  }\n};\n\nfunction subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout) {\n  var subscriber1, subscriber2, subscribersId;\n  var manifestId = manifestIds.sort().join(',');\n  subscribersId = []; // callbackOnProgress\n\n  subscriber1 = new Subscriber(function () {\n    return api.downloadsController.downloadStats.getStats(manifestIds);\n  }, api.processSubscriber, target, manifestId, timeout);\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber1)); // callbackOnFinish\n\n  subscriber2 = new Subscriber(function () {\n    var result = true;\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      result = result && api.downloadsController.isDownloadFinishedAndSynced(manifestIds[i]);\n    }\n\n    return result;\n  }, api.processSubscriber, target, manifestId, timeout, true);\n  subscriber2.onFinish(function (callback) {\n    subscriber1.remove();\n    var items = [];\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      items.push(api.offlineController.getManifestInfoPromise(manifestIds[i]));\n    }\n\n    Promise.all(items).then(function (results) {\n      callback(null, results);\n    }, function (err) {\n      callback(err);\n    });\n  });\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n  onSuccess(null, subscribersId);\n}\n\nfunction subscribeSingle(api, onSuccess, onFailure, target, manifestId, timeout) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  var subscriber1, subscriber2, subscribersId;\n\n  if (manifest) {\n    subscribersId = []; // callbackOnProgress\n\n    subscriber1 = new Subscriber(function () {\n      return api.downloadsController.downloadStats.getStats(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout);\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber1)); // callbackOnFinish\n\n    subscriber2 = new Subscriber(function () {\n      return api.downloadsController.isDownloadFinishedAndSynced(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout, true);\n    subscriber2.onFinish(function (callback) {\n      subscriber1.remove();\n      api.offlineController.getManifestInfo(manifestId, function (err, result) {\n        callback(err, result);\n      });\n    });\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n    onSuccess(manifest.getJsonInfo(), subscribersId);\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar Snowflake = __webpack_require__(9);\n\nvar _ = __webpack_require__(5);\n/**\n *\n * @param {function} process - function to get the result from\n * @param {function} callback - callback to be invoked when "process" function returns anything\n * @param {number} target - window target id\n * @param {string} manifestId - manifest identifier\n * @param {number} time - time in miliseconds how often the callback should be invoked\n * @param {boolean} onceOnly - if set to true the callback will be invoked once only and subsriber will be removed\n * @constructor\n */\n\n\nfunction Subscriber(process, callback, target, manifestId, time, onceOnly) {\n  this._process = process;\n  this._callback = callback;\n  this._manifestId = manifestId;\n  this._id = String(Snowflake.SnowflakeId.getUUID());\n  this._onceOnly = onceOnly;\n  this._target = target;\n\n  this.onInterval = function () {\n    var result = this._process();\n\n    var self = this;\n\n    if (result) {\n      if (this._onceOnly) {\n        this.remove();\n\n        if (typeof this._callbackOnFinish === "function") {\n          this._callbackOnFinish(function (err, result) {\n            self._callback(self._id, err, result, self._target, true);\n          });\n        } else {\n          this._callback(this._id, null, result, self._target);\n        }\n      } else {\n        this._callback(this._id, null, result, self._target);\n      }\n    }\n  };\n\n  _.bindAll(this, "onInterval");\n\n  this._intervalTimer = setInterval(this.onInterval, time);\n}\n/**\n *\n * @returns {string} - subscriber identifier\n */\n\n\nSubscriber.prototype.getId = function () {\n  return this._id;\n};\n/**\n *\n * @returns {string} - manifest identifier\n */\n\n\nSubscriber.prototype.getManifestId = function () {\n  return this._manifestId;\n};\n/**\n * @param {function} callback - function to be invoked when "process" function returns anything\n * and when "onceOnly" is set to true\n * @returns {void}\n */\n\n\nSubscriber.prototype.onFinish = function (callback) {\n  this._callbackOnFinish = callback;\n};\n/**\n * @returns {void}\n */\n\n\nSubscriber.prototype.remove = function () {\n  clearInterval(this._intervalTimer);\n};\n\nmodule.exports = Subscriber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9zdWJzY3JpYmVyLmpzPzI1MzciXSwibmFtZXMiOlsiU25vd2ZsYWtlIiwicmVxdWlyZSIsIl8iLCJTdWJzY3JpYmVyIiwicHJvY2VzcyIsImNhbGxiYWNrIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInRpbWUiLCJvbmNlT25seSIsIl9wcm9jZXNzIiwiX2NhbGxiYWNrIiwiX21hbmlmZXN0SWQiLCJfaWQiLCJTdHJpbmciLCJTbm93Zmxha2VJZCIsImdldFVVSUQiLCJfb25jZU9ubHkiLCJfdGFyZ2V0Iiwib25JbnRlcnZhbCIsInJlc3VsdCIsInNlbGYiLCJyZW1vdmUiLCJfY2FsbGJhY2tPbkZpbmlzaCIsImVyciIsImJpbmRBbGwiLCJfaW50ZXJ2YWxUaW1lciIsInNldEludGVydmFsIiwicHJvdG90eXBlIiwiZ2V0SWQiLCJnZXRNYW5pZmVzdElkIiwib25GaW5pc2giLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBekI7O0FBQ0EsSUFBTUMsQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLENBQUQsQ0FBakI7QUFFQTs7Ozs7Ozs7Ozs7O0FBVUEsU0FBU0UsVUFBVCxDQUFxQkMsT0FBckIsRUFBOEJDLFFBQTlCLEVBQXdDQyxNQUF4QyxFQUFnREMsVUFBaEQsRUFBNERDLElBQTVELEVBQWtFQyxRQUFsRSxFQUE0RTtBQUMxRSxPQUFLQyxRQUFMLEdBQWdCTixPQUFoQjtBQUNBLE9BQUtPLFNBQUwsR0FBaUJOLFFBQWpCO0FBQ0EsT0FBS08sV0FBTCxHQUFtQkwsVUFBbkI7QUFDQSxPQUFLTSxHQUFMLEdBQVdDLE1BQU0sQ0FBQ2QsU0FBUyxDQUFDZSxXQUFWLENBQXNCQyxPQUF0QixFQUFELENBQWpCO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQlIsUUFBakI7QUFDQSxPQUFLUyxPQUFMLEdBQWVaLE1BQWY7O0FBQ0EsT0FBS2EsVUFBTCxHQUFrQixZQUFZO0FBQzVCLFFBQU1DLE1BQU0sR0FBRyxLQUFLVixRQUFMLEVBQWY7O0FBQ0EsUUFBTVcsSUFBSSxHQUFHLElBQWI7O0FBQ0EsUUFBSUQsTUFBSixFQUFZO0FBQ1YsVUFBSSxLQUFLSCxTQUFULEVBQW9CO0FBQ2xCLGFBQUtLLE1BQUw7O0FBQ0EsWUFBSSxPQUFPLEtBQUtDLGlCQUFaLEtBQWtDLFVBQXRDLEVBQWtEO0FBQ2hELGVBQUtBLGlCQUFMLENBQXVCLFVBQVVDLEdBQVYsRUFBZUosTUFBZixFQUF1QjtBQUM1Q0MsZ0JBQUksQ0FBQ1YsU0FBTCxDQUFlVSxJQUFJLENBQUNSLEdBQXBCLEVBQXlCVyxHQUF6QixFQUE4QkosTUFBOUIsRUFBc0NDLElBQUksQ0FBQ0gsT0FBM0MsRUFBb0QsSUFBcEQ7QUFDRCxXQUZEO0FBR0QsU0FKRCxNQUlPO0FBQ0wsZUFBS1AsU0FBTCxDQUFlLEtBQUtFLEdBQXBCLEVBQXlCLElBQXpCLEVBQStCTyxNQUEvQixFQUF1Q0MsSUFBSSxDQUFDSCxPQUE1QztBQUNEO0FBQ0YsT0FURCxNQVNPO0FBQ0wsYUFBS1AsU0FBTCxDQUFlLEtBQUtFLEdBQXBCLEVBQXlCLElBQXpCLEVBQStCTyxNQUEvQixFQUF1Q0MsSUFBSSxDQUFDSCxPQUE1QztBQUNEO0FBQ0Y7QUFDRixHQWpCRDs7QUFrQkFoQixHQUFDLENBQUN1QixPQUFGLENBQVUsSUFBVixFQUFnQixZQUFoQjs7QUFDQSxPQUFLQyxjQUFMLEdBQXNCQyxXQUFXLENBQUMsS0FBS1IsVUFBTixFQUFrQlgsSUFBbEIsQ0FBakM7QUFDRDtBQUVEOzs7Ozs7QUFJQUwsVUFBVSxDQUFDeUIsU0FBWCxDQUFxQkMsS0FBckIsR0FBNkIsWUFBWTtBQUN2QyxTQUFPLEtBQUtoQixHQUFaO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7QUFJQVYsVUFBVSxDQUFDeUIsU0FBWCxDQUFxQkUsYUFBckIsR0FBcUMsWUFBWTtBQUMvQyxTQUFPLEtBQUtsQixXQUFaO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7O0FBS0FULFVBQVUsQ0FBQ3lCLFNBQVgsQ0FBcUJHLFFBQXJCLEdBQWdDLFVBQVUxQixRQUFWLEVBQW9CO0FBQ2xELE9BQUtrQixpQkFBTCxHQUF5QmxCLFFBQXpCO0FBQ0QsQ0FGRDtBQUlBOzs7OztBQUdBRixVQUFVLENBQUN5QixTQUFYLENBQXFCTixNQUFyQixHQUE4QixZQUFZO0FBQ3hDVSxlQUFhLENBQUMsS0FBS04sY0FBTixDQUFiO0FBQ0QsQ0FGRDs7QUFJQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsVUFBakIiLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNub3dmbGFrZSA9IHJlcXVpcmUoXCIuL3Nub3dmbGFrZS1pZFwiKTtcbmNvbnN0IF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvY2VzcyAtIGZ1bmN0aW9uIHRvIGdldCB0aGUgcmVzdWx0IGZyb21cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXQgLSB3aW5kb3cgdGFyZ2V0IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gdGltZSBpbiBtaWxpc2Vjb25kcyBob3cgb2Z0ZW4gdGhlIGNhbGxiYWNrIHNob3VsZCBiZSBpbnZva2VkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9uY2VPbmx5IC0gaWYgc2V0IHRvIHRydWUgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBvbmNlIG9ubHkgYW5kIHN1YnNyaWJlciB3aWxsIGJlIHJlbW92ZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzY3JpYmVyIChwcm9jZXNzLCBjYWxsYmFjaywgdGFyZ2V0LCBtYW5pZmVzdElkLCB0aW1lLCBvbmNlT25seSkge1xuICB0aGlzLl9wcm9jZXNzID0gcHJvY2VzcztcbiAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgdGhpcy5fbWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuX2lkID0gU3RyaW5nKFNub3dmbGFrZS5Tbm93Zmxha2VJZC5nZXRVVUlEKCkpO1xuICB0aGlzLl9vbmNlT25seSA9IG9uY2VPbmx5O1xuICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMub25JbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wcm9jZXNzKCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgaWYgKHRoaXMuX29uY2VPbmx5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrKHNlbGYuX2lkLCBlcnIsIHJlc3VsdCwgc2VsZi5fdGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5iaW5kQWxsKHRoaXMsIFwib25JbnRlcnZhbFwiKTtcbiAgdGhpcy5faW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKHRoaXMub25JbnRlcnZhbCwgdGltZSk7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faWQ7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqL1xuU3Vic2NyaWJlci5wcm90b3R5cGUuZ2V0TWFuaWZlc3RJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX21hbmlmZXN0SWQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIGFuZCB3aGVuIFwib25jZU9ubHlcIiBpcyBzZXQgdG8gdHJ1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLm9uRmluaXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMuX2NhbGxiYWNrT25GaW5pc2ggPSBjYWxsYmFjaztcbn07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbFRpbWVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaWJlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar translation = __webpack_require__(0);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds) {\n  if (typeof manifestIds === 'string') {\n    unsubscribeSingle(api, onSuccess, onFailure, target, manifestIds);\n  } else {\n    api.subscribersController.unsubscribe(manifestIds);\n    api.subscribersController.unsubscribe(manifestIds.sort().join(','));\n  }\n};\n\nfunction unsubscribeSingle(api, onSuccess, onFailure, target, manifestId) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n\n  if (manifest) {\n    api.subscribersController.unsubscribe(manifestId);\n    onSuccess();\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvdW5zdWJzY3JpYmUuanM/MmQ4MSJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZHMiLCJ1bnN1YnNjcmliZVNpbmdsZSIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwic29ydCIsImpvaW4iLCJtYW5pZmVzdElkIiwibWFuaWZlc3QiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEJ5SWQiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFdBQTdDLEVBQTBEO0FBQ3pFLE1BQUksT0FBT0EsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNuQ0MscUJBQWlCLENBQUNMLEdBQUQsRUFBTUMsU0FBTixFQUFpQkMsU0FBakIsRUFBNEJDLE1BQTVCLEVBQW9DQyxXQUFwQyxDQUFqQjtBQUNELEdBRkQsTUFFTztBQUNMSixPQUFHLENBQUNNLHFCQUFKLENBQTBCQyxXQUExQixDQUFzQ0gsV0FBdEM7QUFDQUosT0FBRyxDQUFDTSxxQkFBSixDQUEwQkMsV0FBMUIsQ0FBc0NILFdBQVcsQ0FBQ0ksSUFBWixHQUFtQkMsSUFBbkIsQ0FBd0IsR0FBeEIsQ0FBdEM7QUFDRDtBQUNGLENBUEQ7O0FBU0EsU0FBU0osaUJBQVQsQ0FBNEJMLEdBQTVCLEVBQWlDQyxTQUFqQyxFQUE0Q0MsU0FBNUMsRUFBdURDLE1BQXZELEVBQStETyxVQUEvRCxFQUEyRTtBQUN6RSxNQUFNQyxRQUFRLEdBQUdYLEdBQUcsQ0FBQ1ksa0JBQUosQ0FBdUJDLGVBQXZCLENBQXVDSCxVQUF2QyxDQUFqQjs7QUFDQSxNQUFJQyxRQUFKLEVBQWM7QUFDWlgsT0FBRyxDQUFDTSxxQkFBSixDQUEwQkMsV0FBMUIsQ0FBc0NHLFVBQXRDO0FBQ0FULGFBQVM7QUFDVixHQUhELE1BR087QUFDTEMsYUFBUyxDQUFDTixXQUFXLENBQUNrQixRQUFaLENBQXFCbEIsV0FBVyxDQUFDbUIsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxTQUE3QyxFQUF3RFAsVUFBeEQsQ0FBRCxDQUFUO0FBQ0Q7QUFDRiIsImZpbGUiOiI4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZHMpIHtcbiAgaWYgKHR5cGVvZiBtYW5pZmVzdElkcyA9PT0gJ3N0cmluZycpIHtcbiAgICB1bnN1YnNjcmliZVNpbmdsZShhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWRzKTtcbiAgfSBlbHNlIHtcbiAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWRzKTtcbiAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWRzLnNvcnQoKS5qb2luKCcsJykpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1bnN1YnNjcmliZVNpbmdsZSAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGNvbnN0IG1hbmlmZXN0ID0gYXBpLm1hbmlmZXN0Q29udHJvbGxlci5nZXRNYW5pZmVzdEJ5SWQobWFuaWZlc3RJZCk7XG4gIGlmIChtYW5pZmVzdCkge1xuICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZCk7XG4gICAgb25TdWNjZXNzKCk7XG4gIH0gZWxzZSB7XG4gICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, downloadFolder) {\n  api.downloadsController.updateDownloadFolder(manifestId, downloadFolder, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvdXBkYXRlLWRvd25sb2FkLWZvbGRlci5qcz8zMjNmIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZG93bmxvYWRGb2xkZXIiLCJkb3dubG9hZHNDb250cm9sbGVyIiwidXBkYXRlRG93bmxvYWRGb2xkZXIiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFVBQTdDLEVBQXlEQyxjQUF6RCxFQUF5RTtBQUN4RkwsS0FBRyxDQUFDTSxtQkFBSixDQUF3QkMsb0JBQXhCLENBQTZDSCxVQUE3QyxFQUF5REMsY0FBekQsRUFBeUVKLFNBQXpFLEVBQW9GQyxTQUFwRjtBQUNELENBRkQiLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCBkb3dubG9hZEZvbGRlcikge1xuICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci51cGRhdGVEb3dubG9hZEZvbGRlcihtYW5pZmVzdElkLCBkb3dubG9hZEZvbGRlciwgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, subscribers) {\n  api.subscribersController.removeSubscribersById(subscribers);\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvYmUtbWV0aG9kcy9yZW1vdmUtc3Vic2NyaWJlcnMuanM/NTMzYiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0Iiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJyZW1vdmVTdWJzY3JpYmVyc0J5SWQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFdBQTdDLEVBQTBEO0FBQ3pFSixLQUFHLENBQUNLLHFCQUFKLENBQTBCQyxxQkFBMUIsQ0FBZ0RGLFdBQWhEO0FBQ0FILFdBQVM7QUFDVixDQUhEIiwiZmlsZSI6IjgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgc3Vic2NyaWJlcnMpIHtcbiAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci5yZW1vdmVTdWJzY3JpYmVyc0J5SWQoc3Vic2NyaWJlcnMpO1xuICBvblN1Y2Nlc3MoKTtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n")},function(module,exports,__webpack_require__){"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(5);\n\nvar _require = __webpack_require__(13),\n    mkdirp = _require.mkdirp;\n\nvar appSettings = __webpack_require__(1);\n\nvar translation = __webpack_require__(0);\n\nvar Download = __webpack_require__(85);\n\nvar DownloadsStorageController = __webpack_require__(90);\n\nvar downloadUtil = __webpack_require__(94);\n\nvar DownloadStats = __webpack_require__(95);\n\nvar STATUSES = __webpack_require__(8);\n\nvar CODES = __webpack_require__(6);\n\nvar constants = __webpack_require__(20);\n\nvar utilUrl = __webpack_require__(36);\n\nvar path = __webpack_require__(4);\n\nvar ReadItem = __webpack_require__(37);\n\nvar FlushItem = __webpack_require__(12);\n\nvar downloadFileUtil = __webpack_require__(7);\n/**\n *\n * @param {ManifestController} manifestController - existing manifest controller\n * @param {OfflineController} offlineController - existing offline controller\n * @constructor\n */\n\n\nfunction DownloadsController(manifestController, offlineController) {\n  this._manifestsDownloadOrder = [];\n  this._manifestsDownloadOrderObj = {};\n  this._manifestController = manifestController;\n  this._offlineController = offlineController;\n  this.storage = new DownloadsStorageController();\n\n  this._offlineController.setDownloadStorage(this.storage);\n\n  this._names = {\n    downloadInProgress: "downloadInProgress",\n    options: "options",\n    maxDownloadInProgress: "maxDownloadInProgress"\n  };\n  this._STATS_TIME_GENERATION = 1000;\n  this.downloadStats = new DownloadStats(this.storage);\n\n  _.bindAll(this, "_onDownloadEnd", "_onDownloadError", "isDownloadFinished");\n}\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._addDownloads = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var working = true;\n\n  this._prepareStartOptions(manifestId, videoLinks, audioLinks, textLinks);\n\n  while (working) {\n    var ratioAudioVideo = videoLinks.length ? Math.round(audioLinks.length / videoLinks.length) : 1;\n    var ratioTextVideo = videoLinks.length ? Math.round(textLinks.length / videoLinks.length) : 1;\n\n    this._addNextItemToQueue(manifestId, textLinks, ratioTextVideo);\n\n    this._addNextItemToQueue(manifestId, audioLinks, ratioAudioVideo);\n\n    this._addNextItemToQueue(manifestId, videoLinks);\n\n    working = !!(textLinks.length || videoLinks.length || audioLinks.length);\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} links - array of links to be downloaded\n * @param {number} nbItems - the rnumber of items to add to the queue\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._addNextItemToQueue = function (manifestId, links, nbItems) {\n  var link;\n\n  if (!nbItems) {\n    nbItems = 1;\n  }\n\n  if (links.length) {\n    while (nbItems > 0) {\n      link = links.shift();\n      link.manifestId = manifestId;\n      this.storage.left.push(manifestId, link);\n      nbItems--;\n    }\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} asFirst - to force to download manifest without wiating in queue\n * @returns {boolean} - status if operation was successfully\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderAddManifest = function (manifestId, asFirst) {\n  if (!this._downloadOrderManifestExists(manifestId)) {\n    this._manifestsDownloadOrderObj[manifestId] = true;\n\n    if (asFirst) {\n      this._manifestsDownloadOrder.unshift(manifestId);\n    } else {\n      this._manifestsDownloadOrder.push(manifestId);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n *\n * @param {number} nextManifestPositionInArray - index number from array _manifestsDownloadOrder\n * @returns {manifestId} - manifest identifier\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderGetManifestId = function (nextManifestPositionInArray) {\n  return this._manifestsDownloadOrder[nextManifestPositionInArray];\n};\n/**\n *\n * @param {manifestId} manifestId -  manifest identifier\n * @returns {number} index number from array _manifestsDownloadOrder\n * @private\n */\n\n\nDownloadsController.prototype._indexOfManifest = function (manifestId) {\n  return this._manifestsDownloadOrder.indexOf(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} - if manifest has been already added to the queue\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderManifestExists = function (manifestId) {\n  return this._manifestsDownloadOrderObj[manifestId];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - status if manifest has been removed from queue\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderRemoveManifest = function (manifestId) {\n  var found = false,\n      i,\n      j;\n  delete this._manifestsDownloadOrderObj[manifestId];\n\n  for (i = 0, j = this._manifestsDownloadOrder.length; i < j; i++) {\n    if (this._manifestsDownloadOrder[i] === manifestId) {\n      this._manifestsDownloadOrder.splice(i, 1);\n\n      found = true;\n      break;\n    }\n  }\n\n  return found;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when download finishes with success\n * @param {function} onFailure - callback to be invoked when download failed\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._finish = function (manifestId, onSuccess, onFailure) {\n  this.downloadStats.refresh();\n\n  this._downloadOrderRemoveManifest(manifestId);\n\n  if (!this._manifestsDownloadOrder.length) {\n    this.downloadStats.stop();\n  }\n\n  this.storage.removeItem(manifestId).then(onSuccess, onFailure);\n};\n/**\n *\n * @param {object} link - link object which consist remote and local url\n * @private\n * @returns {string} - unique hash for download file based on local and remote url\n */\n\n\nDownloadsController.prototype._getDownloadHash = function (link) {\n  return link.remoteUrl + "-" + link.localUrl;\n};\n/**\n *\n * @param {Download} download - download class to be marked either with success or with error\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._markDownloadItem = function (download) {\n  var self = this;\n  var manifestId = download.manifestId;\n\n  var downloadHash = self._getDownloadHash(download);\n\n  var syncStorageKeys = [];\n  var lastItem;\n  download.events.removeListener("end", self._onDownloadEnd);\n  download.events.removeListener("error", self._onDownloadError); //refreshing stats for last time - to have correct stats for subscribers progress before it is removed\n\n  if (self.storage.downloading.count(manifestId) === 1 && self.storage.left.count(manifestId) === 0) {\n    this.downloadStats.refresh();\n    lastItem = true;\n  }\n\n  if (download.status === STATUSES.FINISHED) {\n    self.storage.downloaded.push(manifestId, download);\n    syncStorageKeys.push(this.storage.stores.DOWNLOADS.DOWNLOADED);\n  } else {\n    self.storage.errors.push(manifestId, download);\n  }\n\n  self.storage.downloading.removeItem(manifestId, downloadHash);\n\n  if (self.isDownloadFinished(manifestId)) {\n    if (self.storage.errors.count(manifestId) === 0) {\n      self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n    } else {\n      self.storage.status.setItem(manifestId, "status", STATUSES.ERROR);\n    }\n\n    syncStorageKeys.push(this.storage.stores.STATUS);\n  }\n\n  self.storage.sync(manifestId, syncStorageKeys).then(function () {\n    self.storage.params.decrease(manifestId, self._names.downloadInProgress);\n\n    if (lastItem) {\n      self._finish(manifestId, function () {\n        self.startQueue();\n        console.info("FINISHED", manifestId);\n      }, function () {\n        self.startQueue();\n      });\n    } else {\n      self.startQueue();\n    }\n  }, function (err) {\n    console.error("ERROR", err);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @param {string} status - the status\n * @param {string} statusDetails - adds details about status (on errors for example)\n * @returns {void}\n */\n\n\nDownloadsController.prototype._stopWithStatus = function (manifestId, onSuccess, onFailure, status, statusDetails) {\n  var self = this;\n\n  self._downloadOrderRemoveManifest(manifestId);\n\n  self.storage.getItem(manifestId).then(function (result) {\n    if (!result) {\n      onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED, manifestId));\n      return;\n    }\n\n    var itemsToStop = self.storage.downloading.getKeys(manifestId);\n    var itemToStop;\n    console.info("STOPPING", manifestId, itemsToStop.length);\n    var promises = [];\n\n    for (var i = 0, j = itemsToStop.length; i < j; i++) {\n      itemToStop = self.storage.downloading.getItem(manifestId, itemsToStop[i]);\n      itemToStop.events.removeListener("end", self._onDownloadEnd);\n      itemToStop.events.removeListener("error", self._onDownloadError);\n      promises.push(itemToStop.stopPromise());\n    }\n\n    self.storage.status.setItem(manifestId, "status", status);\n\n    if (statusDetails) {\n      self.storage.status.setItem(manifestId, "details", statusDetails);\n    }\n\n    promises.push(self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]));\n    Promise.all(promises).then(function () {\n      self._finish(manifestId, onSuccess, onFailure);\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n  });\n};\n/**\n * @param {Download} download - Download Class\n * @param {object} err - error object\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._onDownloadError = function (download, err) {\n  console.error("ERROR", download.remoteUrl, err);\n\n  this._markDownloadItem(download);\n\n  if (err === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR || appSettings.getSettings().stopOnError) {\n    // stop downloading => cannot write\n    this._stopWithStatus(download.manifestId, function () {\n      console.info(\'stopped\');\n    }, function (failure) {\n      console.info(failure);\n    }, STATUSES.ERROR, err);\n  }\n};\n/**\n *\n * @param {Download} download - Download Class\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._onDownloadEnd = function (download) {\n  // console.log("FINISHED", download.remoteUrl, download.localUrl);\n  this._markDownloadItem(download);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._prepareStartOptions = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var count = videoLinks.length + audioLinks.length + textLinks.length;\n  console.info("ADDING ->>> ", manifestId + ",", count, "fragments");\n  var options = {};\n  this.storage.params.setItem(manifestId, this._names.downloadInProgress, 0);\n  var maxDownloadInProgress;\n  var threadRules = appSettings.getSettings().downloadingThreadsRules;\n\n  for (var i = 0, j = threadRules.items.length; i < j; i++) {\n    if (count <= threadRules.items[i].max) {\n      options[threadRules.threadName] = threadRules.items[i].threads;\n      maxDownloadInProgress = threadRules.items[i].files;\n      break;\n    }\n  }\n\n  this.storage.params.setItem(manifestId, this._names.options, options);\n  this.storage.params.setItem(manifestId, this._names.maxDownloadInProgress, maxDownloadInProgress); //download order can help to stop download one manifest and download another or download them in parallel\n\n  this._downloadOrderAddManifest(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished\n */\n\n\nDownloadsController.prototype.isDownloadFinished = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished and synced (info written on disk)\n */\n\n\nDownloadsController.prototype.isDownloadFinishedAndSynced = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId) && !this.storage.keyExists(manifestId);\n};\n\nDownloadsController.prototype.getDownloading = function (manifestId, localFile) {\n  var items = this.storage.downloading.getItems(manifestId);\n\n  if (!items) {\n    return null;\n  }\n\n  for (var link in items) {\n    if (items.hasOwnProperty(link)) {\n      var download = items[link];\n      var downloadPath = path.normalize(download.localUrl);\n      var local = path.normalize(localFile);\n\n      if (downloadPath === local) {\n        return download;\n      }\n    }\n  }\n\n  return null;\n};\n\nDownloadsController.prototype.waitForDownload = function (download, callback) {\n  var _onDownloadEnd;\n\n  var _onDownloadError;\n\n  var removeListener = function removeListener(download) {\n    download.events.removeListener("end", _onDownloadEnd);\n    download.events.removeListener("error", _onDownloadError);\n  };\n\n  _onDownloadEnd = function _onDownloadEnd(download) {\n    removeListener(download);\n    callback();\n  };\n\n  _onDownloadError = function _onDownloadError(download, err) {\n    removeListener(download);\n    callback(err);\n  };\n\n  download.events.on("end", _onDownloadEnd);\n  download.events.on("error", _onDownloadError);\n};\n/**\n* Perform a seek - this changes order of fragment download for a manifest\n* @param {string} manifestId - manifest identifier\n* @param {string} localFile - local file\n* @param {function} callback - callback to get result\n* @returns {void}\n*/\n\n\nDownloadsController.prototype.performSeek = function (manifestId, localFile, callback) {\n  var self = this;\n  var download;\n  download = self.getDownloading(manifestId, localFile);\n\n  if (download) {\n    self.waitForDownload(download, callback);\n    return;\n  }\n\n  var items = self.storage.left.getItems(manifestId);\n\n  if (!items) {\n    callback(\'No download found\');\n    return;\n  }\n\n  var index = items.findIndex(function (download) {\n    var downloadPath = path.normalize(download.localUrl);\n    var local = path.normalize(localFile);\n    return downloadPath === local;\n  });\n\n  if (index > -1) {\n    var part1 = items.slice(0, index);\n    var part2 = items.slice(index);\n    self.storage.left.clear(manifestId);\n    self.storage.left.concat(manifestId, part2);\n    self.storage.left.concat(manifestId, part1);\n    items = self.storage.left.getItems(manifestId);\n    self.startQueue(self._indexOfManifest(manifestId), true);\n    download = self.getDownloading(manifestId, localFile);\n\n    if (download) {\n      self.waitForDownload(download, callback);\n    } else {\n      // if not queued, return an error\n      callback(\'No download found\');\n    }\n  } else {\n    callback(\'No download found\');\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {string} downloadFolder - download folder for video. If undefined, then default download folder is used\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @param {boolean} fromResumed - if start has been called from resume api method\n * @param {string} oldstatus - if from resumed, then indicates the old status of download\n * @returns {void}\n */\n\n\nDownloadsController.prototype.start = function (manifestId, representations, downloadFolder, onSuccess, onFailure, fromResumed, oldstatus) {\n  var self = this;\n  this.downloadStats.start();\n\n  var manifest = this._manifestController.getManifestById(manifestId);\n\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n\n  representations = representations || {};\n  var video = representations.video || [];\n\n  if (!Array.isArray(video)) {\n    video = [video];\n  }\n\n  var audio = representations.audio || [];\n\n  if (!Array.isArray(audio)) {\n    audio = [audio];\n  }\n\n  var text = representations.text || [];\n\n  if (!Array.isArray(text)) {\n    text = [text];\n  }\n\n  var videoR = manifest.getVideoRepresentations();\n  var audioR = manifest.getAudioRepresentations();\n  var textR = manifest.getTextRepresentations();\n  var localDownloadFolder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n\n  if (downloadFolder) {\n    localDownloadFolder = path.resolve(downloadFolder);\n  }\n\n  var localPath = path.resolve(localDownloadFolder + "/" + manifestId + "/");\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestName = manifest.getManifestName();\n\n  function getManifestBaseUrl(xml, manifestUrlDomain) {\n    var manifestBaseUrl;\n    var MPD = xml.getElementsByTagName("MPD")[0];\n\n    if (MPD) {\n      for (var i = 0, j = MPD.childNodes.length; i < j; i++) {\n        if (MPD.childNodes[i].nodeName === "BaseURL") {\n          manifestBaseUrl = MPD.childNodes[i].textContent;\n\n          if (!manifestBaseUrl.match(constants.regexpProtocolRemove)) {\n            manifestBaseUrl = utilUrl.joinPath(manifestUrlDomain, manifestBaseUrl);\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (!manifestBaseUrl) {\n      manifestBaseUrl = manifestUrlDomain;\n    }\n\n    return manifestBaseUrl;\n  }\n\n  Promise.all([this._offlineController.getManifestInfoPromise(manifestId, true), this.storage.getItem(manifestId), mkdirp(localPath)]).then(function (results) {\n    var info = results[0];\n    var storageItem = results[1];\n\n    if (storageItem && !self.isDownloadFinished(manifestId)) {\n      if (fromResumed) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_RESUMED, manifestId));\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      }\n\n      return;\n    } //collect Links - start\n\n\n    if (info.manifest.video) {\n      video = _.union(video, info.manifest.video);\n    }\n\n    if (info.manifest.audio) {\n      audio = _.union(audio, info.manifest.audio);\n    }\n\n    if (info.manifest.text) {\n      text = _.union(text, info.manifest.text);\n    }\n\n    var downloaded = info.downloadedFiles || [];\n    var downloadedHash = {};\n\n    for (var i = 0, j = downloaded.length; i < j; i++) {\n      downloadedHash[downloaded[i].localUrl] = downloaded[i];\n    }\n\n    var remotePath = getManifestBaseUrl(manifest.manifestXML.xml, manifest.url_domain);\n    var videoLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, video, videoR, downloadedHash);\n    var audioLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, audio, audioR, downloadedHash);\n    var textLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, text, textR, downloadedHash);\n    var allvideoLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, video, videoR);\n    var allaudioLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, audio, audioR);\n    var alltextLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, text, textR);\n    var allFiles = allvideoLinks.concat(allaudioLinks, alltextLinks); //collect Links - end\n\n    self.storage.createIfNotExists(manifestId).then(function () {\n      self.storage.manifest.setItem(manifestId, "ts", new Date().getTime());\n      self.storage.manifest.setItem(manifestId, "url", manifestUrl);\n      self.storage.manifest.setItem(manifestId, "name", manifestName);\n      self.storage.manifest.setItem(manifestId, "video", video);\n      self.storage.manifest.setItem(manifestId, "audio", audio);\n      self.storage.manifest.setItem(manifestId, "text", text);\n      self.storage.manifest.setItem(manifestId, "files", allFiles);\n      self.storage.manifest.setItem(manifestId, "folder", localDownloadFolder);\n      self.storage.downloaded.clear(manifestId);\n      self.storage.downloaded.concat(manifestId, downloaded);\n      self.storage.errors.clear(manifestId);\n\n      if (!fromResumed) {\n        // do not initialise state of manifest is start is from resume\n        // state must stay the last one\n        self.storage.status.setItem(manifestId, "status", STATUSES.CREATED);\n      } else {\n        // init status with last status\n        self.storage.status.setItem(manifestId, "status", oldstatus);\n      }\n\n      Promise.all([self.storage.sync(manifestId, [self.storage.stores.MANIFEST, self.storage.stores.STATUS]), self._manifestController.saveOriginalManifestOnceOnly(manifestId), self._manifestController.saveManifestWithChosenRepresentations(manifestId, {\n        video: video,\n        audio: audio,\n        text: text\n      }, localPath)]).then(function () {\n        self._addDownloads(manifestId, videoLinks, audioLinks, textLinks);\n\n        if (self._indexOfManifest(manifestId) > appSettings.getSettings().numberOfManifestsInParallel - 1) {\n          self.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n        } else {\n          self.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n        }\n\n        self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId));\n        self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]).then(function () {\n          self.downloadStats.refresh();\n\n          if (self.isDownloadFinished(manifestId)) {\n            self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n            self.storage.sync(manifestId, self.storage.stores.STATUS).then(function () {\n              self._finish(manifestId, onSuccess, onFailure);\n            }, onFailure);\n          } else {\n            self.downloadStats.start();\n            self.startQueue();\n            onSuccess();\n          }\n        }, onFailure);\n      }, onFailure);\n    }, onFailure);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.resume = function (manifestId, representations, onSuccess, onFailure) {\n  var self = this;\n\n  this._offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.RESUMING_FAILED, manifestId), err);\n    } else {\n      var folder = info.manifest.folder;\n\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n\n      self.start(manifestId, representations, folder, onSuccess, onFailure, true, info.status);\n    }\n  });\n};\n/**\n * Update download folder path\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.updateDownloadFolder = function (manifestId, downloadFolder, onSuccess, onFailure) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var manifestSettings = results[0];\n\n    if (!manifestSettings) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    manifestSettings.folder = downloadFolder;\n    var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.MANIFEST, manifestSettings);\n    flushItem.save().then(function () {\n      onSuccess();\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.UPDATE_DOWNLOAD_FOLDER_FAILED, manifestId), err);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.stop = function (manifestId, onSuccess, onFailure) {\n  this._stopWithStatus(manifestId, onSuccess, onFailure, STATUSES.STOPPED);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} ignoreStopped - don\'t fail if download has been already stopped\n * @returns {Promise} - promise\n */\n\n\nDownloadsController.prototype.stopPromise = function (manifestId, ignoreStopped) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stop(manifestId, resolve, function (err) {\n      if (err) {\n        if (ignoreStopped && err.code === CODES.ERRORS.STOPPED) {\n          resolve();\n          return;\n        }\n\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\n\n\nDownloadsController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stopPromise(manifestId).then(function () {\n      self.storage.removeItem(manifestId).then(resolve, reject);\n    }, function (err) {\n      //already stopped, continue\n      if (err && err.code === CODES.ERRORS.STOPPED) {\n        self.storage.removeItem(manifestId).then(resolve, reject);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} link - object link to be downloaded\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._addLinkToDownload = function (manifestId, link) {\n  var self = this;\n  var params = Object.assign({}, link);\n  var download = new Download(params, self.storage.params.getItem(manifestId, self._names.options));\n\n  var downloadHash = self._getDownloadHash(link);\n\n  self.storage.downloading.setItem(manifestId, downloadHash, download);\n  self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId) + self.storage.errors.count(manifestId));\n  self.storage.sync(manifestId, self.storage.stores.STATUS);\n  download.events.on("end", self._onDownloadEnd);\n  download.events.on("error", self._onDownloadError);\n  download.start();\n  return download;\n};\n/**\n *\n * @param {number} [nextManifestPositionInArray] - index from array to decide which manifest should be downloaded next\n *   (queue)\n * @param {boolean} forceDownload true to force next download to be queued\n * @returns {void}\n */\n\n\nDownloadsController.prototype.startQueue = function (nextManifestPositionInArray, forceDownload) {\n  var count, downloadsInProgress, link, manifestId, maxDownloads;\n\n  if (typeof nextManifestPositionInArray === "undefined") {\n    nextManifestPositionInArray = 0;\n  }\n\n  manifestId = this._downloadOrderGetManifestId(nextManifestPositionInArray);\n\n  if (manifestId && this.isDownloadFinished(manifestId)) {\n    // the manifest id will be removed from queue, wait next time. Thus, do not change status\n    return;\n  }\n\n  if (nextManifestPositionInArray >= appSettings.getSettings().numberOfManifestsInParallel) {\n    if (manifestId) {\n      this.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n    }\n\n    return;\n  } else {\n    this.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n  }\n\n  if (!manifestId) {\n    count = 0;\n    var i, j, items;\n    items = this.storage.getKeys();\n\n    for (i = 0, j = items.length; i < j; i++) {\n      count += this.storage.params.count(items[i], this._names.downloadInProgress);\n    }\n\n    if (count === 0) {\n      this.downloadStats.stop();\n    }\n\n    return;\n  }\n\n  downloadsInProgress = this.storage.params.getItem(manifestId, this._names.downloadInProgress);\n  maxDownloads = this.storage.params.getItem(manifestId, this._names.maxDownloadInProgress);\n\n  if (downloadsInProgress < maxDownloads - 1 || forceDownload) {\n    link = this.storage.left.shift(manifestId);\n\n    if (link) {\n      this.storage.params.increase(manifestId, this._names.downloadInProgress);\n\n      this._addLinkToDownload(manifestId, link);\n    } else {\n      //check next manifest\n      nextManifestPositionInArray++;\n    }\n\n    this.startQueue(nextManifestPositionInArray);\n  } else if (appSettings.getSettings().numberOfManifestsInParallel > 1 && nextManifestPositionInArray < appSettings.getSettings().numberOfManifestsInParallel) {\n    nextManifestPositionInArray++;\n    this.startQueue(nextManifestPositionInArray);\n  }\n};\n\nmodule.exports = DownloadsController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _ = __webpack_require__(5);\n\nvar domain = __webpack_require__(86);\n\nvar DownloadFileNoHead = __webpack_require__(87);\n\nvar DownloadFile = __webpack_require__(88);\n\nvar _require = __webpack_require__(13),\n    mkdirp = _require.mkdirp;\n\nvar appSettings = __webpack_require__(1);\n\nvar EventEmitter = __webpack_require__(14).EventEmitter;\n\nvar STATUSES = __webpack_require__(8);\n/**\n *\n * @param {object} params - parameters connected with download like id, bandwidth, contentType, remoteUrl, localUrl\n * see util class {@link downloadUtil.getDownloadLinks}\n * @param {object} options - options chosen for whole manifest, like number of chunks, retry,\n * @constructor\n */\n\n\nfunction Download(params, options) {\n  this._defaults = {};\n  this._defaults.threads = appSettings.getSettings().downloadingThreadsRules.threads;\n  this.status = STATUSES.CREATED;\n  Object.assign(this, params);\n  this._options = Object.assign(this._defaults, options);\n  this._options.maxDownloadRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_RETRY;\n  this._options.maxDownloadChunkRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.maxDownloadChunkInternetRetry = appSettings.getSettings().MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.timeout = appSettings.getSettings().times.DOWNLOAD_TIMEOUT;\n  this._options.retryTimeout = appSettings.getSettings().times.RETRY_TIMEOUT;\n  this._options.useChunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n  this._options.useHeadRequests = appSettings.getSettings().useHeadRequests;\n  this._options.noCache = appSettings.getSettings().noCache;\n  this.stats = {\n    available: 0,\n    downloaded: 0,\n    file_size: 0,\n    writeProgress: 0\n  };\n\n  _.bindAll(this, "_onError", "_onEnd", "_onData", "_updateStats", "_attachEvents", "_removeEvents", "_removeEventsOnStop");\n\n  this.events = new EventEmitter();\n}\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._attachEvents = function () {\n  this._dl.on(\'error\', this._onError);\n\n  this._dl.on(\'end\', this._onEnd);\n\n  this._dl.on(\'data\', this._onData);\n};\n/**\n *\n * @param {function} callback - callback to be invoked then local path is created\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._createLocalPath = function (callback) {\n  var folders = this.localUrl.split("/");\n  folders = folders.slice(0, folders.length - 1);\n  folders = folders.join("/");\n  mkdirp(folders).then(function () {\n    callback();\n  }, function (error) {\n    callback(error);\n  });\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onData = function () {\n  this._updateStats();\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onEnd = function () {\n  this.status = STATUSES.FINISHED;\n\n  this._updateStats();\n\n  this._removeEvents();\n\n  this.events.emit("end", this);\n};\n/**\n *\n * @param {object} data - error data\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onError = function (data) {\n  var self = this;\n  this.status = STATUSES.ERROR;\n  data = data || {};\n  var message = data.message || "";\n\n  self._removeEvents();\n\n  self._updateStats(); // notify only if there exists any error listener (from downloads controller)\n  // otherwise EventEmitter throws an error\n\n\n  if (self.events.listeners(\'error\').length) {\n    self.events.emit("error", self, message);\n  }\n};\n\nDownload.prototype._onDomainError = function (data) {\n  var self = this;\n  data = data || {};\n  var message = data.message || "";\n\n  if (self._dl) {\n    if (message === \'net::ERR_NETWORK_CHANGED\' || message === \'net::ERR_SPDY_PROTOCOL_ERROR\' || message === \'net::ERR_HTTP2_PROTOCOL_ERROR\') {\n      // network changed during download, retry download\n      self.stop(function () {\n        self.start();\n      });\n    } else {\n      // stop current download to release file stream and notify error\n      self.stop(function () {\n        self._onError(data);\n      });\n    }\n  } else {\n    self._onError(data);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._removeEvents = function () {\n  if (typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n\n    this._dl.removeListener(\'end\', this._onEnd);\n\n    this._dl.removeListener(\'data\', this._onData);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._removeEventsOnStop = function () {\n  if (this._dl && typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n\n    this._dl.removeListener(\'end\', this._onEnd);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._updateStats = function () {\n  if (this.status === STATUSES.FINISHED) {\n    this.stats.available = this._dl.file_size;\n    this.stats.writeProgress = 1;\n  } else {\n    this.stats.available = this._dl.available;\n    this.stats.writeProgress = this._dl.writeProgress;\n  }\n\n  this.stats.downloaded = this._dl.downloaded;\n  this.stats.file_size = this._dl.file_size;\n};\n/**\n * @returns {void}\n */\n\n\nDownload.prototype.start = function () {\n  var self = this;\n  this.status = STATUSES.STARTED;\n\n  this._createLocalPath(function (err) {\n    if (err) {\n      self._onError(err);\n\n      return;\n    } // NOTE: domain module is marked to be deprecated in the future,\n    //       we will use it until NodeJS will propose alternative or\n    //       rewrite with promises\n\n\n    var d = domain.create();\n    d.on(\'error\', function (err) {\n      var message = \'\';\n\n      if (err) {\n        message = err.code || err.message || "";\n      } // this needs to be disposed otherwise it might complain about unhandled error.\n\n\n      if (typeof d.dispose === "function") {\n        d.dispose();\n      }\n\n      self._onDomainError({\n        message: message\n      });\n    });\n    d.run(function () {\n      self._dl = self.createDownloader(self.remoteUrl, self.localUrl, self._options);\n\n      self._attachEvents();\n\n      self._dl.start();\n    });\n  });\n};\n/**\n * Creates file downloader\n * @param {string} [remoteUrl] - url of fragment\n * @param {string} [localUrl] - local url where to download fragment\n * @param {object} [options] - some options\n * @returns {void}\n */\n\n\nDownload.prototype.createDownloader = function (remoteUrl, localUrl, options) {\n  if (this._options.useHeadRequests) {\n    return new DownloadFile(remoteUrl, localUrl, options);\n  } else {\n    return new DownloadFileNoHead(remoteUrl, localUrl, options);\n  }\n};\n/**\n * @param {function} [resolve] - callback to be invoked when stop was successfully\n * @returns {void}\n */\n\n\nDownload.prototype.stop = function (resolve) {\n  var self = this;\n  this.status = STATUSES.STOPPED;\n\n  this._removeEventsOnStop();\n\n  if (typeof resolve !== "function") {\n    resolve = function resolve() {};\n  }\n\n  if (this._dl) {\n    var d = domain.create();\n    d.on(\'error\', function () {\n      resolve();\n    });\n    d.run(function () {\n      self._dl.on(\'error\', function () {\n        resolve();\n      });\n\n      self._dl.on(\'end\', function () {\n        resolve();\n      });\n\n      self._dl.stop();\n    });\n  } else {\n    resolve();\n  }\n};\n/**\n *\n * @returns {Promise} - promise\n */\n\n\nDownload.prototype.stopPromise = function () {\n  var self = this;\n  return new Promise(function (resolve) {\n    self.stop(function () {\n      resolve();\n    });\n  });\n};\n\nmodule.exports = Download;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85\n')},function(module,exports){eval('module.exports = require("domain");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkb21haW5cIj84NjM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZG9tYWluXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86\n')},function(module,exports,__webpack_require__){eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\nvar fs = __webpack_require__(2);\n\nvar _require = __webpack_require__(3),\n    net = _require.net;\n\nvar EventEmitter = __webpack_require__(14).EventEmitter;\n\nvar util = __webpack_require__(32);\n\nvar downloadFileUtil = __webpack_require__(7);\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\n\n\nfunction DownloadFileNoHead(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n\n  this._resetValues();\n}\n\nutil.inherits(DownloadFileNoHead, EventEmitter);\n\nDownloadFileNoHead.prototype._reset = function (callback) {\n  var self = this;\n\n  callback = callback || function () {};\n\n  self._closeStreamAndRequest(function () {\n    self._resetValues();\n\n    callback();\n  });\n};\n\nDownloadFileNoHead.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n};\n\nDownloadFileNoHead.prototype._createFileStream = function (callback) {\n  var self = this;\n\n  if (!this.fileStream) {\n    var destFile = this._destFile;\n    self.fileStream = fs.createWriteStream(destFile, {\n      flags: "w"\n    });\n    self.fileStream.on("error", callback);\n    self.fileStream.on("open", function () {\n      // for unknown reason from time to time the file descriptor of self.fileStream is null\n      // when event \'open\' is fired then the file descriptor is not a null anymore\n      // this should fix a problem with EBADF error\n      // a bug in fs ?\n      self.fileStream = this;\n      this.removeListener("error", callback);\n      this.on("error", function (error) {\n        if (error.code === "ENOSPC") {\n          // no space left on disk, do not retry downloading\n          self.emit("error", {\n            message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR,\n            data: error\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n            if (!retried) {\n              self.emit("error", {\n                message: downloadFileUtil.errors.FILE_WRITING_ERROR,\n                data: error\n              });\n            }\n          });\n        }\n      });\n      this.on("finish", function () {\n        if (!self.isDownloaded()) {\n          self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_SIZE_ERROR\n                });\n              });\n            }\n          });\n        } else {\n          self.writeProgress = 1;\n          self.emit("end");\n        }\n      });\n      callback();\n    });\n  } else {\n    callback();\n  }\n};\n\nDownloadFileNoHead.prototype.isDownloaded = function () {\n  return this.downloaded === this.file_size;\n};\n\nDownloadFileNoHead.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this._options.maxDownloadChunkInternetRetry;\n  } else {\n    maxDownloadRetry = this._options.maxDownloadRetry;\n  }\n\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self._reset(function () {\n        self.start();\n      });\n    }, self._options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\n\nDownloadFileNoHead.prototype._closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n\n  function onClose() {\n    clearTimeout(timer);\n\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n\n    delete self._req;\n    callback();\n  }\n\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n\n  if (this._req) {\n    this._req.abort();\n\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n/**\n * starts download\n * @returns {void}\n */\n\n\nDownloadFileNoHead.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this._options.timeout,\n    url: this._url\n  };\n\n  if (this._options.noCache) {\n    req_options.headers = {\n      \'Cache-Control\': \'no-cache\'\n    };\n  }\n\n  self._createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self._closeStreamAndRequest(function () {\n            self.emit("error", {\n              message: downloadFileUtil.errors.FILE_CREATING_ERROR\n            });\n          });\n        }\n      });\n\n      return;\n    }\n\n    req_options.headers = req_options.headers || {};\n    self._req = net.request(req_options);\n\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        console.error(\'ERROR (\' + self._url + \') :\' + error);\n\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.TIMEOUT,\n                  data: error\n                });\n              });\n            }\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_ERROR,\n                  data: error\n                });\n              });\n            }\n          });\n        }\n      });\n\n      if (response && response.statusCode >= 400) {\n        self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n          if (!retried) {\n            self._closeStreamAndRequest(function () {\n              console.error("HTTP DOWNLOAD ERROR url: ".concat(self._url, ", statusCode: ").concat(response.statusCode));\n              self.emit("error", {\n                message: downloadFileUtil.errors.CHUNK_ERROR,\n                data: response\n              });\n            });\n          }\n        });\n      } else {\n        self._headers = response.headers;\n        self.file_size = Number(self._headers["content-length"]);\n        response.on("data", function (data) {\n          if (response.statusCode === 200 || response.statusCode === 206) {\n            self.available += data.length;\n            self.downloaded += data.length;\n          }\n        });\n        response.pipe(self.fileStream);\n      }\n    });\n\n    self._req.end();\n  });\n\n  return this._promise;\n};\n/**\n * stops download\n * @returns {void}\n */\n\n\nDownloadFileNoHead.prototype.stop = function () {\n  var self = this;\n\n  this._reset(function () {\n    self.emit("error", {\n      message: downloadFileUtil.errors.ABORTED\n    });\n  });\n};\n\nmodule.exports = DownloadFileNoHead;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87\n')},function(module,exports,__webpack_require__){eval('var fs = __webpack_require__(2);\n\nvar _require = __webpack_require__(3),\n    net = _require.net;\n\nvar EventEmitter = __webpack_require__(14).EventEmitter;\n\nvar util = __webpack_require__(32);\n\nvar downloadFileUtil = __webpack_require__(7);\n\nvar DownloadFileChunk = __webpack_require__(89);\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\n\n\nfunction DownloadFile(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n\n  this._resetValues();\n}\n\nutil.inherits(DownloadFile, EventEmitter);\n/**\n *\n * @param {number} size - size of file\n * @private\n * @returns {*} - number of chunks\n */\n\nDownloadFile.prototype._calculateChunksNumber = function (size) {\n  var MB = 1024 * 1024;\n\n  for (var i = 0, j = this._options.threads.length; i < j; i++) {\n    if (size < this._options.threads[i].size * MB) {\n      return this._options.threads[i].number;\n    }\n  }\n\n  return 1;\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._concatChunks = function () {\n  var self = this;\n  var intervalTime = 500;\n  self._chunks[0].writeProgress = 1;\n\n  function countWriteProgress() {\n    self.writeProgress = self._chunks.reduce(function (a, b) {\n      return a + b.writeProgress;\n    }, 0) / self._chunksNumber;\n    self.emit("data");\n  }\n\n  function getWriteStream() {\n    return fs.createWriteStream(self._chunks[0].destFile, {\n      flags: "a"\n    });\n  }\n\n  function onInterval(writeStream, currentStream) {\n    self._chunks[currentStream].writeProgress = writeStream.bytesWritten / self._chunks[currentStream].available;\n\n    if (self._chunks[currentStream].writeProgress > 1) {\n      self._chunks[currentStream].writeProgress = 1;\n    }\n\n    countWriteProgress();\n  }\n\n  function pipeStream(writeStream, nextStreamNumber) {\n    var chunk = self._chunks[nextStreamNumber];\n\n    if (chunk) {\n      var interval = setInterval(function () {\n        onInterval(writeStream, nextStreamNumber);\n      }, intervalTime);\n      var readStream = fs.createReadStream(chunk.destFile);\n      readStream.pipe(writeStream);\n      writeStream.on("close", function () {\n        clearInterval(interval);\n        onInterval(writeStream, nextStreamNumber);\n        writeStream.removeAllListeners();\n        readStream.unpipe(writeStream);\n        readStream.destroy();\n        fs.unlink(chunk.destFile, function (err) {\n          if (err) {\n            self.emit("error", err);\n          } else {\n            writeStream.destroy();\n            pipeStream(getWriteStream(), nextStreamNumber + 1);\n          }\n        });\n      });\n    } else {\n      countWriteProgress();\n      writeStream.removeAllListeners();\n      writeStream.destroy();\n      fs.rename(self._chunks[0].destFile, self._destFile, function (err) {\n        if (err) {\n          self.emit("error", err);\n        } else {\n          self.emit("end");\n        }\n      });\n    }\n  }\n\n  if (self._chunks.length > 1) {\n    pipeStream(getWriteStream(), 1);\n  } else {\n    countWriteProgress();\n    self.emit("end");\n  }\n};\n/**\n *\n * @param {number} chunkNumber - chunk number\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._initChunk = function (chunkNumber) {\n  var options = {};\n  options.bytesRangeNotAvailable = this._bytesRangeNotAvailable;\n  options.destFile = this._destFile;\n  options.maxDownloadRetry = this._options.maxDownloadChunkRetry;\n  options.maxDownloadInternetRetry = this._options.maxDownloadChunkInternetRetry;\n  options.timeout = this._options.timeout;\n  options.retryTimeout = this._options.retryTimeout;\n  options.useChunkedEncoding = this._options.useChunkedEncoding;\n  var size = this.file_size;\n\n  if (this._chunksNumber > 1) {\n    var chunkSize = parseInt(size / this._chunksNumber, 10);\n    options.startPosition = chunkNumber * chunkSize;\n    options.multiChunks = true;\n\n    if (chunkNumber === this._chunksNumber - 1) {\n      options.endPosition = size - 1;\n    } else {\n      options.endPosition = options.startPosition + chunkSize - 1;\n    }\n  } else {\n    options.startPosition = 0;\n    options.endPosition = size - 1;\n  }\n\n  var chunk = new DownloadFileChunk(this._url, options);\n  chunk.events.on("download", this._onChunkDownload.bind(this));\n\n  this._chunks.push(chunk);\n};\n/**\n *\n * @param {object} err - error\n * @param {boolean} aborted - if failure has been called because download was aborted\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onDownloadFailure = function (err, aborted) {\n  this._promises = null;\n\n  if (!aborted) {\n    this._errors = this._errors || 0;\n    this._errors++;\n\n    if (this._errors <= this._options.maxDownloadRetry) {\n      this._retryDownload();\n    } else {\n      this.emit("error", err);\n    }\n  } else {\n    var noSpaceLeft = false;\n\n    for (var i = 0, j = err.length; i < j; i++) {\n      if (err[i]) {\n        if (err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n          noSpaceLeft = true;\n          break;\n        }\n      }\n    }\n\n    if (noSpaceLeft) {\n      err = {\n        message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR\n      };\n    }\n\n    this.emit("error", err);\n  }\n};\n/**\n *\n * @param {object} err - error\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onDownloadSuccess = function (err) {\n  var aborted, error;\n  this._promises = null;\n  err = err || [];\n\n  for (var i = 0, j = err.length; i < j; i++) {\n    if (err[i]) {\n      if (err[i] === downloadFileUtil.errors.ABORTED || err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n        aborted = true;\n      }\n\n      error = true;\n    }\n  }\n\n  if (!error) {\n    this._concatChunks();\n  } else {\n    this._onDownloadFailure(err, aborted);\n  }\n};\n/**\n *\n * @param {number} downloaded - downloaded bytes\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onChunkDownload = function (downloaded) {\n  this.downloaded += downloaded;\n  this.available = this._chunks.reduce(function (a, b) {\n    return a + b.available;\n  }, 0);\n  this.emit("data");\n};\n\nDownloadFile.prototype._retryDownload = function () {\n  // console.log("retrying download", this._destFile);\n  this._resetValues();\n\n  this.start();\n};\n\nDownloadFile.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.progress = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n  this._chunks = [];\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._startChunks = function () {\n  var promises = [];\n\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    promises.push(this._chunks[i].start());\n  }\n\n  this._promises = promises;\n  Promise.all(this._promises).then(this._onDownloadSuccess.bind(this), this._onDownloadFailure.bind(this));\n};\n\nDownloadFile.prototype._startAllChunks = function () {\n  for (var i = 0, j = this._chunksNumber; i < j; i++) {\n    this._initChunk(i);\n  }\n\n  this._startChunks();\n};\n/**\n * starts download\n * @returns {void}\n */\n\n\nDownloadFile.prototype.start = function () {\n  var self = this;\n  var req_options = Object.assign({\n    url: this._url,\n    method: \'HEAD\'\n  }, downloadFileUtil.defaultOptions);\n\n  if (this._options.noCache) {\n    req_options.headers = req_options.headers || {};\n    req_options.headers[\'Cache-Control\'] = \'no-cache\';\n  }\n\n  var req = net.request(req_options);\n  req.chunkedEncoding = this._options.useChunkedEncoding;\n  req.on(\'response\', function (response) {\n    if (response && response.statusCode >= 400) {\n      var error = response.statusMessage;\n\n      if (error) {\n        self._onDownloadFailure(error, false);\n\n        return;\n      }\n    }\n\n    response.on("error", function (error) {\n      if (error) {\n        self._onDownloadFailure(error, false);\n      }\n    });\n    self._headers = response.headers;\n    self.file_size = Number(self._headers["content-length"]);\n    self._chunksNumber = self._calculateChunksNumber(self.file_size);\n    downloadFileUtil.checkForLocalFile(self._destFile, function (exists, fileSize) {\n      if (exists) {\n        if (fileSize === self.file_size) {\n          self.emit("end");\n        } else if (fileSize > self.file_size) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n\n          self._startAllChunks();\n        } else if (fileSize < self.file_size && self._chunksNumber > 1) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n\n          self._startAllChunks();\n        } else {\n          self._startAllChunks();\n        }\n      } else {\n        self._startAllChunks();\n      }\n    });\n  });\n  req.end();\n};\n/**\n * stops download\n * @returns {void}\n */\n\n\nDownloadFile.prototype.stop = function () {\n  var promises = [];\n\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    this._chunks[i].stop();\n\n    if (this._chunks[i]._promise) {\n      promises.push(this._chunks[i]._promise);\n    }\n  }\n\n  function onStopped() {\n    this.emit("end", \'\');\n  }\n\n  if (!this._promises) {\n    Promise.all(promises).then(onStopped.bind(this), onStopped.bind(this));\n  }\n};\n\nmodule.exports = DownloadFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///88\n')},function(module,exports,__webpack_require__){eval('var downloadFileUtil = __webpack_require__(7);\n\nvar fs = __webpack_require__(2);\n\nvar _require = __webpack_require__(3),\n    net = _require.net;\n\nvar EventEmitter = __webpack_require__(14).EventEmitter;\n/**\n *\n * @param {string} url - url\n * @param {object} options - options\n * @returns {Chunk} - chunk object\n * @constructor\n */\n\n\nfunction Chunk(url, options) {\n  var self = this;\n  this.url = url;\n  this.options = options;\n  this.endPosition = options.endPosition;\n  this.startPosition = options.startPosition;\n  this.bytesRangeNotAvailable = options.bytesRangeNotAvailable;\n  this.reset();\n  this.events = new EventEmitter();\n  this._promise = new Promise(function (resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n  return this;\n}\n\nChunk.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this.options.maxDownloadInternetRetry;\n  } else {\n    maxDownloadRetry = this.options.maxDownloadRetry;\n  }\n\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self.reset(function () {\n        self.start();\n      });\n    }, self.options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\n\nChunk.prototype.createFileStream = function (callback) {\n  var self = this;\n\n  if (!this.fileStream) {\n    var destFile = this.options.destFile;\n\n    if (this.options.multiChunks) {\n      destFile = destFile + "." + this.startPosition + "." + this.endPosition;\n    }\n\n    downloadFileUtil.checkForLocalFile(destFile, function (resumeFile, fileSize) {\n      self.destFile = destFile;\n\n      if (resumeFile) {\n        if (fileSize <= self.endPosition - self.startPosition) {\n          self.resumeFile = resumeFile;\n          self.available = fileSize;\n          self.offsetStartPosition = fileSize;\n        }\n      }\n\n      self.fileStream = fs.createWriteStream(destFile, {\n        flags: self.resumeFile ? "a" : "w"\n      });\n      self.fileStream.on("error", callback);\n      self.fileStream.on("open", function () {\n        // for unknown reason from time to time the file descriptor of self.fileStream is null\n        // when event \'open\' is fired then the file descriptor is not a null anymore\n        // this should fix a problem with EBADF error\n        // a bug in fs ?\n        self.fileStream = this;\n        this.removeListener("error", callback);\n        this.on("error", function (error) {\n          if (error.code === "ENOSPC") {\n            // no space left on disk, do not retry downloading\n            self.resolve(downloadFileUtil.errors.NO_SPACE_LEFT_ERROR, error);\n          } else {\n            self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n              if (!retried) {\n                self.resolve(downloadFileUtil.errors.FILE_WRITING_ERROR, error);\n              }\n            });\n          }\n        });\n        this.on("finish", function () {\n          if (!self.isDownloaded()) {\n            self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n              if (!retried) {\n                self.closeStreamAndRequest(function () {\n                  self.resolve(downloadFileUtil.errors.CHUNK_SIZE_ERROR);\n                });\n              }\n            });\n          } else {\n            self.closeStreamAndRequest(self.resolve);\n          }\n        });\n        callback();\n      });\n    });\n  } else {\n    callback();\n  }\n};\n\nChunk.prototype.isDownloaded = function () {\n  return this.endPosition - this.startPosition - this.offsetStartPosition + 1 === this.downloaded;\n};\n\nChunk.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this.options.timeout,\n    url: this.url\n  };\n  self.createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.FILE_CREATING_ERROR, err);\n          });\n        }\n      });\n\n      return;\n    }\n\n    req_options.headers = req_options.headers || {};\n\n    if (!self.bytesRangeNotAvailable) {\n      req_options.headers.range = "bytes=" + (self.startPosition + self.offsetStartPosition) + "-" + self.endPosition;\n    }\n\n    self._req = net.request(req_options);\n    self._req.chunkedEncoding = self.options.useChunkedEncoding;\n\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self.closeStreamAndRequest(function () {\n                self.resolve(downloadFileUtil.errors.TIMEOUT, error);\n              });\n            }\n          });\n        } else {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.CHUNK_ERROR);\n          });\n        }\n      });\n      response.on("data", function (data) {\n        if (response.statusCode === 200 || response.statusCode === 206) {\n          self.available += data.length;\n          self.downloaded += data.length;\n          self.events.emit("download", data.length);\n        }\n      });\n      response.pipe(self.fileStream);\n    });\n\n    self._req.end();\n  });\n  return this._promise;\n};\n\nChunk.prototype.closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n\n  function onClose() {\n    clearTimeout(timer);\n\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n\n    delete self._req;\n    callback();\n  }\n\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n\n  if (this._req) {\n    this._req.abort();\n\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n\nChunk.prototype.reset = function (callback) {\n  var self = this;\n\n  callback = callback || function () {};\n\n  self.closeStreamAndRequest(function () {\n    self.offsetStartPosition = 0;\n    self.available = 0;\n    self.downloaded = 0;\n    self.writeProgress = 0;\n    self.resumeFile = false;\n    callback();\n  });\n};\n\nChunk.prototype.stop = function () {\n  var self = this;\n  this.reset(function () {\n    self.resolve(downloadFileUtil.errors.ABORTED);\n  });\n};\n\nmodule.exports = Chunk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n')},function(module,exports,__webpack_require__){"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(5);\n\nvar appSettings = __webpack_require__(1);\n\nvar ArrayStorage = __webpack_require__(33);\n\nvar ArrayStorageBridge = __webpack_require__(91);\n\nvar FlushItem = __webpack_require__(12);\n\nvar Storage = __webpack_require__(35);\n\nvar StorageBridge = __webpack_require__(92);\n\nvar SyncItem = __webpack_require__(93);\n/**\n *\n * @constructor\n */\n\n\nfunction DownloadsStorageController() {\n  this.stores = appSettings.getSettings().stores;\n  this._items = {};\n  this._syncItems = [];\n  this._FLUSH_TIME = 50; //in miliseconds\n\n  this._flushThrottled = _.throttle(this._flush, this._FLUSH_TIME, {\n    leading: false\n  });\n\n  this._createDummyStorageBridge();\n}\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createArrayStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createArrayStorageBridge(key);\n  }\n\n  this._items[manifestId][key] = new ArrayStorage();\n};\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createArrayStorageBridge = function (key) {\n  this[key] = new ArrayStorageBridge(this, key);\n};\n\nDownloadsStorageController.prototype._createDummyStorageBridge = function () {\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.LEFT);\n\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.DOWNLOADED);\n\n  this._createStorageBridge(this.stores.DOWNLOADS.DOWNLOADING);\n\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.ERRORS);\n\n  this._createStorageBridge(this.stores.PARAMS);\n\n  this._createStorageBridge(this.stores.MANIFEST);\n\n  this._createStorageBridge(this.stores.STATUS);\n};\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createStorageBridge(key);\n  }\n\n  this._items[manifestId][key] = new Storage();\n};\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createStorageBridge = function (key) {\n  this[key] = new StorageBridge(this, key);\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._flush = function () {\n  var self = this;\n\n  var items = this._syncItems.splice(0, this._syncItems.length);\n\n  var flushItem, flushItems, i, item, j, k, l, manifestId, storageKey, storageKeys, storagesToFlush;\n  storagesToFlush = {};\n\n  function getItems(manifestId, storageKey) {\n    if (self._items[manifestId] && self._items[manifestId][storageKey]) {\n      return self._items[manifestId][storageKey].getItems();\n    } else {\n      return [];\n    }\n  } //collect information which storages needs to be saved\n\n\n  for (i = 0, j = items.length; i < j; i++) {\n    item = items[i];\n    storagesToFlush[item.manifestId] = storagesToFlush[item.manifestId] || {};\n\n    for (k = 0, l = item.storageKeys.length; k < l; k++) {\n      storagesToFlush[item.manifestId][item.storageKeys[k]] = true;\n    }\n  }\n\n  flushItems = []; //create flush items - promises that needs to be resolved together in parallel\n\n  for (manifestId in storagesToFlush) {\n    storageKeys = storagesToFlush[manifestId];\n\n    for (storageKey in storageKeys) {\n      try {\n        flushItem = new FlushItem(manifestId, storageKey, getItems(manifestId, storageKey));\n        flushItems.push(flushItem.save());\n      } catch (e) {\n        console.error("ERROR", storageKey);\n      }\n    }\n  }\n\n  Promise.all(flushItems).then(function () {\n    var i, j;\n\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].resolve();\n    }\n  }, function () {\n    var i, j;\n\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].reject();\n    }\n  });\n};\n/**\n *\n * @private\n * @param {Array} [storageKey] storage key\n * @returns {Array} keys for all storages\n */\n\n\nDownloadsStorageController.prototype._getAllStorageKeys = function (storageKey) {\n  var keys = [];\n  storageKey = storageKey || this.stores;\n\n  for (var key in storageKey) {\n    if (storageKey.hasOwnProperty(key)) {\n      if (typeof storageKey[key] === "string") {\n        //params don\'t need to be stored to disk\n        if (key !== this.stores.PARAMS) {\n          keys.push(storageKey[key]);\n        }\n      } else {\n        keys = keys.concat(this._getAllStorageKeys(storageKey[key]));\n      }\n    }\n  }\n\n  return keys;\n};\n/**\n *\n * @private\n * @param {string} storageKey storage key identifier\n * @param {string} bridgeMethodName method name to be called\n * @param {string} manifestId - manifest identifier\n * @returns {*} items\n */\n\n\nDownloadsStorageController.prototype._itemAction = function (storageKey, bridgeMethodName, manifestId) {\n  var args = [],\n      i,\n      j; //collect all other parameters except those already listed\n\n  for (i = 3, j = arguments.length; i < j; i++) {\n    args.push(arguments[i]);\n  }\n\n  if (this._items[manifestId] && this._items[manifestId][storageKey] && this._items[manifestId][storageKey][bridgeMethodName]) {\n    return this._items[manifestId][storageKey][bridgeMethodName].apply(this._items[manifestId][storageKey], args);\n  } else {\n    //if manifest still exists\n    if (this._items[manifestId]) {\n      console.error("ERROR", manifestId, storageKey, bridgeMethodName, args);\n    }\n\n    return undefined;\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be cleared\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.clear = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    storageKeys = storageKeys || self._getAllStorageKeys();\n\n    if (self._items[manifestId]) {\n      for (var i = 0, j = storageKeys.length; i < j; i++) {\n        var storage = self._items[manifestId][storageKeys[i]];\n\n        if (storage) {\n          storage.clear();\n        }\n      }\n    }\n\n    delete self._items[manifestId];\n    self.sync(manifestId, storageKeys).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.create = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._items[manifestId] = {};\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.LEFT);\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADED);\n\n    self._createStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADING);\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.ERRORS);\n\n    self._createStorage(manifestId, self.stores.PARAMS);\n\n    self._createStorage(manifestId, self.stores.MANIFEST);\n\n    self._createStorage(manifestId, self.stores.STATUS);\n\n    self.sync(manifestId, [self.stores.DOWNLOADS.DOWNLOADED, self.stores.MANIFEST, self.stores.STATUS]).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.createIfNotExists = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getItem(manifestId).then(function (result) {\n      if (result) {\n        resolve();\n      } else {\n        self.create(manifestId).then(resolve, reject);\n      }\n    }, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.getItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    resolve(self._items[manifestId]);\n  });\n};\n/**\n *\n * @returns {string[]} keys of all items\n */\n\n\nDownloadsStorageController.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} if certain manifest id exists\n */\n\n\nDownloadsStorageController.prototype.keyExists = function (manifestId) {\n  return !!this._items[manifestId];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.removeItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    delete self._items[manifestId];\n    resolve();\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be synced\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.sync = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (typeof storageKeys === "undefined") {\n      reject("Storage key is missing");\n      return;\n    }\n\n    if (typeof storageKeys === "string") {\n      storageKeys = [storageKeys];\n    }\n\n    if (appSettings.getSettings().saveToDisk) {\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.syncAll = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (appSettings.getSettings().saveToDisk) {\n      var storageKeys = self._getAllStorageKeys();\n\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n\nmodule.exports = DownloadsStorageController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar ArrayStorage = __webpack_require__(33);\n\nvar createBridgeMethods = __webpack_require__(34);\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\n\n\nfunction ArrayStorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, ArrayStorage);\n}\n\nmodule.exports = ArrayStorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9hcnJheS1zdG9yYWdlLWJyaWRnZS5qcz9jNzE2Il0sIm5hbWVzIjpbIkFycmF5U3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVCcmlkZ2VNZXRob2RzIiwiQXJyYXlTdG9yYWdlQnJpZGdlIiwicGFyZW50Iiwic3RvcmFnZUtleSIsIl9wYXJlbnQiLCJfc3RvcmFnZUtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQTVCOztBQUNBLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLEVBQUQsQ0FBbkM7QUFFQTs7Ozs7OztBQUtBLFNBQVNFLGtCQUFULENBQTZCQyxNQUE3QixFQUFxQ0MsVUFBckMsRUFBaUQ7QUFDL0MsT0FBS0MsT0FBTCxHQUFlRixNQUFmO0FBQ0EsT0FBS0csV0FBTCxHQUFtQkYsVUFBbkI7QUFDQUgscUJBQW1CLENBQUMsSUFBRCxFQUFPRixZQUFQLENBQW5CO0FBQ0Q7O0FBRURRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sa0JBQWpCIiwiZmlsZSI6IjkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBBcnJheVN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hcnJheS1zdG9yYWdlXCIpO1xuY29uc3QgY3JlYXRlQnJpZGdlTWV0aG9kcyA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1icmlkZ2UtbWV0aG9kc1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge0Rvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyfSBwYXJlbnQgLSByZWZlcmVuY2UgdG8gcGFyZW50IG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFycmF5U3RvcmFnZUJyaWRnZSAocGFyZW50LCBzdG9yYWdlS2V5KSB7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gIGNyZWF0ZUJyaWRnZU1ldGhvZHModGhpcywgQXJyYXlTdG9yYWdlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheVN0b3JhZ2VCcmlkZ2U7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///91\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar Storage = __webpack_require__(35);\n\nvar createBridgeMethods = __webpack_require__(34);\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\n\n\nfunction StorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, Storage);\n}\n\nmodule.exports = StorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9zdG9yYWdlLWJyaWRnZS5qcz81YTFkIl0sIm5hbWVzIjpbIlN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQnJpZGdlTWV0aG9kcyIsIlN0b3JhZ2VCcmlkZ2UiLCJwYXJlbnQiLCJzdG9yYWdlS2V5IiwiX3BhcmVudCIsIl9zdG9yYWdlS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLEVBQUQsQ0FBdkI7O0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUdELG1CQUFPLENBQUMsRUFBRCxDQUFuQztBQUVBOzs7Ozs7O0FBS0EsU0FBU0UsYUFBVCxDQUF3QkMsTUFBeEIsRUFBZ0NDLFVBQWhDLEVBQTRDO0FBQzFDLE9BQUtDLE9BQUwsR0FBZUYsTUFBZjtBQUNBLE9BQUtHLFdBQUwsR0FBbUJGLFVBQW5CO0FBQ0FILHFCQUFtQixDQUFDLElBQUQsRUFBT0YsT0FBUCxDQUFuQjtBQUNEOztBQUVEUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLGFBQWpCIiwiZmlsZSI6IjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTdG9yYWdlID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IGNyZWF0ZUJyaWRnZU1ldGhvZHMgPSByZXF1aXJlKFwiLi9jcmVhdGUtYnJpZGdlLW1ldGhvZHNcIik7XG5cbi8qKlxuICogQHBhcmFtIHtEb3dubG9hZHNTdG9yYWdlQ29udHJvbGxlcn0gcGFyZW50IC0gcmVmZXJlbmNlIHRvIHBhcmVudCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdG9yYWdlQnJpZGdlIChwYXJlbnQsIHN0b3JhZ2VLZXkpIHtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcbiAgY3JlYXRlQnJpZGdlTWV0aG9kcyh0aGlzLCBTdG9yYWdlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yYWdlQnJpZGdlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction SyncItem(resolve, reject, manifestId, storageKeys) {\n  this.resolve = resolve;\n  this.reject = reject;\n  this.manifestId = manifestId;\n  this.storageKeys = storageKeys;\n}\n\nmodule.exports = SyncItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL3N5bmMtaXRlbS5qcz84YjFjIl0sIm5hbWVzIjpbIlN5bmNJdGVtIiwicmVzb2x2ZSIsInJlamVjdCIsIm1hbmlmZXN0SWQiLCJzdG9yYWdlS2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLFFBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCQyxNQUE1QixFQUFvQ0MsVUFBcEMsRUFBZ0RDLFdBQWhELEVBQTZEO0FBQzNELE9BQUtILE9BQUwsR0FBZUEsT0FBZjtBQUNBLE9BQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLE9BQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTixRQUFqQiIsImZpbGUiOiI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBTeW5jSXRlbSAocmVzb2x2ZSwgcmVqZWN0LCBtYW5pZmVzdElkLCBzdG9yYWdlS2V5cykge1xuICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgdGhpcy5tYW5pZmVzdElkID0gbWFuaWZlc3RJZDtcbiAgdGhpcy5zdG9yYWdlS2V5cyA9IHN0b3JhZ2VLZXlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bmNJdGVtO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar constants = __webpack_require__(20);\n\nvar utilUrl = __webpack_require__(36);\n/**\n * @module\n * @namespace downloadUtil\n */\n\n\nvar downloadUtil = {};\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\n\ndownloadUtil.getAllLinks = function getAllLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations) {\n  return downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations);\n};\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\n\n\ndownloadUtil.getDownloadLinks = function getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations, downloadedHash) {\n  var chosenRepresentations = downloadUtil.getChosenRepresentations(userRepresentations, manifestRepresentations);\n  var bandwidth, contentType, localUrl, i, id, j, k, l, links;\n  var mediaFile, mediaBaseUrl, mediaUrls, remoteUrl, segmentInformation;\n  links = [];\n  downloadedHash = downloadedHash || {};\n\n  for (i = 0, j = chosenRepresentations.length; i < j; i++) {\n    contentType = chosenRepresentations[i].attributeList.mimeType;\n    bandwidth = +chosenRepresentations[i].attributeList.bandwidth;\n\n    if (contentType.indexOf("video") === 0) {\n      contentType = "video";\n    } else if (contentType.indexOf("audio") === 0) {\n      contentType = "audio";\n    } else {\n      contentType = "text";\n    }\n\n    segmentInformation = chosenRepresentations[i].segmentInformation;\n    mediaUrls = segmentInformation.mediaUrls;\n    id = segmentInformation.representationID;\n\n    for (k = 0, l = mediaUrls.length; k < l; k++) {\n      mediaFile = mediaUrls[k].mediaFile;\n      mediaBaseUrl = mediaUrls[k].baseURL;\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\.\\//g, "");\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\./g, "");\n\n      if (mediaFile === mediaBaseUrl || remotePath === mediaBaseUrl) {\n        mediaBaseUrl = "";\n      } // remove http and https from mediaBaseUrl, this way it will create a correct folder structure\n\n\n      if (mediaBaseUrl.match(constants.regexpProtocolRemove)) {\n        remoteUrl = utilUrl.joinPathWithFile(mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl.replace(constants.regexpProtocolRemove, ""), mediaFile);\n      } else {\n        remoteUrl = utilUrl.joinPathWithFile(remotePath, mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl, mediaFile);\n      } // filter query string from localUrl\n\n\n      var index = localUrl.lastIndexOf(\'?\');\n\n      if (index > -1) {\n        localUrl = localUrl.substr(0, index);\n      }\n\n      if (!downloadedHash[localUrl] || !downloadedHash[localUrl] && downloadedHash[localUrl].remoteUrl !== remoteUrl) {\n        if (!links[k]) {\n          links[k] = [];\n        }\n\n        links[k].push({\n          id: id,\n          bandwidth: bandwidth,\n          contentType: contentType,\n          remoteUrl: remoteUrl,\n          localUrl: localUrl\n        });\n      }\n    }\n  } // NOTE: use links.flat() in the future\n\n\n  return links.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n/**\n *\n * @param {array} userChosenRepr - array of chosen representations ids by user\n * @param {array} manifestRepr - array of all manifest representations\n * @returns {array} chosen representations from manifest\n */\n\n\ndownloadUtil.getChosenRepresentations = function getChosenRepresentations(userChosenRepr, manifestRepr) {\n  var chosenRepresentations = [];\n  var userChosenReprObj = {};\n  userChosenRepr = userChosenRepr || [];\n  manifestRepr = manifestRepr || [];\n\n  for (var i = 0, j = userChosenRepr.length; i < j; i++) {\n    userChosenReprObj[String(userChosenRepr[i])] = true;\n  }\n\n  for (var _i = 0, _j = manifestRepr.length; _i < _j; _i++) {\n    var items = manifestRepr[_i].representationColl;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n\n      if (userChosenReprObj[String(item.attributeList.id)]) {\n        chosenRepresentations.push(item);\n      }\n    }\n  }\n\n  return chosenRepresentations;\n};\n\nmodule.exports = downloadUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///94\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _ = __webpack_require__(5);\n/**\n * how much of progress should be connected with writing chunks to a hard drive (1 - 100%)\n * @type {number}\n */\n\n\nvar writeProgressUsage = 0.1;\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @constructor\n */\n\nfunction DownloadStats(storage) {\n  this._storage = storage;\n  this._stats = {};\n  this._statsPrevious = {};\n  this._STATS_TIME_GENERATION = 1000;\n\n  _.bindAll(this, "_generate");\n}\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision for kilobytes\n * @param {number=} precision2 - precision for megabytes\n * @param {number=} precision3 - precision for gigabytes\n * @returns {string} converted bytes to kb or mb or gb\n * @private\n */\n\n\nDownloadStats.prototype._convertToBytes = function (value, precision, precision2, precision3) {\n  precision2 = typeof precision2 !== "undefined" ? precision2 : precision;\n  precision3 = typeof precision3 !== "undefined" ? precision3 : precision;\n\n  if (value < 100000) {\n    return this._convertToKB(value, precision);\n  } else if (value < 1024 * 1024 * 1024) {\n    return this._convertToMB(value, precision2);\n  } else {\n    return this._convertToGB(value, precision3);\n  }\n};\n/**\n *\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} kilobytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToKB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneKB = 1024;\n  return Math.round(value * a / oneKB) / a + "kB";\n};\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} - megabytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToMB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneMB = 1024 * 1024;\n  return Math.round(value * a / oneMB) / a + "MB";\n};\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} gigabytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToGB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneGB = 1024 * 1024 * 1024;\n  return Math.round(value * a / oneGB) / a + "GB";\n};\n\nDownloadStats.prototype._clearSpeed = function () {\n  var allManifestIds = Object.keys(this._stats) || [];\n\n  for (var i = 0, j = allManifestIds.length; i < j; i++) {\n    var manifestId = allManifestIds[i];\n\n    if (!this._storage.keyExists(manifestId) && this._stats[manifestId] && this._stats[manifestId].speed) {\n      this._stats[manifestId].speed = 0;\n      this._stats[manifestId].speedBytes = this._convertToBytes(this._stats[manifestId].speed, 3, 2);\n    }\n  }\n};\n/**\n * @param {boolean} refresh - decides if stats should be only calculated without setting previous stats\n * this is useful when downloads finishes and stats are being calculated one more time\n * @returns {void}\n * @private\n */\n\n\nDownloadStats.prototype._generate = function (refresh) {\n  var allStats = {};\n\n  var manifests = this._storage.getKeys();\n\n  this._clearSpeed();\n\n  function countParts(items) {\n    var parts = 0;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      parts += item.bandwidth || 1;\n    }\n\n    return parts;\n  }\n\n  function countPartsObj(items, withDownloadedOnly) {\n    var parts = 0;\n\n    for (var key in items) {\n      if (items.hasOwnProperty(key)) {\n        var item = items[key];\n        parts += (withDownloadedOnly ? item.stats.available / (item.stats.file_size || 1) : 1) * (item.bandwidth || 1);\n      }\n    }\n\n    return parts;\n  }\n\n  function toArray(obj) {\n    var arr = [];\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var item = obj[key];\n        arr.push(item);\n      }\n    }\n\n    return arr;\n  }\n\n  var stats = {\n    downloading: 0,\n    downloaded: 0,\n    available: 0,\n    left: 0,\n    downloadingAvailableBytes: 0,\n    downloading_file_size: 0,\n    downloadingBytes: 0,\n    downloadedBytes: 0,\n    availableBytes: 0,\n    writeProgress: 0,\n    writeProgressDownloading: 0,\n    writeProgressDownloaded: 0,\n    errors: 0,\n    progress: 0,\n    speed: 0,\n    status: \'\'\n  }; //availableBytes - bates that has been already downloaded\n  //downloadedBytes - bytes used to calculate the current speed\n  //if for any reason the connection is broken or user stopped, then after resuming the available bytes are\n  //always bigger then the actual downloaded bytes.\n  //once the file is finished both values are equal and have the same value as file_size\n\n  var now = new Date().getTime();\n\n  if (!this._statsTime) {\n    this._statsTime = now;\n  }\n\n  for (var i = 0, j = manifests.length; i < j; i++) {\n    var manifestId = manifests[i];\n    allStats[manifestId] = _.clone(stats);\n    allStats[manifestId].left = this._storage.left.count(manifestId);\n    allStats[manifestId].leftI = this._storage.left.getItems(manifestId);\n    allStats[manifestId].errors = this._storage.errors.count(manifestId);\n    allStats[manifestId].errorsI = this._storage.errors.getItems(manifestId);\n\n    var items = this._storage.downloading.getKeys(manifestId);\n\n    allStats[manifestId].downloading = items.length;\n    allStats[manifestId].downloadingI = this._storage.downloading.getItems(manifestId);\n    var writeProgressDownloadingItemsLength = items.length;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = this._storage.downloading.getItem(manifestId, items[k]);\n\n      allStats[manifestId].downloadingBytes += item.stats.downloaded;\n      allStats[manifestId].downloading_file_size += item.stats.file_size;\n      allStats[manifestId].downloadingAvailableBytes += item.stats.available;\n      allStats[manifestId].writeProgressDownloading += item.stats.writeProgress;\n    }\n\n    items = this._storage.downloaded.getItems(manifestId);\n    allStats[manifestId].downloaded = items.length;\n    allStats[manifestId].downloadedI = items;\n    var writeProgressItemsDownloadedLength = items.length;\n\n    for (var _k = 0, _l = items.length; _k < _l; _k++) {\n      var _item = items[_k];\n      allStats[manifestId].downloadedBytes += _item.stats.downloaded;\n      allStats[manifestId].writeProgressDownloaded += _item.stats.writeProgress;\n    } //need to calculate what percentage of bytes that are going to be written to hard drive are according the the whole\n    // size for example 5 files are being downloaded, 4 smaller are 100mb and one large 1,9GB. When the large file is\n    // being saved the write progress is basically 1900/2000 = 95% of all written bytes.\n\n\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading * (allStats[manifestId].downloadingAvailableBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading / (writeProgressDownloadingItemsLength || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded * (allStats[manifestId].downloadedBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded / (writeProgressItemsDownloadedLength || 1);\n    allStats[manifestId].writeProgress = allStats[manifestId].writeProgressDownloading + allStats[manifestId].writeProgressDownloaded;\n\n    var speed = this._getDiff("downloadingBytes", manifestId, allStats, this._statsPrevious);\n\n    speed += this._getDiff("downloadedBytes", manifestId, allStats, this._statsPrevious);\n    speed = speed * 1000 / (now - this._statsTime || 1);\n    allStats[manifestId].speed = speed;\n    allStats[manifestId].status = this._storage.status.getItem(manifestId, "status");\n    allStats[manifestId].details = this._storage.status.getItem(manifestId, "details"); //progress for downloaded\n\n    var leftParts = countParts(allStats[manifestId].leftI);\n    var downloadedParts = countParts(allStats[manifestId].downloadedI);\n    var downloadingPartsSize = countPartsObj(allStats[manifestId].downloadingI);\n    var downloadingParts = countPartsObj(allStats[manifestId].downloadingI, true);\n    var errorParts = countPartsObj(allStats[manifestId].errorsI);\n    var allParts = leftParts + downloadedParts + downloadingPartsSize + errorParts;\n    allStats[manifestId].progress = (downloadedParts + downloadingParts) / (allParts || 1);\n    allStats[manifestId].progress = allStats[manifestId].progress * (1 - writeProgressUsage);\n    allStats[manifestId].progress += allStats[manifestId].writeProgress * writeProgressUsage;\n    allStats[manifestId].downloadedBytesTotal = Math.round(allStats[manifestId].progress * 10000) / 100;\n    allStats[manifestId].downloadedBytesTotal += "%"; // progress of each represention\n\n    var reduceFunc = function reduceFunc(map, obj) {\n      if (!map[obj.id]) {\n        map[obj.id] = [];\n      }\n\n      map[obj.id].push(obj);\n      return map;\n    };\n\n    var downloadedById = allStats[manifestId].downloadedI.reduce(reduceFunc, {});\n    var downloadingArray = toArray(allStats[manifestId].downloadingI);\n    var downloadingById = downloadingArray.reduce(reduceFunc, {});\n    var leftById = allStats[manifestId].leftI.reduce(reduceFunc, {});\n    var errorArray = toArray(allStats[manifestId].errorsI);\n    var errorsById = errorArray.reduce(reduceFunc, {});\n\n    var extend = function extend(obj, src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          if (!obj[key]) {\n            obj[key] = [];\n          }\n\n          obj[key] = obj[key].concat(src[key]);\n        }\n      }\n\n      return obj;\n    };\n\n    var allPartsById = {};\n    extend(allPartsById, downloadedById);\n    extend(allPartsById, downloadingById);\n    extend(allPartsById, leftById);\n    extend(allPartsById, errorsById); // compute progres for each id\n\n    var progressById = {};\n    var key = void 0;\n\n    for (key in allPartsById) {\n      if (allPartsById.hasOwnProperty(key)) {\n        progressById[key] = countPartsObj(downloadedById[key]) / (countPartsObj(allPartsById[key]) || 1);\n      }\n    }\n\n    var progressByIdPercent = {};\n\n    for (key in progressById) {\n      if (progressById.hasOwnProperty(key)) {\n        progressByIdPercent[key] = Math.round(progressById[key] * 10000) / 100 + "%";\n      }\n    }\n\n    allStats[manifestId].progressById = progressById;\n    allStats[manifestId].progressByIdPercent = progressByIdPercent;\n  }\n\n  var showStats = {};\n\n  for (var _i = 0, _j = manifests.length; _i < _j; _i++) {\n    var _manifestId = manifests[_i];\n    showStats[_manifestId] = {};\n    var downloadedBytesTotal = allStats[_manifestId].downloadedBytes + allStats[_manifestId].downloadingAvailableBytes;\n    showStats[_manifestId].progress = allStats[_manifestId].progress;\n    showStats[_manifestId].progressPercentage = allStats[_manifestId].downloadedBytesTotal;\n    showStats[_manifestId].progressById = allStats[_manifestId].progressById;\n    showStats[_manifestId].progressByIdPercent = allStats[_manifestId].progressByIdPercent;\n    showStats[_manifestId].downloadedBytesTotal = this._convertToBytes(downloadedBytesTotal, 1, 2, 2);\n    showStats[_manifestId].downloaded = allStats[_manifestId].downloaded;\n    showStats[_manifestId].left = allStats[_manifestId].left;\n    showStats[_manifestId].errors = allStats[_manifestId].errors;\n\n    if (allStats[_manifestId].speed < 0) {\n      allStats[_manifestId].speed = 0;\n    }\n\n    showStats[_manifestId].speed = allStats[_manifestId].speed;\n    showStats[_manifestId].speedBytes = this._convertToBytes(allStats[_manifestId].speed, 3, 2);\n    showStats[_manifestId].status = allStats[_manifestId].status;\n    showStats[_manifestId].details = allStats[_manifestId].details;\n  }\n\n  for (var _key in showStats) {\n    if (showStats.hasOwnProperty(_key)) {\n      this._stats[_key] = showStats[_key];\n    }\n  }\n\n  if (!refresh) {\n    this._statsTime = now;\n\n    for (var _key2 in allStats) {\n      if (allStats.hasOwnProperty(_key2)) {\n        this._statsPrevious[_key2] = allStats[_key2];\n      }\n    }\n  }\n};\n/**\n * @param {string} key - key stats identifier\n * @param {string} manifestId - manifest identifier\n * @param {number} current - current value\n * @param {number} previous - previous value\n * @returns {number} - difference between current and previous value\n * @private\n */\n\n\nDownloadStats.prototype._getDiff = function (key, manifestId, current, previous) {\n  var currentValue = current[manifestId] && current[manifestId][key] || 0;\n  var previousValue = previous[manifestId] && previous[manifestId][key] || 0;\n  return currentValue - previousValue;\n};\n/**\n *\n * @param {string|array} manifestIds - manifest identifier or array of manifests identifier\n * @returns {*} stats for certain download or array of stats for downloads\n */\n\n\nDownloadStats.prototype.getStats = function (manifestIds) {\n  var stats;\n\n  if (this._stats) {\n    if (typeof manifestIds === \'string\') {\n      stats = this._stats[manifestIds];\n    } else {\n      stats = [];\n\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        var stat = this._stats[manifestIds[i]];\n\n        if (stat) {\n          stats.push(stat);\n        }\n      }\n    }\n  }\n\n  return stats;\n};\n\nDownloadStats.prototype.refresh = function () {\n  this._generate(true);\n};\n\nDownloadStats.prototype.start = function () {\n  if (!this._interval) {\n    this._interval = setInterval(this._generate, this._STATS_TIME_GENERATION);\n\n    this._generate();\n  }\n};\n\nDownloadStats.prototype.stop = function () {\n  clearInterval(this._interval);\n  this._interval = null;\n\n  this._generate();\n\n  this._statsPrevious = {};\n};\n\nmodule.exports = DownloadStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar XMLSerializer = __webpack_require__(10).XMLSerializer;\n\nvar appSettings = __webpack_require__(1);\n\nvar parseManifestWithChoosenRepresentations = __webpack_require__(97);\n\nvar downloadFileUtil = __webpack_require__(7);\n\nvar saveFile = __webpack_require__(98);\n\nvar translation = __webpack_require__(0);\n/**\n *\n * @constructor\n */\n\n\nfunction ManifestController() {\n  this._manifests = {};\n}\n/**\n *\n * @param {object} manifest manifest object\n * @returns {void}\n */\n\n\nManifestController.prototype.cacheManifest = function (manifest) {\n  this._manifests[manifest.id] = manifest;\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {*} manifests\n */\n\n\nManifestController.prototype.getManifests = function (manifestIds) {\n  var selectedManifests;\n\n  if (typeof manifestIds === "undefined") {\n    selectedManifests = this._manifests;\n  } else if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    selectedManifests = [this._manifests[String(manifestIds)]];\n  } else {\n    selectedManifests = [];\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      if (this._manifests[manifestIds[i]]) {\n        selectedManifests.push(this._manifests[manifestIds[i]]);\n      }\n    }\n  }\n\n  return selectedManifests;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest\n */\n\n\nManifestController.prototype.getManifestById = function (manifestId) {\n  if (typeof manifestId === "number" || typeof manifestId === "string") {\n    return this._manifests[String(manifestId)];\n  }\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {Array} manifests infomrations\n */\n\n\nManifestController.prototype.getManifestsInfo = function (manifestIds) {\n  var manifests = [];\n  var selectedManifests = this.getManifests(manifestIds);\n\n  for (var i = 0, j = selectedManifests.length; i < j; i++) {\n    manifests.push(selectedManifests[i].getJsonInfo());\n  }\n\n  return manifests;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} local path for manifest files\n */\n\n\nManifestController.prototype.getOriginalManifestLocalPath = function (manifestId) {\n  return appSettings.getSettings().settingsFolder + manifestId + "/";\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest info\n */\n\n\nManifestController.prototype.getManifestInfoById = function (manifestId) {\n  var manifest = this.getManifestById(manifestId);\n\n  if (manifest) {\n    return manifest.getJsonInfo();\n  }\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {void}\n */\n\n\nManifestController.prototype.removeFromCache = function (manifestIds) {\n  if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    manifestIds = [String(manifestIds)];\n  }\n\n  manifestIds = manifestIds || [];\n\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    delete this._manifests[manifestIds[i]];\n  }\n};\n\nManifestController.prototype.removeFromCacheAll = function () {\n  this._manifests = [];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nManifestController.prototype.saveOriginalManifestOnceOnly = function (manifestId) {\n  var localPath = this.getOriginalManifestLocalPath(manifestId);\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    downloadFileUtil.checkForLocalFile(localPath + manifest.getManifestName(), function (exists) {\n      if (exists) {\n        resolve();\n      } else {\n        var xmlSerializer = new XMLSerializer();\n        var manifestString;\n\n        try {\n          manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations representations to be saved\n * @param {string} downloadFolder - folder where all fragments are downloaded\n * @returns {Promise} promise\n */\n\n\nManifestController.prototype.saveManifestWithChosenRepresentations = function (manifestId, representations, downloadFolder) {\n  var localPath = downloadFolder;\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    var manifestString;\n\n    try {\n      manifestString = parseManifestWithChoosenRepresentations(manifest, representations);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nmodule.exports = ManifestController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///96\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar constants = __webpack_require__(20);\n\nvar Manifest = __webpack_require__(15).Manifest;\n\nvar XMLSerializer = __webpack_require__(10).XMLSerializer;\n\nfunction getMimeType(value) {\n  if (value.indexOf("video") !== -1) {\n    return "video";\n  } else if (value.indexOf("audio") !== -1) {\n    return "audio";\n  } else {\n    return "text";\n  }\n}\n\nfunction parseManifestWithChoosenRepresentations(manifest, representations) {\n  var manifestId = manifest.id;\n  var xmlSerializer = new XMLSerializer();\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n  manifest = new Manifest(manifestId);\n  manifest.loadFromStr(manifestString, manifestUrl);\n  var video = representations.video;\n  var audio = representations.audio;\n  var text = representations.text;\n  var chosenRepresentations = {};\n  chosenRepresentations["video"] = {};\n\n  for (var i = 0, j = video.length; i < j; i++) {\n    chosenRepresentations["video"][video[i]] = true;\n  }\n\n  chosenRepresentations["audio"] = {};\n\n  for (var _i = 0, _j = audio.length; _i < _j; _i++) {\n    chosenRepresentations["audio"][audio[_i]] = true;\n  }\n\n  chosenRepresentations["text"] = {};\n\n  for (var _i2 = 0, _j2 = text.length; _i2 < _j2; _i2++) {\n    chosenRepresentations["text"][text[_i2]] = true;\n  }\n\n  function markNodeForDownload(repr) {\n    for (var _i3 = 0, _j3 = repr.length; _i3 < _j3; _i3++) {\n      for (var k = 0, l = repr[_i3].representationColl.length; k < l; k++) {\n        var id = repr[_i3].representationColl[k].attributeList.id;\n        var mimeType = getMimeType(repr[_i3].representationColl[k].attributeList.mimeType);\n\n        if (chosenRepresentations[mimeType][id]) {\n          repr[_i3].representationColl[k].markNodeForDownload(true);\n        }\n      }\n    }\n  } // fix the baseURL by removing http and https the same is done when saving a file\n  // see api/util/downloads.js -> getDownloadLinks\n\n\n  function fixBaseURL(repr) {\n    for (var _i4 = 0, _j4 = repr.length; _i4 < _j4; _i4++) {\n      var baseURL = repr[_i4].currentNode.getElementsByTagName("BaseURL")[0];\n\n      if (baseURL && baseURL.textContent.match(constants.regexpProtocolRemove)) {\n        baseURL.textContent = baseURL.textContent.replace(constants.regexpProtocolRemove, "");\n      }\n    }\n  }\n\n  markNodeForDownload(manifest.getVideoRepresentations());\n  markNodeForDownload(manifest.getAudioRepresentations());\n  markNodeForDownload(manifest.getTextRepresentations());\n  fixBaseURL(manifest.getVideoRepresentations());\n  fixBaseURL(manifest.getAudioRepresentations());\n  fixBaseURL(manifest.getTextRepresentations());\n  manifest.removeNode();\n  return xmlSerializer.serializeToString(manifest.getManifestXML());\n}\n\nmodule.exports = parseManifestWithChoosenRepresentations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(13),\n    mkdirp = _require.mkdirp;\n\nvar fs = __webpack_require__(2);\n\nvar path = __webpack_require__(4);\n\nfunction saveFile(filePath, fileName, value, callback) {\n  mkdirp(filePath).then(function () {\n    var fileUrl = path.resolve(filePath + "/" + fileName);\n    fs.writeFile(fileUrl, value, "utf-8", callback);\n  }, function (error) {\n    callback(error);\n  });\n}\n\nmodule.exports = saveFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9zYXZlLWZpbGUuanM/Yzk1ZiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwibWtkaXJwIiwiZnMiLCJwYXRoIiwic2F2ZUZpbGUiLCJmaWxlUGF0aCIsImZpbGVOYW1lIiwidmFsdWUiLCJjYWxsYmFjayIsInRoZW4iLCJmaWxlVXJsIiwicmVzb2x2ZSIsIndyaXRlRmlsZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O2VBQ0lBLG1CQUFPLENBQUMsRUFBRCxDO0lBQWpCQyxNLFlBQUFBLE07O0FBQ1AsSUFBTUMsRUFBRSxHQUFHRixtQkFBTyxDQUFDLENBQUQsQ0FBbEI7O0FBQ0EsSUFBTUcsSUFBSSxHQUFHSCxtQkFBTyxDQUFDLENBQUQsQ0FBcEI7O0FBRUEsU0FBU0ksUUFBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFFBQTdCLEVBQXVDQyxLQUF2QyxFQUE4Q0MsUUFBOUMsRUFBd0Q7QUFDdERQLFFBQU0sQ0FBQ0ksUUFBRCxDQUFOLENBQWlCSSxJQUFqQixDQUFzQixZQUFZO0FBQ2hDLFFBQU1DLE9BQU8sR0FBR1AsSUFBSSxDQUFDUSxPQUFMLENBQWFOLFFBQVEsR0FBRyxHQUFYLEdBQWlCQyxRQUE5QixDQUFoQjtBQUNBSixNQUFFLENBQUNVLFNBQUgsQ0FBYUYsT0FBYixFQUFzQkgsS0FBdEIsRUFBNkIsT0FBN0IsRUFBc0NDLFFBQXRDO0FBQ0QsR0FIRCxFQUdHLFVBQVVLLEtBQVYsRUFBaUI7QUFDbEJMLFlBQVEsQ0FBQ0ssS0FBRCxDQUFSO0FBQ0QsR0FMRDtBQU1EOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJYLFFBQWpCIiwiZmlsZSI6Ijk4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7bWtkaXJwfSA9IHJlcXVpcmUoXCJta2RpcnBcIik7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxuZnVuY3Rpb24gc2F2ZUZpbGUgKGZpbGVQYXRoLCBmaWxlTmFtZSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gIG1rZGlycChmaWxlUGF0aCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZmlsZVVybCA9IHBhdGgucmVzb2x2ZShmaWxlUGF0aCArIFwiL1wiICsgZmlsZU5hbWUpO1xuICAgIGZzLndyaXRlRmlsZShmaWxlVXJsLCB2YWx1ZSwgXCJ1dGYtOFwiLCBjYWxsYmFjayk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2F2ZUZpbGU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar path = __webpack_require__(4);\n\nvar getSize = __webpack_require__(100);\n\nvar rmdir = __webpack_require__(30);\n\nvar appSettings = __webpack_require__(1);\n\nvar ReadItem = __webpack_require__(37);\n\nvar dirList = __webpack_require__(101);\n\nvar Manifest = __webpack_require__(15).Manifest;\n\nvar STATUSES = __webpack_require__(8);\n/**\n *\n * @param {ManifestController} manifestController - reference to existing manifest controller\n * @constructor\n */\n\n\nfunction OfflineController(manifestController) {\n  this._manifestController = manifestController;\n}\n/**\n *\n * @param {Function} callback - function to be called when list is ready\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestsList = function (callback) {\n  dirList(appSettings.getSettings().settingsFolder, true, false).then(function (settingsFolderList) {\n    var manifestList = [];\n\n    for (var i = 0, j = settingsFolderList.length; i < j; i++) {\n      manifestList.push(settingsFolderList[i]);\n    }\n\n    callback(null, manifestList);\n  }, function (err) {\n    callback(err);\n  });\n};\n/**\n *\n * @param {Function} callback - function to be called when list with info is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestsListWithInfo = function (callback, full) {\n  var self = this;\n  this.getManifestsList(function (err, list) {\n    if (err) {\n      callback(err);\n    } else {\n      var infoP = [];\n\n      for (var i = 0, j = list.length; i < j; i++) {\n        infoP.push(self.getManifestInfoPromise(list[i], full));\n      }\n\n      Promise.all(infoP).then(function (results) {\n        var newResults = [];\n\n        for (var _i = 0, _j = results.length; _i < _j; _i++) {\n          if (results[_i]) {\n            newResults.push(results[_i]);\n          }\n        }\n\n        callback(null, newResults);\n      }, function (promisesError) {\n        callback(promisesError);\n      });\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestInfo = function (manifestId, callback, full) {\n  var self = this;\n\n  function addManifestInfoAndContinue(info) {\n    var manifestName = info.manifest.name;\n    var manifestUrl = info.manifest.url;\n    var manifestLocalUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/" + manifestName);\n\n    var manifest = self._manifestController.getManifestById(manifestId);\n\n    if (manifest) {\n      info.manifestInfo = manifest.getJsonInfo();\n      callback(null, info);\n    } else {\n      manifest = new Manifest(manifestId);\n      manifest.loadFromLocal(manifestLocalUrl, manifestUrl).then(function () {\n        self._manifestController.cacheManifest(manifest);\n\n        info.manifestInfo = manifest.getJsonInfo();\n        callback(null, info);\n      }, function (err) {\n        if (err && err.code === "ENOENT") {\n          callback();\n        } else {\n          callback(err);\n        }\n      });\n    }\n  }\n\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST), new ReadItem(manifestId, appSettings.getSettings().stores.DOWNLOADS.DOWNLOADED), new ReadItem(manifestId, appSettings.getSettings().stores.STATUS), new ReadItem(manifestId, appSettings.getSettings().stores.PERSISTENT), new ReadItem(manifestId, appSettings.getSettings().stores.DATA)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloaded = results[1] || [];\n    var status = results[2] || {};\n    var persistent = results[3] || \'\';\n    var data = results[4] || \'\';\n    info.status = status.status || STATUSES.BROKEN;\n    info.details = status.details || undefined;\n\n    if (!self.downloadStorage.keyExists(manifestId) && info.status === STATUSES.STARTED) {\n      info.status = STATUSES.BROKEN;\n    }\n\n    info.manifest = manifestSettings;\n\n    if (info.manifest.files) {\n      info.manifest.totalFiles = info.manifest.files.length;\n\n      if (full === false) {\n        delete info.manifest.files;\n      }\n    }\n\n    info.left = status.left || 0;\n    info.persistent = persistent;\n    info.downloaded = downloaded.length;\n\n    if (full) {\n      info.downloadedFiles = downloaded;\n    }\n\n    info.data = data;\n    addManifestInfoAndContinue(info);\n  }, callback);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestFolderInfo = function (manifestId, callback) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloadFolder = manifestSettings.folder;\n\n    if (!downloadFolder) {\n      // try to serve from default download folder\n      downloadFolder = appSettings.getSettings().downloadsFolderPath;\n    }\n\n    var videoFolder = path.join(downloadFolder, manifestId);\n    info.folder = videoFolder; // get size of folder\n\n    getSize(videoFolder, function (err, size) {\n      if (err) {\n        info.size = 0;\n      } else {\n        info.size = size;\n      }\n\n      callback(null, info);\n    });\n  }, callback);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.getManifestInfoPromise = function (manifestId, full) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getManifestInfo(manifestId, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    }, full);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - callback with resolved info data about manifest - if such exists\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestDataFile = function (manifestId, callback) {\n  new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST).then(function (data) {\n    callback(data);\n  }, function () {\n    callback();\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when remove has been successfully\n * @param {Function} onFailure - callback to be invoked when remove failed\n * @returns {void}\n */\n\n\nOfflineController.prototype.remove = function (manifestId, onSuccess, onFailure) {\n  var settingsFolder = appSettings.getSettings().settingsFolder + manifestId;\n  this.getManifestDataFile(manifestId, function (info) {\n    if (!info) {\n      // no manifest data found for manifest, the download has not been started => just remove settings\n      rmdir(settingsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          onSuccess();\n        }\n      });\n    } else {\n      var folder = info.folder;\n\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n\n      var downloadsFolder = folder + \'/\' + manifestId;\n      rmdir(downloadsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              onFailure(err);\n            } else {\n              onSuccess();\n            }\n          });\n        }\n      });\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.remove(manifestId, resolve, reject);\n  });\n};\n/**\n *\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.removeAllPromise = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var settingsFolder = appSettings.getSettings().settingsFolder;\n    self.getManifestsList(function (err, list) {\n      if (err) {\n        reject(err);\n      } else {\n        var removeP = [];\n\n        for (var i = 0, j = list.length; i < j; i++) {\n          removeP.push(self.removePromise(list[i]));\n        }\n\n        Promise.all(removeP).then(function () {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when restore has been successfully\n * @param {Function} onFailure - callback to be invoked when restore failed\n * @returns {void}\n */\n\n\nOfflineController.prototype.restoreLocalManifest = function (manifestId, onSuccess, onFailure) {\n  var self = this;\n  this.getManifestInfo(manifestId, function (err, info) {\n    var representations = {};\n    representations.video = info.manifest.video;\n    representations.audio = info.manifest.audio;\n    representations.text = info.manifest.text;\n\n    self._manifestController.saveManifestWithChosenRepresentations(manifestId, representations).then(onSuccess, onFailure);\n  });\n};\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @returns {void}\n */\n\n\nOfflineController.prototype.setDownloadStorage = function (storage) {\n  this.downloadStorage = storage;\n};\n\nmodule.exports = OfflineController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99\n')},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__100__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJnZXQtZm9sZGVyLXNpemVcIj85NzU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTAwX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar fs = __webpack_require__(2);\n\nvar path = __webpack_require__(4);\n/**\n * @param {string} dir - folder path\n * @param {string} itemName - folder or file name\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\n\n\nfunction filterDirItem(dir, itemName, includeFolders, includeFiles) {\n  var folderPath = path.resolve(dir + "/" + itemName);\n  return new Promise(function (resolve, reject) {\n    fs.stat(folderPath, function (err, stat) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      if (stat.isDirectory()) {\n        if (!includeFolders) {\n          itemName = undefined;\n        }\n\n        resolve(itemName);\n      } else {\n        if (!includeFiles) {\n          itemName = undefined;\n        }\n\n        resolve(itemName);\n      }\n    });\n  });\n}\n/**\n * @param {string} dir - folder path\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\n\n\nfunction dirList(dir, includeFolders, includeFiles) {\n  if (typeof includeFolders === "undefined") {\n    includeFolders = true;\n  }\n\n  if (typeof includeFiles === "undefined") {\n    includeFiles = true;\n  }\n\n  return new Promise(function (resolve, reject) {\n    fs.readdir(dir, function (err, folders) {\n      if (err) {\n        //not found return empty list, there was another error ENOTDIR but it seems like this is not a valid case anyway\n        if (err.code === "ENOENT" || err.code === "ENOTDIR") {\n          resolve([]);\n        } else {\n          reject(err.message);\n        }\n      } else {\n        var foldersPromises = [];\n\n        for (var i = 0, j = folders.length; i < j; i++) {\n          foldersPromises.push(filterDirItem(dir, folders[i], includeFolders, includeFiles));\n        }\n\n        Promise.all(foldersPromises).then(function (results) {\n          resolve(results.filter(function (folderName) {\n            return typeof folderName !== "undefined";\n          }));\n        }, function (promiseError) {\n          reject(promiseError);\n        });\n      }\n    });\n  });\n}\n\nmodule.exports = dirList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9kaXItbGlzdC5qcz8yZjFmIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJmaWx0ZXJEaXJJdGVtIiwiZGlyIiwiaXRlbU5hbWUiLCJpbmNsdWRlRm9sZGVycyIsImluY2x1ZGVGaWxlcyIsImZvbGRlclBhdGgiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXQiLCJlcnIiLCJpc0RpcmVjdG9yeSIsInVuZGVmaW5lZCIsImRpckxpc3QiLCJyZWFkZGlyIiwiZm9sZGVycyIsImNvZGUiLCJtZXNzYWdlIiwiZm9sZGVyc1Byb21pc2VzIiwiaSIsImoiLCJsZW5ndGgiLCJwdXNoIiwiYWxsIiwidGhlbiIsInJlc3VsdHMiLCJmaWx0ZXIiLCJmb2xkZXJOYW1lIiwicHJvbWlzZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBTUEsRUFBRSxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBbEI7O0FBQ0EsSUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLENBQUQsQ0FBcEI7QUFDQTs7Ozs7Ozs7O0FBT0EsU0FBU0UsYUFBVCxDQUF3QkMsR0FBeEIsRUFBNkJDLFFBQTdCLEVBQXVDQyxjQUF2QyxFQUF1REMsWUFBdkQsRUFBcUU7QUFDbkUsTUFBTUMsVUFBVSxHQUFHTixJQUFJLENBQUNPLE9BQUwsQ0FBYUwsR0FBRyxHQUFHLEdBQU4sR0FBWUMsUUFBekIsQ0FBbkI7QUFDQSxTQUFPLElBQUlLLE9BQUosQ0FBWSxVQUFVRCxPQUFWLEVBQW1CRSxNQUFuQixFQUEyQjtBQUM1Q1gsTUFBRSxDQUFDWSxJQUFILENBQVFKLFVBQVIsRUFBb0IsVUFBVUssR0FBVixFQUFlRCxJQUFmLEVBQXFCO0FBQ3ZDLFVBQUlDLEdBQUosRUFBUztBQUNQRixjQUFNLENBQUNFLEdBQUQsQ0FBTjtBQUNBO0FBQ0Q7O0FBQ0QsVUFBSUQsSUFBSSxDQUFDRSxXQUFMLEVBQUosRUFBd0I7QUFDdEIsWUFBSSxDQUFDUixjQUFMLEVBQXFCO0FBQ25CRCxrQkFBUSxHQUFHVSxTQUFYO0FBQ0Q7O0FBQ0ROLGVBQU8sQ0FBQ0osUUFBRCxDQUFQO0FBQ0QsT0FMRCxNQUtPO0FBQ0wsWUFBSSxDQUFDRSxZQUFMLEVBQW1CO0FBQ2pCRixrQkFBUSxHQUFHVSxTQUFYO0FBQ0Q7O0FBQ0ROLGVBQU8sQ0FBQ0osUUFBRCxDQUFQO0FBQ0Q7QUFDRixLQWhCRDtBQWlCRCxHQWxCTSxDQUFQO0FBbUJEO0FBRUQ7Ozs7Ozs7O0FBTUEsU0FBU1csT0FBVCxDQUFrQlosR0FBbEIsRUFBdUJFLGNBQXZCLEVBQXVDQyxZQUF2QyxFQUFxRDtBQUNuRCxNQUFJLE9BQU9ELGNBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDekNBLGtCQUFjLEdBQUcsSUFBakI7QUFDRDs7QUFDRCxNQUFJLE9BQU9DLFlBQVAsS0FBd0IsV0FBNUIsRUFBeUM7QUFDdkNBLGdCQUFZLEdBQUcsSUFBZjtBQUNEOztBQUNELFNBQU8sSUFBSUcsT0FBSixDQUFZLFVBQVVELE9BQVYsRUFBbUJFLE1BQW5CLEVBQTJCO0FBQzVDWCxNQUFFLENBQUNpQixPQUFILENBQVdiLEdBQVgsRUFBZ0IsVUFBVVMsR0FBVixFQUFlSyxPQUFmLEVBQXdCO0FBQ3RDLFVBQUlMLEdBQUosRUFBUztBQUNQO0FBQ0EsWUFBSUEsR0FBRyxDQUFDTSxJQUFKLEtBQWEsUUFBYixJQUF5Qk4sR0FBRyxDQUFDTSxJQUFKLEtBQWEsU0FBMUMsRUFBcUQ7QUFDbkRWLGlCQUFPLENBQUMsRUFBRCxDQUFQO0FBQ0QsU0FGRCxNQUVPO0FBQ0xFLGdCQUFNLENBQUNFLEdBQUcsQ0FBQ08sT0FBTCxDQUFOO0FBQ0Q7QUFDRixPQVBELE1BT087QUFDTCxZQUFJQyxlQUFlLEdBQUcsRUFBdEI7O0FBQ0EsYUFBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdMLE9BQU8sQ0FBQ00sTUFBNUIsRUFBb0NGLENBQUMsR0FBR0MsQ0FBeEMsRUFBMkNELENBQUMsRUFBNUMsRUFBZ0Q7QUFDOUNELHlCQUFlLENBQUNJLElBQWhCLENBQXFCdEIsYUFBYSxDQUFDQyxHQUFELEVBQU1jLE9BQU8sQ0FBQ0ksQ0FBRCxDQUFiLEVBQWtCaEIsY0FBbEIsRUFBa0NDLFlBQWxDLENBQWxDO0FBQ0Q7O0FBQ0RHLGVBQU8sQ0FBQ2dCLEdBQVIsQ0FBWUwsZUFBWixFQUE2Qk0sSUFBN0IsQ0FBa0MsVUFBVUMsT0FBVixFQUFtQjtBQUNuRG5CLGlCQUFPLENBQUNtQixPQUFPLENBQUNDLE1BQVIsQ0FBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQzNDLG1CQUFPLE9BQU9BLFVBQVAsS0FBc0IsV0FBN0I7QUFDRCxXQUZPLENBQUQsQ0FBUDtBQUdELFNBSkQsRUFJRyxVQUFVQyxZQUFWLEVBQXdCO0FBQ3pCcEIsZ0JBQU0sQ0FBQ29CLFlBQUQsQ0FBTjtBQUNELFNBTkQ7QUFPRDtBQUNGLEtBckJEO0FBc0JELEdBdkJNLENBQVA7QUF3QkQ7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLE9BQWpCIiwiZmlsZSI6IjEwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgLSBmb2xkZXIgcGF0aFxuICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OYW1lIC0gZm9sZGVyIG9yIGZpbGUgbmFtZVxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlRm9sZGVycyAtIGlmIGZvbGRlcnMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGaWxlcyAtIGlmIGZpbGVzIHNob3VsZCBiZSBpbmNsdWRlZFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuZnVuY3Rpb24gZmlsdGVyRGlySXRlbSAoZGlyLCBpdGVtTmFtZSwgaW5jbHVkZUZvbGRlcnMsIGluY2x1ZGVGaWxlcykge1xuICBjb25zdCBmb2xkZXJQYXRoID0gcGF0aC5yZXNvbHZlKGRpciArIFwiL1wiICsgaXRlbU5hbWUpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZzLnN0YXQoZm9sZGVyUGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICBpZiAoIWluY2x1ZGVGb2xkZXJzKSB7XG4gICAgICAgICAgaXRlbU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShpdGVtTmFtZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaW5jbHVkZUZpbGVzKSB7XG4gICAgICAgICAgaXRlbU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShpdGVtTmFtZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRpciAtIGZvbGRlciBwYXRoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGb2xkZXJzIC0gaWYgZm9sZGVycyBzaG91bGQgYmUgaW5jbHVkZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUZpbGVzIC0gaWYgZmlsZXMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZVxuICovXG5mdW5jdGlvbiBkaXJMaXN0IChkaXIsIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpIHtcbiAgaWYgKHR5cGVvZiBpbmNsdWRlRm9sZGVycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGb2xkZXJzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluY2x1ZGVGaWxlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGaWxlcyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkZGlyKGRpciwgZnVuY3Rpb24gKGVyciwgZm9sZGVycykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvL25vdCBmb3VuZCByZXR1cm4gZW1wdHkgbGlzdCwgdGhlcmUgd2FzIGFub3RoZXIgZXJyb3IgRU5PVERJUiBidXQgaXQgc2VlbXMgbGlrZSB0aGlzIGlzIG5vdCBhIHZhbGlkIGNhc2UgYW55d2F5XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gXCJFTk9FTlRcIiB8fCBlcnIuY29kZSA9PT0gXCJFTk9URElSXCIpIHtcbiAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZm9sZGVyc1Byb21pc2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gZm9sZGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBmb2xkZXJzUHJvbWlzZXMucHVzaChmaWx0ZXJEaXJJdGVtKGRpciwgZm9sZGVyc1tpXSwgaW5jbHVkZUZvbGRlcnMsIGluY2x1ZGVGaWxlcykpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKGZvbGRlcnNQcm9taXNlcykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKGZvbGRlck5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9sZGVyTmFtZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHByb21pc2VFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlRXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGlyTGlzdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///101\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n *\n * @constructor\n */\n\nfunction SubscribersController() {\n  this._subscribers = {};\n}\n/**\n *\n * @param {Subscriber} subscriber - subscriber\n * @returns {void}\n */\n\n\nSubscribersController.prototype.addSubscriber = function (subscriber) {\n  var id = subscriber.getId();\n  this._subscribers[id] = subscriber;\n  return id;\n};\n/**\n *\n * @param {Array|String} subscribersId - subscriber identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.removeSubscribersById = function (subscribersId) {\n  if (typeof subscribersId === "string") {\n    subscribersId = [subscribersId];\n  }\n\n  for (var i = 0, j = subscribersId.length; i < j; i++) {\n    if (this._subscribers[subscribersId[i]]) {\n      this._subscribers[subscribersId[i]].remove();\n\n      delete this._subscribers[subscribersId[i]];\n    }\n  }\n};\n/**\n *\n * Remove all subscribers for certain manifest based on any subscriberId that belongs to this manifest\n * @param {Array|String} subscriberId - subscriber identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.removeAllManifestSubscribersById = function (subscriberId) {\n  var subscriber = subscriberId && this._subscribers[subscriberId];\n\n  if (subscriber) {\n    this.unsubscribe(subscriber.getManifestId());\n  }\n};\n/**\n *\n * @param {Array|String} manifestIds - manifest or manifests identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.unsubscribe = function (manifestIds) {\n  var subscribersId = [];\n  var manifestIdsHash = {};\n\n  if (typeof manifestIds === "string") {\n    manifestIds = [manifestIds];\n  }\n\n  manifestIds = manifestIds || [];\n\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    manifestIdsHash[manifestIds[i]] = true;\n  }\n\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      if (manifestIdsHash[this._subscribers[key].getManifestId()]) {\n        subscribersId.push(key);\n      }\n    }\n  }\n\n  this.removeSubscribersById(subscribersId);\n};\n/**\n * @returns {void}\n */\n\n\nSubscribersController.prototype.unsubscribeAll = function () {\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      this._subscribers[key].remove();\n    }\n  }\n\n  this._subscribers = {};\n};\n\nmodule.exports = SubscribersController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvY29udHJvbGxlcnMvc3Vic2NyaWJlcnMtY29udHJvbGxlci5qcz9hODQ4Il0sIm5hbWVzIjpbIlN1YnNjcmliZXJzQ29udHJvbGxlciIsIl9zdWJzY3JpYmVycyIsInByb3RvdHlwZSIsImFkZFN1YnNjcmliZXIiLCJzdWJzY3JpYmVyIiwiaWQiLCJnZXRJZCIsInJlbW92ZVN1YnNjcmliZXJzQnlJZCIsInN1YnNjcmliZXJzSWQiLCJpIiwiaiIsImxlbmd0aCIsInJlbW92ZSIsInJlbW92ZUFsbE1hbmlmZXN0U3Vic2NyaWJlcnNCeUlkIiwic3Vic2NyaWJlcklkIiwidW5zdWJzY3JpYmUiLCJnZXRNYW5pZmVzdElkIiwibWFuaWZlc3RJZHMiLCJtYW5pZmVzdElkc0hhc2giLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJ1bnN1YnNjcmliZUFsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7O0FBSUEsU0FBU0EscUJBQVQsR0FBa0M7QUFDaEMsT0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNEO0FBRUQ7Ozs7Ozs7QUFLQUQscUJBQXFCLENBQUNFLFNBQXRCLENBQWdDQyxhQUFoQyxHQUFnRCxVQUFVQyxVQUFWLEVBQXNCO0FBQ3BFLE1BQU1DLEVBQUUsR0FBR0QsVUFBVSxDQUFDRSxLQUFYLEVBQVg7QUFDQSxPQUFLTCxZQUFMLENBQWtCSSxFQUFsQixJQUF3QkQsVUFBeEI7QUFDQSxTQUFPQyxFQUFQO0FBQ0QsQ0FKRDtBQU1BOzs7Ozs7O0FBS0FMLHFCQUFxQixDQUFDRSxTQUF0QixDQUFnQ0sscUJBQWhDLEdBQXdELFVBQVVDLGFBQVYsRUFBeUI7QUFDL0UsTUFBSSxPQUFPQSxhQUFQLEtBQXlCLFFBQTdCLEVBQXVDO0FBQ3JDQSxpQkFBYSxHQUFHLENBQUNBLGFBQUQsQ0FBaEI7QUFDRDs7QUFDRCxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0YsYUFBYSxDQUFDRyxNQUFsQyxFQUEwQ0YsQ0FBQyxHQUFHQyxDQUE5QyxFQUFpREQsQ0FBQyxFQUFsRCxFQUFzRDtBQUNwRCxRQUFJLEtBQUtSLFlBQUwsQ0FBa0JPLGFBQWEsQ0FBQ0MsQ0FBRCxDQUEvQixDQUFKLEVBQXlDO0FBQ3ZDLFdBQUtSLFlBQUwsQ0FBa0JPLGFBQWEsQ0FBQ0MsQ0FBRCxDQUEvQixFQUFvQ0csTUFBcEM7O0FBQ0EsYUFBTyxLQUFLWCxZQUFMLENBQWtCTyxhQUFhLENBQUNDLENBQUQsQ0FBL0IsQ0FBUDtBQUNEO0FBQ0Y7QUFDRixDQVZEO0FBWUE7Ozs7Ozs7O0FBTUFULHFCQUFxQixDQUFDRSxTQUF0QixDQUFnQ1csZ0NBQWhDLEdBQW1FLFVBQVVDLFlBQVYsRUFBd0I7QUFDekYsTUFBSVYsVUFBVSxHQUFHVSxZQUFZLElBQUksS0FBS2IsWUFBTCxDQUFrQmEsWUFBbEIsQ0FBakM7O0FBQ0EsTUFBSVYsVUFBSixFQUFnQjtBQUNkLFNBQUtXLFdBQUwsQ0FBaUJYLFVBQVUsQ0FBQ1ksYUFBWCxFQUFqQjtBQUNEO0FBQ0YsQ0FMRDtBQU9BOzs7Ozs7O0FBS0FoQixxQkFBcUIsQ0FBQ0UsU0FBdEIsQ0FBZ0NhLFdBQWhDLEdBQThDLFVBQVVFLFdBQVYsRUFBdUI7QUFDbkUsTUFBSVQsYUFBYSxHQUFHLEVBQXBCO0FBQ0EsTUFBSVUsZUFBZSxHQUFHLEVBQXRCOztBQUNBLE1BQUksT0FBT0QsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNuQ0EsZUFBVyxHQUFHLENBQUNBLFdBQUQsQ0FBZDtBQUNEOztBQUNEQSxhQUFXLEdBQUdBLFdBQVcsSUFBSSxFQUE3Qjs7QUFDQSxPQUFLLElBQUlSLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR08sV0FBVyxDQUFDTixNQUFoQyxFQUF3Q0YsQ0FBQyxHQUFHQyxDQUE1QyxFQUErQ0QsQ0FBQyxFQUFoRCxFQUFvRDtBQUNsRFMsbUJBQWUsQ0FBQ0QsV0FBVyxDQUFDUixDQUFELENBQVosQ0FBZixHQUFrQyxJQUFsQztBQUNEOztBQUVELE9BQUssSUFBSVUsR0FBVCxJQUFnQixLQUFLbEIsWUFBckIsRUFBbUM7QUFDakMsUUFBSSxLQUFLQSxZQUFMLENBQWtCbUIsY0FBbEIsQ0FBaUNELEdBQWpDLENBQUosRUFBMkM7QUFDekMsVUFBSUQsZUFBZSxDQUFDLEtBQUtqQixZQUFMLENBQWtCa0IsR0FBbEIsRUFBdUJILGFBQXZCLEVBQUQsQ0FBbkIsRUFBNkQ7QUFDM0RSLHFCQUFhLENBQUNhLElBQWQsQ0FBbUJGLEdBQW5CO0FBQ0Q7QUFDRjtBQUNGOztBQUVELE9BQUtaLHFCQUFMLENBQTJCQyxhQUEzQjtBQUNELENBcEJEO0FBc0JBOzs7OztBQUdBUixxQkFBcUIsQ0FBQ0UsU0FBdEIsQ0FBZ0NvQixjQUFoQyxHQUFpRCxZQUFZO0FBQzNELE9BQUssSUFBSUgsR0FBVCxJQUFnQixLQUFLbEIsWUFBckIsRUFBbUM7QUFDakMsUUFBSSxLQUFLQSxZQUFMLENBQWtCbUIsY0FBbEIsQ0FBaUNELEdBQWpDLENBQUosRUFBMkM7QUFDekMsV0FBS2xCLFlBQUwsQ0FBa0JrQixHQUFsQixFQUF1QlAsTUFBdkI7QUFDRDtBQUNGOztBQUNELE9BQUtYLFlBQUwsR0FBb0IsRUFBcEI7QUFDRCxDQVBEOztBQVNBc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIscUJBQWpCIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN1YnNjcmliZXJzQ29udHJvbGxlciAoKSB7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0ge307XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7U3Vic2NyaWJlcn0gc3Vic2NyaWJlciAtIHN1YnNjcmliZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyc0NvbnRyb2xsZXIucHJvdG90eXBlLmFkZFN1YnNjcmliZXIgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICBjb25zdCBpZCA9IHN1YnNjcmliZXIuZ2V0SWQoKTtcbiAgdGhpcy5fc3Vic2NyaWJlcnNbaWRdID0gc3Vic2NyaWJlcjtcbiAgcmV0dXJuIGlkO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IHN1YnNjcmliZXJzSWQgLSBzdWJzY3JpYmVyIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyc0NvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmliZXJzQnlJZCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyc0lkKSB7XG4gIGlmICh0eXBlb2Ygc3Vic2NyaWJlcnNJZCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHN1YnNjcmliZXJzSWQgPSBbc3Vic2NyaWJlcnNJZF07XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGogPSBzdWJzY3JpYmVyc0lkLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpYmVyc1tzdWJzY3JpYmVyc0lkW2ldXSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnNbc3Vic2NyaWJlcnNJZFtpXV0ucmVtb3ZlKCk7XG4gICAgICBkZWxldGUodGhpcy5fc3Vic2NyaWJlcnNbc3Vic2NyaWJlcnNJZFtpXV0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKlxuICogUmVtb3ZlIGFsbCBzdWJzY3JpYmVycyBmb3IgY2VydGFpbiBtYW5pZmVzdCBiYXNlZCBvbiBhbnkgc3Vic2NyaWJlcklkIHRoYXQgYmVsb25ncyB0byB0aGlzIG1hbmlmZXN0XG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gc3Vic2NyaWJlcklkIC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVBbGxNYW5pZmVzdFN1YnNjcmliZXJzQnlJZCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVySWQpIHtcbiAgbGV0IHN1YnNjcmliZXIgPSBzdWJzY3JpYmVySWQgJiYgdGhpcy5fc3Vic2NyaWJlcnNbc3Vic2NyaWJlcklkXTtcbiAgaWYgKHN1YnNjcmliZXIpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlKHN1YnNjcmliZXIuZ2V0TWFuaWZlc3RJZCgpKTtcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1hbmlmZXN0SWRzIC0gbWFuaWZlc3Qgb3IgbWFuaWZlc3RzIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyc0NvbnRyb2xsZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG1hbmlmZXN0SWRzKSB7XG4gIGxldCBzdWJzY3JpYmVyc0lkID0gW107XG4gIGxldCBtYW5pZmVzdElkc0hhc2ggPSB7fTtcbiAgaWYgKHR5cGVvZiBtYW5pZmVzdElkcyA9PT0gXCJzdHJpbmdcIikge1xuICAgIG1hbmlmZXN0SWRzID0gW21hbmlmZXN0SWRzXTtcbiAgfVxuICBtYW5pZmVzdElkcyA9IG1hbmlmZXN0SWRzIHx8IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IG1hbmlmZXN0SWRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIG1hbmlmZXN0SWRzSGFzaFttYW5pZmVzdElkc1tpXV0gPSB0cnVlO1xuICB9XG5cbiAgZm9yIChsZXQga2V5IGluIHRoaXMuX3N1YnNjcmliZXJzKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmliZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChtYW5pZmVzdElkc0hhc2hbdGhpcy5fc3Vic2NyaWJlcnNba2V5XS5nZXRNYW5pZmVzdElkKCldKSB7XG4gICAgICAgIHN1YnNjcmliZXJzSWQucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVtb3ZlU3Vic2NyaWJlcnNCeUlkKHN1YnNjcmliZXJzSWQpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS51bnN1YnNjcmliZUFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yIChsZXQga2V5IGluIHRoaXMuX3N1YnNjcmliZXJzKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmliZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzW2tleV0ucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIHRoaXMuX3N1YnNjcmliZXJzID0ge307XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YnNjcmliZXJzQ29udHJvbGxlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///102\n')},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(__dirname) {/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\", \"log\"] }] */\n\n/*eslint no-sync: [\"off\"]*/\n\n\nvar isPortTaken = __webpack_require__(104);\n\nvar path = __webpack_require__(4);\n\nvar fs = __webpack_require__(2);\n\nvar fork = __webpack_require__(106).fork;\n\nvar appSettings = __webpack_require__(1);\n\nvar _require = __webpack_require__(3),\n    app = _require.app;\n\nvar CHILD_SCRIPT_FILENAME = 'startServer.js';\n/**\n * Offline content server\n * @param {object} offlineController : offline controller\n * @param {object} downloadController : download controller\n * @param {string} maxOfflineContentPortRange - max range for offline port to on which content can be served\n * @param {string} offlineContentPort - on which port offline content should be served, default is 3010\n * @constructor\n */\n\nfunction OfflineContentServer(offlineController, downloadController, maxOfflineContentPortRange, offlineContentPort) {\n  this._offlineController = offlineController;\n  this._downloadController = downloadController;\n  this._maxOfflineContentPortRange = maxOfflineContentPortRange;\n  this._offlineContentPort = offlineContentPort;\n  this.childProcess = undefined;\n}\n/**\n * Start http server in a child_process\n * @param {object} port : on which port offline content should be served, default is 3010\n * @param {object} callback : a callback function to get listen port (if default is already taken)\n * @constructor\n */\n\n\nOfflineContentServer.prototype._startServer = function (port, callback) {\n  var self = this; // NOTE: this is so ugly FIXME\n\n  var serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron');\n\n  if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n    serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron/api/server');\n\n    if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n      serverPath = app.getAppPath();\n\n      if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n        serverPath = __dirname;\n      }\n    }\n  }\n\n  console.log('Server Path:', serverPath);\n  var script = path.join(serverPath, CHILD_SCRIPT_FILENAME);\n  console.log('Script for server:', script); //  FOR DEBUG PURPOSE self.childProcess = fork(script ,[],{execArgv:['--inspect=5860']});\n\n  self.childProcess = fork(script, []);\n  var routeName = appSettings.getSettings().downloadsName; // send init data for http server\n\n  var data = {\n    cmd: 'init',\n    routeName: routeName,\n    port: port\n  };\n  self.childProcess.send(data);\n  self.childProcess.on('error', function (err) {\n    console.error(err);\n  }); // handles message from child process\n\n  self.childProcess.on('message', function (data) {\n    if (data.cmd === 'log') {\n      // http server wants to log some data\n      console.log(data.log);\n    }\n\n    if (data.cmd === 'listening_port') {\n      // http server is listening => notify application for listen port\n      callback(data.port);\n    }\n\n    if (data.cmd === 'get_info') {\n      var requestId = data.requestId; // http server asks data folder for manifest id\n\n      var manifestId = data.args.manifest;\n\n      self._offlineController.getManifestInfo(manifestId, function (err, info) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: requestId\n          });\n        }\n\n        var downloadFolder = info.manifest.folder;\n\n        if (!downloadFolder) {\n          // try to serve from default download folder\n          downloadFolder = appSettings.getSettings().downloadsFolderPath;\n        } // send response back\n\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: requestId,\n          result: {\n            folder: downloadFolder,\n            status: info.status\n          }\n        });\n      });\n    }\n\n    if (data.cmd === 'is_downloading') {\n      var _requestId = data.requestId;\n      var _manifestId = data.args.manifest;\n      var file = data.args.file;\n\n      var download = self._downloadController.getDownloading(_manifestId, file);\n\n      var downloadedCallback = function downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId\n          });\n        }\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId\n        });\n      };\n\n      if (download) {\n        // file is created but being downloading => wait for download before sending result\n        self._downloadController.waitForDownload(download, downloadedCallback);\n      } else {\n        return downloadedCallback();\n      }\n    }\n\n    if (data.cmd === 'perform_seek') {\n      var _requestId2 = data.requestId;\n      var _manifestId2 = data.args.manifest;\n      var _file = data.args.file;\n\n      var _downloadedCallback = function _downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId2\n          });\n        }\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId2\n        });\n      };\n\n      self._downloadController.performSeek(_manifestId2, _file, _downloadedCallback);\n    }\n  });\n  self.childProcess.on('close', function (code, signal) {\n    // child has closed\n    if (code == null) {\n      console.log('Child process closed with signal:', signal);\n    } else {\n      console.log('Child process closed with code:', code);\n    }\n  });\n};\n/**\n * @param {Function} callback - a callback function to get listen port (if default is taken)\n * @constructor\n */\n\n\nOfflineContentServer.prototype.serveOfflineContent = function (callback) {\n  var self = this;\n\n  function startOnPort(port) {\n    if (port > self._maxOfflineContentPortRange) {\n      return;\n    }\n\n    isPortTaken(port, function (err) {\n      if (err) {\n        port++;\n        startOnPort(port);\n      } else {\n        console.log('Port found:', port);\n\n        self._startServer(port, function () {\n          self._offlineContentPort = port;\n          callback(self._offlineContentPort);\n          console.info('Offline content served on port:', port);\n        });\n      }\n    });\n  }\n\n  startOnPort(this._offlineContentPort);\n};\n/*\n * Stop server process\n * @returns\n */\n\n\nOfflineContentServer.prototype.stop = function () {\n  this.childProcess.kill('SIGTERM');\n};\n\nmodule.exports = OfflineContentServer;\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///103\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar net = __webpack_require__(105);\n\nmodule.exports = function (port, fn) {\n  var tester = net.createServer().once('error', function (err) {\n    if (err) {\n      return fn(err);\n    }\n\n    fn(null, true);\n  }).once('listening', function () {\n    tester.once('close', function () {\n      fn(null, false);\n    }).close();\n  }).listen(port);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdXRpbC9pcy1wb3J0LXRha2VuLmpzP2NkYzciXSwibmFtZXMiOlsibmV0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwb3J0IiwiZm4iLCJ0ZXN0ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJvbmNlIiwiZXJyIiwiY2xvc2UiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQW5COztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsSUFBVixFQUFnQkMsRUFBaEIsRUFBb0I7QUFDbkMsTUFBTUMsTUFBTSxHQUFHTixHQUFHLENBQUNPLFlBQUosR0FBbUJDLElBQW5CLENBQXdCLE9BQXhCLEVBQWlDLFVBQVVDLEdBQVYsRUFBZTtBQUM3RCxRQUFJQSxHQUFKLEVBQVM7QUFDUCxhQUFPSixFQUFFLENBQUNJLEdBQUQsQ0FBVDtBQUNEOztBQUNESixNQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBRjtBQUNELEdBTGMsRUFLWkcsSUFMWSxDQUtQLFdBTE8sRUFLTSxZQUFZO0FBQy9CRixVQUFNLENBQUNFLElBQVAsQ0FBWSxPQUFaLEVBQXFCLFlBQVk7QUFDL0JILFFBQUUsQ0FBQyxJQUFELEVBQU8sS0FBUCxDQUFGO0FBQ0QsS0FGRCxFQUVHSyxLQUZIO0FBR0QsR0FUYyxFQVNaQyxNQVRZLENBU0xQLElBVEssQ0FBZjtBQVVELENBWEQiLCJmaWxlIjoiMTA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb3J0LCBmbikge1xuICBjb25zdCB0ZXN0ZXIgPSBuZXQuY3JlYXRlU2VydmVyKCkub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGZuKGVycik7XG4gICAgfVxuICAgIGZuKG51bGwsIHRydWUpO1xuICB9KS5vbmNlKCdsaXN0ZW5pbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGVzdGVyLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm4obnVsbCwgZmFsc2UpO1xuICAgIH0pLmNsb3NlKCk7XG4gIH0pLmxpc3Rlbihwb3J0KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///104\n")},function(module,exports){eval('module.exports = require("net");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXRcIj8yMWVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5ldFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///105\n')},function(module,exports){eval('module.exports = require("child_process");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjaGlsZF9wcm9jZXNzXCI/M2RhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///106\n')}])}));